{
  "/v1/activities/activity": {
    "get": {
      "operationId": "getActivities",
      "summary": "Get Activities",
      "description": "Retrieves a page of instances of `activity`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: venue. [optional] [default: null] [example: \"venue\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "fromDate",
          "required": false,
          "description": "Date (, eg. 20190102) Filter the results to only returns activities which `endDate` happens on and after the provided value. Together with `toDate` it can be used to only return activities that are active in a date range. [optional] [default: null] [example: \"2018-01-04\"]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "toDate",
          "required": false,
          "description": "Date (, eg. 20190102) Filter the results to only returns activities which `startDate` happens on and before the provided value. Together with `fromDate` it can be used to only return activities that are active in a date range. [optional] [default: null] [example: \"2018-01-04\"]",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activity' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activity"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activity",
                        "id": "1",
                        "attributes": {
                          "name": "Basketball Match",
                          "reportName": "Basketball Match Report",
                          "description": "A basketball match between two classes.",
                          "startDate": "2018-10-01",
                          "endDate": "2018-10-01",
                          "startTime": "10:00:00",
                          "endTime": "12:00:00",
                          "permissionFormDueDate": null,
                          "isRestrictedByTerm": false,
                          "isRestrictedByYear": false,
                          "showReports": false,
                          "showAttendance": false,
                          "showPortal": false,
                          "selfRegistration": false,
                          "approvalRequired": false,
                          "maximumPlaces": 128,
                          "waitingListPlaces": 30,
                          "archived": null,
                          "riskAssessment": false,
                          "registrationType": "ACTIVITY",
                          "portalDescription": "A match (remember to call parents).",
                          "availableTerms": [],
                          "availableYears": null,
                          "isActive": true
                        },
                        "relationships": {
                          "cycles": {
                            "links": {
                              "related": "/v1/activities/activity/1/cycles"
                            }
                          },
                          "instances": {
                            "links": {
                              "related": "/v1/activities/activity/1/instances"
                            }
                          },
                          "organisers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity/1",
                          "cycles": "/v1/activities/activity/1/cycles",
                          "instances": "/v1/activities/activity/1/instances"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "activity",
                        "id": "1",
                        "attributes": {
                          "name": "Basketball Match",
                          "reportName": "Basketball Match Report",
                          "description": "A basketball match between two classes.",
                          "startDate": "2018-10-01",
                          "endDate": "2018-10-01",
                          "startTime": "10:00:00",
                          "endTime": "12:00:00",
                          "permissionFormDueDate": null,
                          "isRestrictedByTerm": false,
                          "isRestrictedByYear": false,
                          "showReports": false,
                          "showAttendance": false,
                          "showPortal": false,
                          "selfRegistration": false,
                          "approvalRequired": false,
                          "maximumPlaces": 128,
                          "waitingListPlaces": 30,
                          "archived": null,
                          "riskAssessment": false,
                          "registrationType": "ACTIVITY",
                          "portalDescription": "A match (remember to call parents).",
                          "availableTerms": [],
                          "availableYears": null,
                          "isActive": true
                        },
                        "relationships": {
                          "cycles": {
                            "links": {
                              "related": "/v1/activities/activity/1/cycles"
                            }
                          },
                          "instances": {
                            "links": {
                              "related": "/v1/activities/activity/1/instances"
                            }
                          },
                          "organisers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity/1",
                          "cycles": "/v1/activities/activity/1/cycles",
                          "instances": "/v1/activities/activity/1/instances"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "activity",
                        "id": "1",
                        "attributes": {
                          "name": "Basketball Match",
                          "reportName": "Basketball Match Report",
                          "description": "A basketball match between two classes.",
                          "startDate": "2018-10-01",
                          "endDate": "2018-10-01",
                          "startTime": "10:00:00",
                          "endTime": "12:00:00",
                          "permissionFormDueDate": null,
                          "isRestrictedByTerm": false,
                          "isRestrictedByYear": false,
                          "showReports": false,
                          "showAttendance": false,
                          "showPortal": false,
                          "selfRegistration": false,
                          "approvalRequired": false,
                          "maximumPlaces": 128,
                          "waitingListPlaces": 30,
                          "archived": null,
                          "riskAssessment": false,
                          "registrationType": "ACTIVITY",
                          "portalDescription": "A match (remember to call parents).",
                          "availableTerms": [],
                          "availableYears": null,
                          "isActive": true
                        },
                        "relationships": {
                          "cycles": {
                            "links": {
                              "related": "/v1/activities/activity/1/cycles"
                            }
                          },
                          "instances": {
                            "links": {
                              "related": "/v1/activities/activity/1/instances"
                            }
                          },
                          "organisers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity/1",
                          "cycles": "/v1/activities/activity/1/cycles",
                          "instances": "/v1/activities/activity/1/instances"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-guardian-link": {
    "get": {
      "operationId": "getActivityGuardianLink",
      "summary": "Get Activity Guardian Link",
      "description": "Retrieves a page of instances of `activityGuardianLink`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityGuardianLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityGuardianLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityGuardianLink",
                        "id": "0",
                        "attributes": {
                          "startTime": "10:00:00",
                          "endTime": null
                        },
                        "relationships": {
                          "activityInstance": {
                            "data": {
                              "id": "2",
                              "type": "activityInstance"
                            }
                          },
                          "staff": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-guardian-link/0"
                        }
                      },
                      {
                        "type": "activityGuardianLink",
                        "id": "0",
                        "attributes": {
                          "startTime": "10:00:00",
                          "endTime": null
                        },
                        "relationships": {
                          "activityInstance": {
                            "data": {
                              "id": "2",
                              "type": "activityInstance"
                            }
                          },
                          "staff": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-guardian-link/0"
                        }
                      },
                      {
                        "type": "activityGuardianLink",
                        "id": "0",
                        "attributes": {
                          "startTime": "10:00:00",
                          "endTime": null
                        },
                        "relationships": {
                          "activityInstance": {
                            "data": {
                              "id": "2",
                              "type": "activityInstance"
                            }
                          },
                          "staff": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-guardian-link/0"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-guardian-link/{id}": {
    "get": {
      "operationId": "getActivityGuardianLinks",
      "summary": "Get Activity Guardian Links",
      "description": "Retrieves a single instance of `activityGuardianLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityGuardianLink' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activityGuardianLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activityGuardianLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activityGuardianLink",
                      "id": "0",
                      "attributes": {
                        "startTime": "10:00:00",
                        "endTime": null
                      },
                      "relationships": {
                        "activityInstance": {
                          "data": {
                            "id": "2",
                            "type": "activityInstance"
                          }
                        },
                        "staff": {
                          "data": {
                            "id": "1",
                            "type": "staff"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/activity-guardian-link/0"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-instance": {
    "get": {
      "operationId": "getActivityInstances",
      "summary": "Get Activity Instances",
      "description": "Retrieves a page of instances of `activityInstance`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: activity. [optional] [default: null] [example: \"activity\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "activityIds",
          "required": false,
          "description": "String Comma-separated list of `activity` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "fromDate",
          "required": false,
          "description": "Date (, eg. 20190102) Filter the results to only returns activity instances which `activity` relation's `endDate` happens on and after the provided value. Together with `toDate` it can be used to only return activity instances that are active in a date range. [optional] [default: null] [example: \"2018-01-04\"]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "toDate",
          "required": false,
          "description": "Date (, eg. 20190102) Filter the results to only returns activity instances which `activity` relation's `startDate` happens on and before the provided value. Together with `fromDate` it can be used to only return activity instances that are active in a date range. [optional] [default: null] [example: \"2018-01-04\"]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityInstance' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityInstance"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityInstance",
                        "id": "1",
                        "attributes": {
                          "status": "pending",
                          "year": 2018,
                          "name": "2018 - ",
                          "startDate": "2018-01-01",
                          "endDate": "2018-01-02",
                          "startTime": "12:00:00",
                          "endTime": "13:00:00",
                          "isPublishedToPortal": true,
                          "isPaymentRequired": true,
                          "isPermissionRequired": true,
                          "isActive": true
                        },
                        "relationships": {
                          "activity": {
                            "data": {
                              "id": "1",
                              "type": "activity"
                            }
                          },
                          "rolls": {
                            "links": {
                              "related": "/v1/activities/activity-instance/1/rolls"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-instance/1",
                          "rolls": "/v1/activities/activity-instance/1/rolls"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "activityInstance",
                        "id": "1",
                        "attributes": {
                          "status": "pending",
                          "year": 2018,
                          "name": "2018 - ",
                          "startDate": "2018-01-01",
                          "endDate": "2018-01-02",
                          "startTime": "12:00:00",
                          "endTime": "13:00:00",
                          "isPublishedToPortal": true,
                          "isPaymentRequired": true,
                          "isPermissionRequired": true,
                          "isActive": true
                        },
                        "relationships": {
                          "activity": {
                            "data": {
                              "id": "1",
                              "type": "activity"
                            }
                          },
                          "rolls": {
                            "links": {
                              "related": "/v1/activities/activity-instance/1/rolls"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-instance/1",
                          "rolls": "/v1/activities/activity-instance/1/rolls"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "activityInstance",
                        "id": "1",
                        "attributes": {
                          "status": "pending",
                          "year": 2018,
                          "name": "2018 - ",
                          "startDate": "2018-01-01",
                          "endDate": "2018-01-02",
                          "startTime": "12:00:00",
                          "endTime": "13:00:00",
                          "isPublishedToPortal": true,
                          "isPaymentRequired": true,
                          "isPermissionRequired": true,
                          "isActive": true
                        },
                        "relationships": {
                          "activity": {
                            "data": {
                              "id": "1",
                              "type": "activity"
                            }
                          },
                          "rolls": {
                            "links": {
                              "related": "/v1/activities/activity-instance/1/rolls"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-instance/1",
                          "rolls": "/v1/activities/activity-instance/1/rolls"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-instance/{id}": {
    "get": {
      "operationId": "getActivityInstance",
      "summary": "Get Activity Instance",
      "description": "Retrieves a single instance of `activityInstance`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityInstance' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: activity. [optional] [default: null] [example: \"activity\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activityInstance' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activityInstance"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activityInstance",
                      "id": "1",
                      "attributes": {
                        "status": "pending",
                        "year": 2018,
                        "name": "2018 - ",
                        "startDate": "2018-01-01",
                        "endDate": "2018-01-02",
                        "startTime": "12:00:00",
                        "endTime": "13:00:00",
                        "isPublishedToPortal": true,
                        "isPaymentRequired": true,
                        "isPermissionRequired": true,
                        "isActive": true
                      },
                      "relationships": {
                        "activity": {
                          "data": {
                            "id": "1",
                            "type": "activity"
                          }
                        },
                        "rolls": {
                          "links": {
                            "related": "/v1/activities/activity-instance/1/rolls"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/activity-instance/1",
                        "rolls": "/v1/activities/activity-instance/1/rolls"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-instance/{id}/attendee-links": {
    "get": {
      "operationId": "getActivityInstanceAttendeeLinks",
      "summary": "Get Activity Instance Attendee Links",
      "description": "Retrieves a page of the instances of ``, the relation `attendeeLinks` of `attendeeLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'attendeeLink' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'attendeeLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/attendeeLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "attendeeLink",
                        "id": "1",
                        "attributes": {
                          "attendeeType": "Family Member",
                          "showInReports": null,
                          "points": null,
                          "permissionGiven": "Unknown",
                          "paid": false,
                          "paidAmount": null
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "1",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/attendee-link/1",
                          "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                        }
                      },
                      {
                        "type": "attendeeLink",
                        "id": "1",
                        "attributes": {
                          "attendeeType": "Family Member",
                          "showInReports": null,
                          "points": null,
                          "permissionGiven": "Unknown",
                          "paid": false,
                          "paidAmount": null
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "1",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/attendee-link/1",
                          "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                        }
                      },
                      {
                        "type": "attendeeLink",
                        "id": "1",
                        "attributes": {
                          "attendeeType": "Family Member",
                          "showInReports": null,
                          "points": null,
                          "permissionGiven": "Unknown",
                          "paid": false,
                          "paidAmount": null
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "1",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/attendee-link/1",
                          "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postActivityInstanceAttendeeLink",
      "summary": "Post Activity Instance Attendee Link",
      "description": "Adds a student to an `activityInstance` by creating a new `attendeeLink`.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`attendeeLink`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `showInReports` → Boolean Whether to display this attendee link in reports [example: TRUE]\n * Relationships\n   * `student` → [required] [single] expected type is `student`. ",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `activityInstance` to which the student should be added [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "showInReports": {
                              "type": "boolean",
                              "description": "Boolean Whether to display this attendee link in reports [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "student": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "attendeeLink",
                    "attributes": {
                      "showInReports": true
                    },
                    "relationships": {
                      "student": {
                        "data": {
                          "id": 1,
                          "type": "student"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'attendeeLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/attendeeLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "attendeeLink",
                      "id": "1",
                      "attributes": {
                        "attendeeType": "Family Member",
                        "showInReports": null,
                        "points": null,
                        "permissionGiven": "Unknown",
                        "paid": false,
                        "paidAmount": null
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        },
                        "activityInstance": {
                          "data": {
                            "id": "1",
                            "type": "activityInstance"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/attendee-link/1",
                        "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-instance/{id}/guardian-links": {
    "get": {
      "operationId": "getActivityInstanceGuardianLinks",
      "summary": "Get Activity Instance Guardian Links",
      "description": "Retrieves a page of the instances of ``, the relation `guardianLinks` of `activityGuardianLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityGuardianLink' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityGuardianLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityGuardianLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityGuardianLink",
                        "id": "0",
                        "attributes": {
                          "startTime": "10:00:00",
                          "endTime": null
                        },
                        "relationships": {
                          "activityInstance": {
                            "data": {
                              "id": "2",
                              "type": "activityInstance"
                            }
                          },
                          "staff": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-guardian-link/0"
                        }
                      },
                      {
                        "type": "activityGuardianLink",
                        "id": "0",
                        "attributes": {
                          "startTime": "10:00:00",
                          "endTime": null
                        },
                        "relationships": {
                          "activityInstance": {
                            "data": {
                              "id": "2",
                              "type": "activityInstance"
                            }
                          },
                          "staff": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-guardian-link/0"
                        }
                      },
                      {
                        "type": "activityGuardianLink",
                        "id": "0",
                        "attributes": {
                          "startTime": "10:00:00",
                          "endTime": null
                        },
                        "relationships": {
                          "activityInstance": {
                            "data": {
                              "id": "2",
                              "type": "activityInstance"
                            }
                          },
                          "staff": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-guardian-link/0"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-instance/{id}/responses": {
    "post": {
      "operationId": "postActivitInstanceResponse",
      "summary": "Post Activit Instance Response",
      "description": "Adds a new `activityResponse` to a published `activityInstance`.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`activityResponse`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `additionalNotes` → String {DESCRIPTION-MISSING} [example: \"Response was delivered via snail mail\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive\n   * `medicalDetails` → String {DESCRIPTION-MISSING} [example: \"None\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive\n   * `emergencyContactDetails` → String {DESCRIPTION-MISSING} [example: \"Mother, Jane Doe, +48 123-123-123\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive\n   * `consentedBy` → String {DESCRIPTION-MISSING} [example: \"Mother\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive\n   * `permissionGiven` → String {DESCRIPTION-MISSING} [example: \"Yes\"] \nValue constraints:\nAllowed values: \"Unknown\", \"Yes\", \"No\", \"Excluded\"\n   * `isPaid` → Boolean {DESCRIPTION-MISSING} [example: FALSE]\n * Relationships\n   * `student` → [required] [single] expected type is `student`. \n   * `coreConsentor` → [optional] [single] expected type is `corePerson`. Only one of `coreConsentor` and `enrolmentConsentor` must be provided - the operation will fail if both are in the payload.\n   * `enrolmentConsentor` → [optional] [single] expected type is `person`. Only one of `coreConsentor` and `enrolmentConsentor` must be provided - the operation will fail if both are in the payload.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityInstance' to which a detail should be added. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalNotes": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"Response was delivered via snail mail\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive"
                            },
                            "medicalDetails": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"None\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive"
                            },
                            "emergencyContactDetails": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"Mother, Jane Doe, +48 123-123-123\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive"
                            },
                            "consentedBy": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"Mother\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive"
                            },
                            "permissionGiven": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"Yes\"] \nValue constraints:\nAllowed values: \"Unknown\", \"Yes\", \"No\", \"Excluded\""
                            },
                            "isPaid": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: FALSE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "student": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "coreConsentor": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "enrolmentConsentor": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "activityResponse",
                    "attributes": {
                      "additionalNotes": "Response was delivered via snail mail",
                      "medicalDetails": "None",
                      "emergencyContactDetails": "Mother, Jane Doe, +48 123-123-123",
                      "consentedBy": "Mother",
                      "permissionGiven": "Yes",
                      "isPaid": false
                    },
                    "relationships": {
                      "student": {
                        "data": {
                          "id": 1,
                          "type": "student"
                        }
                      },
                      "coreConsentor": {
                        "data": {
                          "id": 1,
                          "type": "corePerson"
                        }
                      },
                      "enrolmentConsentor": {
                        "data": {
                          "id": 1,
                          "type": "person"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activityResponse' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activityResponse"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activityResponse",
                      "id": "1",
                      "attributes": {
                        "additionalNotes": "Nothing",
                        "medicalDetails": "None",
                        "emergencyContactDetails": "John McDoe, (03) 8070 5665",
                        "consentedAt": null,
                        "consentedBy": "John McDoe",
                        "permissionGiven": "Yes",
                        "isPaid": true
                      },
                      "relationships": {
                        "attendeeStudent": {
                          "data": {
                            "id": "6",
                            "type": "student"
                          }
                        },
                        "coreConsentor": {
                          "data": {
                            "id": "4",
                            "type": "corePerson"
                          }
                        },
                        "enrolmentConsentor": {
                          "data": {
                            "id": "7",
                            "type": "person"
                          }
                        },
                        "activityInstance": {
                          "data": {
                            "id": "5",
                            "type": "activityInstance"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/activity-response/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getActivityInstanceResponses",
      "summary": "Get Activity Instance Responses",
      "description": "Retrieves a page of the instances of ``, the relation `responses` of `activityResponse`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityResponse' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "studentIds",
          "required": false,
          "description": "String Comma-separated list of `student` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "studentId",
          "required": false,
          "description": "[Deprecated] Use `studentIds` instead. String Comma-separated list of `student` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityResponse' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityResponse"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityResponse",
                        "id": "1",
                        "attributes": {
                          "additionalNotes": "Nothing",
                          "medicalDetails": "None",
                          "emergencyContactDetails": "John McDoe, (03) 8070 5665",
                          "consentedAt": null,
                          "consentedBy": "John McDoe",
                          "permissionGiven": "Yes",
                          "isPaid": true
                        },
                        "relationships": {
                          "attendeeStudent": {
                            "data": {
                              "id": "6",
                              "type": "student"
                            }
                          },
                          "coreConsentor": {
                            "data": {
                              "id": "4",
                              "type": "corePerson"
                            }
                          },
                          "enrolmentConsentor": {
                            "data": {
                              "id": "7",
                              "type": "person"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "5",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/activity-response/1"
                        }
                      },
                      {
                        "type": "activityResponse",
                        "id": "1",
                        "attributes": {
                          "additionalNotes": "Nothing",
                          "medicalDetails": "None",
                          "emergencyContactDetails": "John McDoe, (03) 8070 5665",
                          "consentedAt": null,
                          "consentedBy": "John McDoe",
                          "permissionGiven": "Yes",
                          "isPaid": true
                        },
                        "relationships": {
                          "attendeeStudent": {
                            "data": {
                              "id": "6",
                              "type": "student"
                            }
                          },
                          "coreConsentor": {
                            "data": {
                              "id": "4",
                              "type": "corePerson"
                            }
                          },
                          "enrolmentConsentor": {
                            "data": {
                              "id": "7",
                              "type": "person"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "5",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/activity-response/1"
                        }
                      },
                      {
                        "type": "activityResponse",
                        "id": "1",
                        "attributes": {
                          "additionalNotes": "Nothing",
                          "medicalDetails": "None",
                          "emergencyContactDetails": "John McDoe, (03) 8070 5665",
                          "consentedAt": null,
                          "consentedBy": "John McDoe",
                          "permissionGiven": "Yes",
                          "isPaid": true
                        },
                        "relationships": {
                          "attendeeStudent": {
                            "data": {
                              "id": "6",
                              "type": "student"
                            }
                          },
                          "coreConsentor": {
                            "data": {
                              "id": "4",
                              "type": "corePerson"
                            }
                          },
                          "enrolmentConsentor": {
                            "data": {
                              "id": "7",
                              "type": "person"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "5",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/activity-response/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-instance/{id}/rolls": {
    "get": {
      "operationId": "getActivityInstanceRolls",
      "summary": "Get Activity Instance Rolls",
      "description": "Retrieves all of the instances of ``, the relation `rolls` of `activityRoll`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityRoll' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityRoll' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityRoll"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityRoll",
                        "id": "1",
                        "attributes": {
                          "name": "Main roll",
                          "rollDate": null,
                          "isSubmitted": null
                        },
                        "relationships": {
                          "activityInstance": {
                            "data": {
                              "id": "2",
                              "type": "activityInstance"
                            },
                            "links": {
                              "related": "/v1/activities/activity-instance/1/activity-instance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/roll/1",
                          "activityInstance": "/v1/activities/roll/1/activity-instance",
                          "uiMarkRolls": "/activities/mark_roll/1"
                        }
                      },
                      {
                        "type": "activityRoll",
                        "id": "1",
                        "attributes": {
                          "name": "Main roll",
                          "rollDate": null,
                          "isSubmitted": null
                        },
                        "relationships": {
                          "activityInstance": {
                            "data": {
                              "id": "2",
                              "type": "activityInstance"
                            },
                            "links": {
                              "related": "/v1/activities/activity-instance/1/activity-instance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/roll/1",
                          "activityInstance": "/v1/activities/roll/1/activity-instance",
                          "uiMarkRolls": "/activities/mark_roll/1"
                        }
                      },
                      {
                        "type": "activityRoll",
                        "id": "1",
                        "attributes": {
                          "name": "Main roll",
                          "rollDate": null,
                          "isSubmitted": null
                        },
                        "relationships": {
                          "activityInstance": {
                            "data": {
                              "id": "2",
                              "type": "activityInstance"
                            },
                            "links": {
                              "related": "/v1/activities/activity-instance/1/activity-instance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/roll/1",
                          "activityInstance": "/v1/activities/roll/1/activity-instance",
                          "uiMarkRolls": "/activities/mark_roll/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-position": {
    "get": {
      "operationId": "getActivityPositions",
      "summary": "Get Activity Positions",
      "description": "Retrieves a page of instances of `activityPosition`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityPosition' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityPosition"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityPosition",
                        "id": "1",
                        "attributes": {
                          "name": "Example position"
                        },
                        "links": {
                          "self": "/v1/activities/activity-position/1"
                        }
                      },
                      {
                        "type": "activityPosition",
                        "id": "1",
                        "attributes": {
                          "name": "Example position"
                        },
                        "links": {
                          "self": "/v1/activities/activity-position/1"
                        }
                      },
                      {
                        "type": "activityPosition",
                        "id": "1",
                        "attributes": {
                          "name": "Example position"
                        },
                        "links": {
                          "self": "/v1/activities/activity-position/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-position-group": {
    "get": {
      "operationId": "getActivityPositionGroups",
      "summary": "Get Activity Position Groups",
      "description": "Retrieves a page of instances of `activityPositionGroup`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityPositionGroup' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityPositionGroup"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityPositionGroup",
                        "id": "1",
                        "attributes": {
                          "name": "Example group"
                        },
                        "relationships": {
                          "positions": {
                            "links": {
                              "related": "/v1/activities/activity-position-group/1/positions"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-position-group/1"
                        }
                      },
                      {
                        "type": "activityPositionGroup",
                        "id": "1",
                        "attributes": {
                          "name": "Example group"
                        },
                        "relationships": {
                          "positions": {
                            "links": {
                              "related": "/v1/activities/activity-position-group/1/positions"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-position-group/1"
                        }
                      },
                      {
                        "type": "activityPositionGroup",
                        "id": "1",
                        "attributes": {
                          "name": "Example group"
                        },
                        "relationships": {
                          "positions": {
                            "links": {
                              "related": "/v1/activities/activity-position-group/1/positions"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-position-group/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-position-group/{id}": {
    "get": {
      "operationId": "getActivityPositionGroup",
      "summary": "Get Activity Position Group",
      "description": "Retrieves a single instance of `activityPositionGroup`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityPositionGroup' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activityPositionGroup' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activityPositionGroup"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activityPositionGroup",
                      "id": "1",
                      "attributes": {
                        "name": "Example group"
                      },
                      "relationships": {
                        "positions": {
                          "links": {
                            "related": "/v1/activities/activity-position-group/1/positions"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/activity-position-group/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-position-group/{id}/positions": {
    "get": {
      "operationId": "getActivityPositionGroupPositions",
      "summary": "Get Activity Position Group Positions",
      "description": "Retrieves a page of the instances of ``, the relation `positions` of `activityPosition`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityPosition' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityPosition' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityPosition"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityPosition",
                        "id": "1",
                        "attributes": {
                          "name": "Example position"
                        },
                        "links": {
                          "self": "/v1/activities/activity-position/1"
                        }
                      },
                      {
                        "type": "activityPosition",
                        "id": "1",
                        "attributes": {
                          "name": "Example position"
                        },
                        "links": {
                          "self": "/v1/activities/activity-position/1"
                        }
                      },
                      {
                        "type": "activityPosition",
                        "id": "1",
                        "attributes": {
                          "name": "Example position"
                        },
                        "links": {
                          "self": "/v1/activities/activity-position/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-position/{id}": {
    "get": {
      "operationId": "getActivityPosition",
      "summary": "Get Activity Position",
      "description": "Retrieves a single instance of `activityPosition`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityPosition' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activityPosition' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activityPosition"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activityPosition",
                      "id": "1",
                      "attributes": {
                        "name": "Example position"
                      },
                      "links": {
                        "self": "/v1/activities/activity-position/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-sport-event": {
    "get": {
      "operationId": "getActivitySportEvents",
      "summary": "Get Activity Sport Events",
      "description": "Retrieves a page of instances of `activitySportEvent`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: venues, grounds, coaches, vehicles, teams. [optional] [default: null] [example: \"venues\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "activityIds",
          "required": false,
          "description": "String Comma-separated list of `activity` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "fromDate",
          "required": false,
          "description": "Date (, eg. 20190102) Filter the results to only returns events which `endDate` happens on and after the provided value. Together with `toDate` it can be used to only return events that are active in a date range. [optional] [default: null] [example: \"2018-01-04\"]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "toDate",
          "required": false,
          "description": "Date (, eg. 20190102) Filter the results to only returns events which `startDate` happens on and before the provided value. Together with `fromDate` it can be used to only return events that are active in a date range. [optional] [default: null] [example: \"2018-01-04\"]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activitySportEvent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activitySportEvent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activitySportEvent",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "description": null,
                          "startDate": "2018-01-01",
                          "endDate": "2018-01-03",
                          "startTime": "08:00:00",
                          "endTime": "17:45:00",
                          "isWholeDay": false,
                          "placeType": "central",
                          "opposition": "",
                          "playersType": "cohort",
                          "type": "practice",
                          "isActive": true
                        },
                        "relationships": {
                          "venues": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/venues"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/grounds"
                            }
                          },
                          "coaches": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/coaches"
                            }
                          },
                          "vehicles": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/vehicle"
                            }
                          },
                          "teams": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/teams"
                            }
                          },
                          "transportEvents": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/transport-events"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-sport-event/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "activitySportEvent",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "description": null,
                          "startDate": "2018-01-01",
                          "endDate": "2018-01-03",
                          "startTime": "08:00:00",
                          "endTime": "17:45:00",
                          "isWholeDay": false,
                          "placeType": "central",
                          "opposition": "",
                          "playersType": "cohort",
                          "type": "practice",
                          "isActive": true
                        },
                        "relationships": {
                          "venues": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/venues"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/grounds"
                            }
                          },
                          "coaches": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/coaches"
                            }
                          },
                          "vehicles": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/vehicle"
                            }
                          },
                          "teams": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/teams"
                            }
                          },
                          "transportEvents": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/transport-events"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-sport-event/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "activitySportEvent",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "description": null,
                          "startDate": "2018-01-01",
                          "endDate": "2018-01-03",
                          "startTime": "08:00:00",
                          "endTime": "17:45:00",
                          "isWholeDay": false,
                          "placeType": "central",
                          "opposition": "",
                          "playersType": "cohort",
                          "type": "practice",
                          "isActive": true
                        },
                        "relationships": {
                          "venues": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/venues"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/grounds"
                            }
                          },
                          "coaches": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/coaches"
                            }
                          },
                          "vehicles": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/vehicle"
                            }
                          },
                          "teams": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/teams"
                            }
                          },
                          "transportEvents": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/transport-events"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-sport-event/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-sport-event/{id}": {
    "get": {
      "operationId": "getActivitySportEvent",
      "summary": "Get Activity Sport Event",
      "description": "Retrieves a single instance of `activitySportEvent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activitySportEvent' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: venues, grounds, coaches, vehicles, teams. [optional] [default: null] [example: \"venues\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activitySportEvent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activitySportEvent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activitySportEvent",
                      "id": "1",
                      "attributes": {
                        "name": null,
                        "description": null,
                        "startDate": "2018-01-01",
                        "endDate": "2018-01-03",
                        "startTime": "08:00:00",
                        "endTime": "17:45:00",
                        "isWholeDay": false,
                        "placeType": "central",
                        "opposition": "",
                        "playersType": "cohort",
                        "type": "practice",
                        "isActive": true
                      },
                      "relationships": {
                        "venues": {
                          "links": {
                            "related": "/v1/activities/activity-sport-event/1/venues"
                          }
                        },
                        "grounds": {
                          "links": {
                            "related": "/v1/activities/activity-sport-event/1/grounds"
                          }
                        },
                        "coaches": {
                          "links": {
                            "related": "/v1/activities/activity-sport-event/1/coaches"
                          }
                        },
                        "vehicles": {
                          "links": {
                            "related": "/v1/activities/activity-sport-event/1/vehicle"
                          }
                        },
                        "teams": {
                          "links": {
                            "related": "/v1/activities/activity-sport-event/1/teams"
                          }
                        },
                        "transportEvents": {
                          "links": {
                            "related": "/v1/activities/activity-sport-event/1/transport-events"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/activity-sport-event/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-sport-event/{id}/coaches": {
    "get": {
      "operationId": "getActivitySportEventCoaches",
      "summary": "Get Activity Sport Event Coaches",
      "description": "Retrieves a page of the instances of ``, the relation `coaches` of `staff`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'staff' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person, qualifications, employments. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'staff' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/staff"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "staff",
                        "id": "1",
                        "attributes": {
                          "staffCode": "978020137962",
                          "timetableCode": "978020137962",
                          "barcode": "9031101",
                          "emergencyContactName": "John",
                          "emergencyContactPhone": "(03) 8070 5665",
                          "emergencyContactMobile": "(03) 8070 5665",
                          "employmentStatus": 2,
                          "employmentClassification": "teaching",
                          "jobTitle": "Teacher",
                          "contractCommencementDate": "2018-10-01",
                          "contractExpiryDate": "2018-10-01",
                          "wWCCNumber": "9031101",
                          "wWCCStatus": null,
                          "wWCCExpiryDate": "2018-10-01",
                          "codeOfConductDateSigned": "2018-10-01",
                          "socialNetworkingPolicyDateSigned": "2018-10-01",
                          "childProtectionPolicyDateSigned": "2018-10-01",
                          "iCTPolicyDateSigned": "2018-10-01",
                          "firstAidExpiryDate": "2018-10-01",
                          "resuscitationExpiryDate": "2018-10-01",
                          "publicLiabilityExpiryDate": "2018-10-01",
                          "aGSNumber": "978020137962",
                          "positionNumber": null,
                          "payRate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/person"
                            }
                          },
                          "absences": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/absences"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/staff/1",
                          "person": "/v1/enrolments/staff/1/person",
                          "absences": "/v1/enrolments/staff/1/absences"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "staff",
                        "id": "1",
                        "attributes": {
                          "staffCode": "978020137962",
                          "timetableCode": "978020137962",
                          "barcode": "9031101",
                          "emergencyContactName": "John",
                          "emergencyContactPhone": "(03) 8070 5665",
                          "emergencyContactMobile": "(03) 8070 5665",
                          "employmentStatus": 2,
                          "employmentClassification": "teaching",
                          "jobTitle": "Teacher",
                          "contractCommencementDate": "2018-10-01",
                          "contractExpiryDate": "2018-10-01",
                          "wWCCNumber": "9031101",
                          "wWCCStatus": null,
                          "wWCCExpiryDate": "2018-10-01",
                          "codeOfConductDateSigned": "2018-10-01",
                          "socialNetworkingPolicyDateSigned": "2018-10-01",
                          "childProtectionPolicyDateSigned": "2018-10-01",
                          "iCTPolicyDateSigned": "2018-10-01",
                          "firstAidExpiryDate": "2018-10-01",
                          "resuscitationExpiryDate": "2018-10-01",
                          "publicLiabilityExpiryDate": "2018-10-01",
                          "aGSNumber": "978020137962",
                          "positionNumber": null,
                          "payRate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/person"
                            }
                          },
                          "absences": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/absences"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/staff/1",
                          "person": "/v1/enrolments/staff/1/person",
                          "absences": "/v1/enrolments/staff/1/absences"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "staff",
                        "id": "1",
                        "attributes": {
                          "staffCode": "978020137962",
                          "timetableCode": "978020137962",
                          "barcode": "9031101",
                          "emergencyContactName": "John",
                          "emergencyContactPhone": "(03) 8070 5665",
                          "emergencyContactMobile": "(03) 8070 5665",
                          "employmentStatus": 2,
                          "employmentClassification": "teaching",
                          "jobTitle": "Teacher",
                          "contractCommencementDate": "2018-10-01",
                          "contractExpiryDate": "2018-10-01",
                          "wWCCNumber": "9031101",
                          "wWCCStatus": null,
                          "wWCCExpiryDate": "2018-10-01",
                          "codeOfConductDateSigned": "2018-10-01",
                          "socialNetworkingPolicyDateSigned": "2018-10-01",
                          "childProtectionPolicyDateSigned": "2018-10-01",
                          "iCTPolicyDateSigned": "2018-10-01",
                          "firstAidExpiryDate": "2018-10-01",
                          "resuscitationExpiryDate": "2018-10-01",
                          "publicLiabilityExpiryDate": "2018-10-01",
                          "aGSNumber": "978020137962",
                          "positionNumber": null,
                          "payRate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/person"
                            }
                          },
                          "absences": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/absences"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/staff/1",
                          "person": "/v1/enrolments/staff/1/person",
                          "absences": "/v1/enrolments/staff/1/absences"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-sport-event/{id}/grounds": {
    "get": {
      "operationId": "getActivitySportEventGrounds",
      "summary": "Get Activity Sport Event Grounds",
      "description": "Retrieves a page of the instances of ``, the relation `grounds` of `venueGrounds`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'venueGrounds' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'venueGrounds' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/venueGrounds"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "venueGrounds",
                        "id": "1",
                        "attributes": {
                          "name": "Footbal Stadium"
                        },
                        "relationships": {
                          "venue": {
                            "data": {
                              "id": "2",
                              "type": "venue"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue-grounds/1"
                        }
                      },
                      {
                        "type": "venueGrounds",
                        "id": "1",
                        "attributes": {
                          "name": "Footbal Stadium"
                        },
                        "relationships": {
                          "venue": {
                            "data": {
                              "id": "2",
                              "type": "venue"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue-grounds/1"
                        }
                      },
                      {
                        "type": "venueGrounds",
                        "id": "1",
                        "attributes": {
                          "name": "Footbal Stadium"
                        },
                        "relationships": {
                          "venue": {
                            "data": {
                              "id": "2",
                              "type": "venue"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue-grounds/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-sport-event/{id}/teams": {
    "get": {
      "operationId": "getActivitySportEventTeams",
      "summary": "Get Activity Sport Event Teams",
      "description": "Retrieves a page of the instances of ``, the relation `teams` of `activityTeam`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityTeam' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: teamMembers, teamMemberPositions. [optional] [default: null] [example: \"teamMembers\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityTeam' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityTeam"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityTeam",
                        "id": "1",
                        "attributes": {
                          "name": "Wild Donkeys"
                        },
                        "relationships": {
                          "activity": {
                            "data": {
                              "id": "2",
                              "type": "activity"
                            }
                          },
                          "coaches": {
                            "links": {
                              "related": "/v1/activites/activity-team/1/coaches"
                            }
                          },
                          "teamMembers": {
                            "links": {
                              "related": "/v1/activites/activity-team/1/team-members"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-team/1"
                        }
                      },
                      {
                        "type": "activityTeam",
                        "id": "1",
                        "attributes": {
                          "name": "Wild Donkeys"
                        },
                        "relationships": {
                          "activity": {
                            "data": {
                              "id": "2",
                              "type": "activity"
                            }
                          },
                          "coaches": {
                            "links": {
                              "related": "/v1/activites/activity-team/1/coaches"
                            }
                          },
                          "teamMembers": {
                            "links": {
                              "related": "/v1/activites/activity-team/1/team-members"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-team/1"
                        }
                      },
                      {
                        "type": "activityTeam",
                        "id": "1",
                        "attributes": {
                          "name": "Wild Donkeys"
                        },
                        "relationships": {
                          "activity": {
                            "data": {
                              "id": "2",
                              "type": "activity"
                            }
                          },
                          "coaches": {
                            "links": {
                              "related": "/v1/activites/activity-team/1/coaches"
                            }
                          },
                          "teamMembers": {
                            "links": {
                              "related": "/v1/activites/activity-team/1/team-members"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-team/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-sport-event/{id}/transport-events": {
    "get": {
      "operationId": "getActivitySportEventTransportEvents",
      "summary": "Get Activity Sport Event Transport Events",
      "description": "Retrieves a page of the instances of ``, the relation `transportEvents` of `activityTransportEvent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityTransportEvent' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityTransportEvent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityTransportEvent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityTransportEvent",
                        "id": "1",
                        "attributes": {
                          "date": "2018-01-01",
                          "time": "08:00:00",
                          "type": "bus"
                        },
                        "relationships": {
                          "sportEvent": {
                            "data": {
                              "id": "3",
                              "type": "activitySportEvent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-transport-event/1"
                        }
                      },
                      {
                        "type": "activityTransportEvent",
                        "id": "1",
                        "attributes": {
                          "date": "2018-01-01",
                          "time": "08:00:00",
                          "type": "bus"
                        },
                        "relationships": {
                          "sportEvent": {
                            "data": {
                              "id": "3",
                              "type": "activitySportEvent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-transport-event/1"
                        }
                      },
                      {
                        "type": "activityTransportEvent",
                        "id": "1",
                        "attributes": {
                          "date": "2018-01-01",
                          "time": "08:00:00",
                          "type": "bus"
                        },
                        "relationships": {
                          "sportEvent": {
                            "data": {
                              "id": "3",
                              "type": "activitySportEvent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-transport-event/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-sport-event/{id}/vehicles": {
    "get": {
      "operationId": "getActivitySportEventVehicles",
      "summary": "Get Activity Sport Event Vehicles",
      "description": "Retrieves a page of the instances of ``, the relation `vehicles` of `activityVehicle`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityVehicle' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityVehicle' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityVehicle"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityVehicle",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "description": null,
                          "useDate": "2018-01-02",
                          "vehicleIdentifier": "GDA 1234P",
                          "capacity": 24,
                          "type": "bus"
                        },
                        "relationships": {
                          "transportEvents": {
                            "links": {
                              "related": "/v1/activities/activity-behicle/1/transport-events"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-vehicle/1"
                        }
                      },
                      {
                        "type": "activityVehicle",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "description": null,
                          "useDate": "2018-01-02",
                          "vehicleIdentifier": "GDA 1234P",
                          "capacity": 24,
                          "type": "bus"
                        },
                        "relationships": {
                          "transportEvents": {
                            "links": {
                              "related": "/v1/activities/activity-behicle/1/transport-events"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-vehicle/1"
                        }
                      },
                      {
                        "type": "activityVehicle",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "description": null,
                          "useDate": "2018-01-02",
                          "vehicleIdentifier": "GDA 1234P",
                          "capacity": 24,
                          "type": "bus"
                        },
                        "relationships": {
                          "transportEvents": {
                            "links": {
                              "related": "/v1/activities/activity-behicle/1/transport-events"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-vehicle/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-sport-event/{id}/venues": {
    "get": {
      "operationId": "getActivitySportEventVenues",
      "summary": "Get Activity Sport Event Venues",
      "description": "Retrieves a page of the instances of ``, the relation `venues` of `venue`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'venue' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: grounds. [optional] [default: null] [example: \"grounds\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'venue' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/venue"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "venue",
                        "id": "1",
                        "attributes": {
                          "name": "Australian International High School",
                          "address": null,
                          "mapUrl": null
                        },
                        "relationships": {
                          "group": {
                            "data": {
                              "id": "2",
                              "type": "venueGroup"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/venue/1/grounds"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue/1"
                        }
                      },
                      {
                        "type": "venue",
                        "id": "1",
                        "attributes": {
                          "name": "Australian International High School",
                          "address": null,
                          "mapUrl": null
                        },
                        "relationships": {
                          "group": {
                            "data": {
                              "id": "2",
                              "type": "venueGroup"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/venue/1/grounds"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue/1"
                        }
                      },
                      {
                        "type": "venue",
                        "id": "1",
                        "attributes": {
                          "name": "Australian International High School",
                          "address": null,
                          "mapUrl": null
                        },
                        "relationships": {
                          "group": {
                            "data": {
                              "id": "2",
                              "type": "venueGroup"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/venue/1/grounds"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-team": {
    "get": {
      "operationId": "getActivityTeams",
      "summary": "Get Activity Teams",
      "description": "Retrieves a page of instances of `activityTeam`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: teamMembers, teamMemberPositions. [optional] [default: null] [example: \"teamMembers\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "activityIds",
          "required": false,
          "description": "String Comma-separated list of `activity` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "studentIds",
          "required": false,
          "description": "String Comma-separated list of `student` IDs to filter by, linked through `teamMembers`; in other words will inly retrieve teams that have those students assigned to them.. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityTeam' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityTeam"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityTeam",
                        "id": "1",
                        "attributes": {
                          "name": "Wild Donkeys"
                        },
                        "relationships": {
                          "activity": {
                            "data": {
                              "id": "2",
                              "type": "activity"
                            }
                          },
                          "coaches": {
                            "links": {
                              "related": "/v1/activites/activity-team/1/coaches"
                            }
                          },
                          "teamMembers": {
                            "links": {
                              "related": "/v1/activites/activity-team/1/team-members"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-team/1"
                        }
                      },
                      {
                        "type": "activityTeam",
                        "id": "1",
                        "attributes": {
                          "name": "Wild Donkeys"
                        },
                        "relationships": {
                          "activity": {
                            "data": {
                              "id": "2",
                              "type": "activity"
                            }
                          },
                          "coaches": {
                            "links": {
                              "related": "/v1/activites/activity-team/1/coaches"
                            }
                          },
                          "teamMembers": {
                            "links": {
                              "related": "/v1/activites/activity-team/1/team-members"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-team/1"
                        }
                      },
                      {
                        "type": "activityTeam",
                        "id": "1",
                        "attributes": {
                          "name": "Wild Donkeys"
                        },
                        "relationships": {
                          "activity": {
                            "data": {
                              "id": "2",
                              "type": "activity"
                            }
                          },
                          "coaches": {
                            "links": {
                              "related": "/v1/activites/activity-team/1/coaches"
                            }
                          },
                          "teamMembers": {
                            "links": {
                              "related": "/v1/activites/activity-team/1/team-members"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-team/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-team-member": {
    "get": {
      "operationId": "getActivityActivityTeamMembers",
      "summary": "Get Activity Activity Team Members",
      "description": "Retrieves a page of instances of `activityTeamMember`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "positionIds",
          "required": false,
          "description": "String Comma-separated list of `position` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "attendeeLinkIds",
          "required": false,
          "description": "String Comma-separated list of `attendeeLink` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "teamIds",
          "required": false,
          "description": "String Comma-separated list of `team` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "cycleInstanceIds",
          "required": false,
          "description": "String Comma-separated list of `cycleInstance` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "sportEventIds",
          "required": false,
          "description": "String Comma-separated list of `activitySportEvent` relation, linked through `team` IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityTeamMember' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityTeamMember"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityTeamMember",
                        "id": "1",
                        "relationships": {
                          "attendeeLink": {
                            "data": {
                              "id": "5",
                              "type": "attendeeLink"
                            }
                          },
                          "team": {
                            "data": {
                              "id": "4",
                              "type": "activityTeam"
                            }
                          },
                          "position": {
                            "data": {
                              "id": "2",
                              "type": "activityPosition"
                            }
                          },
                          "cycleInstance": {
                            "data": {
                              "id": "3",
                              "type": "cycleInstance"
                            }
                          },
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-team-member/1"
                        }
                      },
                      {
                        "type": "activityTeamMember",
                        "id": "1",
                        "relationships": {
                          "attendeeLink": {
                            "data": {
                              "id": "5",
                              "type": "attendeeLink"
                            }
                          },
                          "team": {
                            "data": {
                              "id": "4",
                              "type": "activityTeam"
                            }
                          },
                          "position": {
                            "data": {
                              "id": "2",
                              "type": "activityPosition"
                            }
                          },
                          "cycleInstance": {
                            "data": {
                              "id": "3",
                              "type": "cycleInstance"
                            }
                          },
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-team-member/1"
                        }
                      },
                      {
                        "type": "activityTeamMember",
                        "id": "1",
                        "relationships": {
                          "attendeeLink": {
                            "data": {
                              "id": "5",
                              "type": "attendeeLink"
                            }
                          },
                          "team": {
                            "data": {
                              "id": "4",
                              "type": "activityTeam"
                            }
                          },
                          "position": {
                            "data": {
                              "id": "2",
                              "type": "activityPosition"
                            }
                          },
                          "cycleInstance": {
                            "data": {
                              "id": "3",
                              "type": "cycleInstance"
                            }
                          },
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-team-member/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-team-member/{id}": {
    "get": {
      "operationId": "getActivityActivityTeamMember",
      "summary": "Get Activity Activity Team Member",
      "description": "Retrieves a single instance of `activityTeamMember`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityTeamMember' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activityTeamMember' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activityTeamMember"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activityTeamMember",
                      "id": "1",
                      "relationships": {
                        "attendeeLink": {
                          "data": {
                            "id": "5",
                            "type": "attendeeLink"
                          }
                        },
                        "team": {
                          "data": {
                            "id": "4",
                            "type": "activityTeam"
                          }
                        },
                        "position": {
                          "data": {
                            "id": "2",
                            "type": "activityPosition"
                          }
                        },
                        "cycleInstance": {
                          "data": {
                            "id": "3",
                            "type": "cycleInstance"
                          }
                        },
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/activity-team-member/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-team/{id}": {
    "get": {
      "operationId": "getActivityTeam",
      "summary": "Get Activity Team",
      "description": "Retrieves a single instance of `activityTeam`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityTeam' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: teamMembers, teamMemberPositions. [optional] [default: null] [example: \"teamMembers\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activityTeam' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activityTeam"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activityTeam",
                      "id": "1",
                      "attributes": {
                        "name": "Wild Donkeys"
                      },
                      "relationships": {
                        "activity": {
                          "data": {
                            "id": "2",
                            "type": "activity"
                          }
                        },
                        "coaches": {
                          "links": {
                            "related": "/v1/activites/activity-team/1/coaches"
                          }
                        },
                        "teamMembers": {
                          "links": {
                            "related": "/v1/activites/activity-team/1/team-members"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/activity-team/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-team/{id}/coaches": {
    "get": {
      "operationId": "getActivityTeamCoaches",
      "summary": "Get Activity Team Coaches",
      "description": "Retrieves a page of the instances of ``, the relation `coaches` of `staff`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'staff' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person, qualifications, employments. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'staff' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/staff"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "staff",
                        "id": "1",
                        "attributes": {
                          "staffCode": "978020137962",
                          "timetableCode": "978020137962",
                          "barcode": "9031101",
                          "emergencyContactName": "John",
                          "emergencyContactPhone": "(03) 8070 5665",
                          "emergencyContactMobile": "(03) 8070 5665",
                          "employmentStatus": 2,
                          "employmentClassification": "teaching",
                          "jobTitle": "Teacher",
                          "contractCommencementDate": "2018-10-01",
                          "contractExpiryDate": "2018-10-01",
                          "wWCCNumber": "9031101",
                          "wWCCStatus": null,
                          "wWCCExpiryDate": "2018-10-01",
                          "codeOfConductDateSigned": "2018-10-01",
                          "socialNetworkingPolicyDateSigned": "2018-10-01",
                          "childProtectionPolicyDateSigned": "2018-10-01",
                          "iCTPolicyDateSigned": "2018-10-01",
                          "firstAidExpiryDate": "2018-10-01",
                          "resuscitationExpiryDate": "2018-10-01",
                          "publicLiabilityExpiryDate": "2018-10-01",
                          "aGSNumber": "978020137962",
                          "positionNumber": null,
                          "payRate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/person"
                            }
                          },
                          "absences": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/absences"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/staff/1",
                          "person": "/v1/enrolments/staff/1/person",
                          "absences": "/v1/enrolments/staff/1/absences"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "staff",
                        "id": "1",
                        "attributes": {
                          "staffCode": "978020137962",
                          "timetableCode": "978020137962",
                          "barcode": "9031101",
                          "emergencyContactName": "John",
                          "emergencyContactPhone": "(03) 8070 5665",
                          "emergencyContactMobile": "(03) 8070 5665",
                          "employmentStatus": 2,
                          "employmentClassification": "teaching",
                          "jobTitle": "Teacher",
                          "contractCommencementDate": "2018-10-01",
                          "contractExpiryDate": "2018-10-01",
                          "wWCCNumber": "9031101",
                          "wWCCStatus": null,
                          "wWCCExpiryDate": "2018-10-01",
                          "codeOfConductDateSigned": "2018-10-01",
                          "socialNetworkingPolicyDateSigned": "2018-10-01",
                          "childProtectionPolicyDateSigned": "2018-10-01",
                          "iCTPolicyDateSigned": "2018-10-01",
                          "firstAidExpiryDate": "2018-10-01",
                          "resuscitationExpiryDate": "2018-10-01",
                          "publicLiabilityExpiryDate": "2018-10-01",
                          "aGSNumber": "978020137962",
                          "positionNumber": null,
                          "payRate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/person"
                            }
                          },
                          "absences": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/absences"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/staff/1",
                          "person": "/v1/enrolments/staff/1/person",
                          "absences": "/v1/enrolments/staff/1/absences"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "staff",
                        "id": "1",
                        "attributes": {
                          "staffCode": "978020137962",
                          "timetableCode": "978020137962",
                          "barcode": "9031101",
                          "emergencyContactName": "John",
                          "emergencyContactPhone": "(03) 8070 5665",
                          "emergencyContactMobile": "(03) 8070 5665",
                          "employmentStatus": 2,
                          "employmentClassification": "teaching",
                          "jobTitle": "Teacher",
                          "contractCommencementDate": "2018-10-01",
                          "contractExpiryDate": "2018-10-01",
                          "wWCCNumber": "9031101",
                          "wWCCStatus": null,
                          "wWCCExpiryDate": "2018-10-01",
                          "codeOfConductDateSigned": "2018-10-01",
                          "socialNetworkingPolicyDateSigned": "2018-10-01",
                          "childProtectionPolicyDateSigned": "2018-10-01",
                          "iCTPolicyDateSigned": "2018-10-01",
                          "firstAidExpiryDate": "2018-10-01",
                          "resuscitationExpiryDate": "2018-10-01",
                          "publicLiabilityExpiryDate": "2018-10-01",
                          "aGSNumber": "978020137962",
                          "positionNumber": null,
                          "payRate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/person"
                            }
                          },
                          "absences": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/absences"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/staff/1",
                          "person": "/v1/enrolments/staff/1/person",
                          "absences": "/v1/enrolments/staff/1/absences"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-team/{id}/team-members": {
    "get": {
      "operationId": "getActivityTeamRelatedMembers",
      "summary": "Get Activity Team Related Members",
      "description": "Retrieves a page of the instances of ``, the relation `teamMembers` of `activityTeamMember`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityTeamMember' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityTeamMember' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityTeamMember"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityTeamMember",
                        "id": "1",
                        "relationships": {
                          "attendeeLink": {
                            "data": {
                              "id": "5",
                              "type": "attendeeLink"
                            }
                          },
                          "team": {
                            "data": {
                              "id": "4",
                              "type": "activityTeam"
                            }
                          },
                          "position": {
                            "data": {
                              "id": "2",
                              "type": "activityPosition"
                            }
                          },
                          "cycleInstance": {
                            "data": {
                              "id": "3",
                              "type": "cycleInstance"
                            }
                          },
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-team-member/1"
                        }
                      },
                      {
                        "type": "activityTeamMember",
                        "id": "1",
                        "relationships": {
                          "attendeeLink": {
                            "data": {
                              "id": "5",
                              "type": "attendeeLink"
                            }
                          },
                          "team": {
                            "data": {
                              "id": "4",
                              "type": "activityTeam"
                            }
                          },
                          "position": {
                            "data": {
                              "id": "2",
                              "type": "activityPosition"
                            }
                          },
                          "cycleInstance": {
                            "data": {
                              "id": "3",
                              "type": "cycleInstance"
                            }
                          },
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-team-member/1"
                        }
                      },
                      {
                        "type": "activityTeamMember",
                        "id": "1",
                        "relationships": {
                          "attendeeLink": {
                            "data": {
                              "id": "5",
                              "type": "attendeeLink"
                            }
                          },
                          "team": {
                            "data": {
                              "id": "4",
                              "type": "activityTeam"
                            }
                          },
                          "position": {
                            "data": {
                              "id": "2",
                              "type": "activityPosition"
                            }
                          },
                          "cycleInstance": {
                            "data": {
                              "id": "3",
                              "type": "cycleInstance"
                            }
                          },
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-team-member/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-transport-event": {
    "get": {
      "operationId": "getActivityTransportEvents",
      "summary": "Get Activity Transport Events",
      "description": "Retrieves a page of instances of `activityTransportEvent`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityTransportEvent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityTransportEvent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityTransportEvent",
                        "id": "1",
                        "attributes": {
                          "date": "2018-01-01",
                          "time": "08:00:00",
                          "type": "bus"
                        },
                        "relationships": {
                          "sportEvent": {
                            "data": {
                              "id": "3",
                              "type": "activitySportEvent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-transport-event/1"
                        }
                      },
                      {
                        "type": "activityTransportEvent",
                        "id": "1",
                        "attributes": {
                          "date": "2018-01-01",
                          "time": "08:00:00",
                          "type": "bus"
                        },
                        "relationships": {
                          "sportEvent": {
                            "data": {
                              "id": "3",
                              "type": "activitySportEvent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-transport-event/1"
                        }
                      },
                      {
                        "type": "activityTransportEvent",
                        "id": "1",
                        "attributes": {
                          "date": "2018-01-01",
                          "time": "08:00:00",
                          "type": "bus"
                        },
                        "relationships": {
                          "sportEvent": {
                            "data": {
                              "id": "3",
                              "type": "activitySportEvent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-transport-event/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-transport-event/{id}": {
    "get": {
      "operationId": "getActivityTransportEvent",
      "summary": "Get Activity Transport Event",
      "description": "Retrieves a single instance of `activityTransportEvent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityTransportEvent' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activityTransportEvent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activityTransportEvent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activityTransportEvent",
                      "id": "1",
                      "attributes": {
                        "date": "2018-01-01",
                        "time": "08:00:00",
                        "type": "bus"
                      },
                      "relationships": {
                        "sportEvent": {
                          "data": {
                            "id": "3",
                            "type": "activitySportEvent"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/activity-transport-event/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-vehicle": {
    "get": {
      "operationId": "getActivityVehicles",
      "summary": "Get Activity Vehicles",
      "description": "Retrieves a page of instances of `activityVehicle`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityVehicle' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityVehicle"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityVehicle",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "description": null,
                          "useDate": "2018-01-02",
                          "vehicleIdentifier": "GDA 1234P",
                          "capacity": 24,
                          "type": "bus"
                        },
                        "relationships": {
                          "transportEvents": {
                            "links": {
                              "related": "/v1/activities/activity-behicle/1/transport-events"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-vehicle/1"
                        }
                      },
                      {
                        "type": "activityVehicle",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "description": null,
                          "useDate": "2018-01-02",
                          "vehicleIdentifier": "GDA 1234P",
                          "capacity": 24,
                          "type": "bus"
                        },
                        "relationships": {
                          "transportEvents": {
                            "links": {
                              "related": "/v1/activities/activity-behicle/1/transport-events"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-vehicle/1"
                        }
                      },
                      {
                        "type": "activityVehicle",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "description": null,
                          "useDate": "2018-01-02",
                          "vehicleIdentifier": "GDA 1234P",
                          "capacity": 24,
                          "type": "bus"
                        },
                        "relationships": {
                          "transportEvents": {
                            "links": {
                              "related": "/v1/activities/activity-behicle/1/transport-events"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-vehicle/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity-vehicle/{id}": {
    "get": {
      "operationId": "getActivityVehicle",
      "summary": "Get Activity Vehicle",
      "description": "Retrieves a single instance of `activityVehicle`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityVehicle' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activityVehicle' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activityVehicle"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activityVehicle",
                      "id": "1",
                      "attributes": {
                        "name": null,
                        "description": null,
                        "useDate": "2018-01-02",
                        "vehicleIdentifier": "GDA 1234P",
                        "capacity": 24,
                        "type": "bus"
                      },
                      "relationships": {
                        "transportEvents": {
                          "links": {
                            "related": "/v1/activities/activity-behicle/1/transport-events"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/activity-vehicle/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity/{id}": {
    "get": {
      "operationId": "getActivity",
      "summary": "Get Activity",
      "description": "Retrieves a single instance of `activity`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activity' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: venue. [optional] [default: null] [example: \"venue\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activity' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activity"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activity",
                      "id": "1",
                      "attributes": {
                        "name": "Basketball Match",
                        "reportName": "Basketball Match Report",
                        "description": "A basketball match between two classes.",
                        "startDate": "2018-10-01",
                        "endDate": "2018-10-01",
                        "startTime": "10:00:00",
                        "endTime": "12:00:00",
                        "permissionFormDueDate": null,
                        "isRestrictedByTerm": false,
                        "isRestrictedByYear": false,
                        "showReports": false,
                        "showAttendance": false,
                        "showPortal": false,
                        "selfRegistration": false,
                        "approvalRequired": false,
                        "maximumPlaces": 128,
                        "waitingListPlaces": 30,
                        "archived": null,
                        "riskAssessment": false,
                        "registrationType": "ACTIVITY",
                        "portalDescription": "A match (remember to call parents).",
                        "availableTerms": [],
                        "availableYears": null,
                        "isActive": true
                      },
                      "relationships": {
                        "cycles": {
                          "links": {
                            "related": "/v1/activities/activity/1/cycles"
                          }
                        },
                        "instances": {
                          "links": {
                            "related": "/v1/activities/activity/1/instances"
                          }
                        },
                        "organisers": {
                          "data": [
                            {
                              "id": "1",
                              "type": "staff"
                            },
                            {
                              "id": "2",
                              "type": "staff"
                            }
                          ]
                        }
                      },
                      "links": {
                        "self": "/v1/activities/activity/1",
                        "cycles": "/v1/activities/activity/1/cycles",
                        "instances": "/v1/activities/activity/1/instances"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity/{id}/cycles": {
    "get": {
      "operationId": "getPersonActivityCycles",
      "summary": "Get Person Activity Cycles",
      "description": "Retrieves a page of the instances of ``, the relation `cycles` of `cycleInstance`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'cycleInstance' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'cycleInstance' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/cycleInstance"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "cycleInstance",
                        "id": "1",
                        "attributes": {
                          "name": "Week #7 2018",
                          "year": 2018,
                          "cycle": "Weekly",
                          "period": "Week #7"
                        },
                        "links": {
                          "self": "/v1/activities/cycle-instance/1"
                        }
                      },
                      {
                        "type": "cycleInstance",
                        "id": "1",
                        "attributes": {
                          "name": "Week #7 2018",
                          "year": 2018,
                          "cycle": "Weekly",
                          "period": "Week #7"
                        },
                        "links": {
                          "self": "/v1/activities/cycle-instance/1"
                        }
                      },
                      {
                        "type": "cycleInstance",
                        "id": "1",
                        "attributes": {
                          "name": "Week #7 2018",
                          "year": 2018,
                          "cycle": "Weekly",
                          "period": "Week #7"
                        },
                        "links": {
                          "self": "/v1/activities/cycle-instance/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity/{id}/cycles/{cycleId}/attendee-links": {
    "get": {
      "operationId": "getActivityCycleAttendeeLinks",
      "summary": "Get Activity Cycle Attendee Links",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of 'activity' to which `attendeeLinks` belong. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "cycleId",
          "required": true,
          "description": "Number ID of the 'cycleInstance' to which `attendeeLinks` belong. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'attendeeLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/attendeeLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "attendeeLink",
                        "id": "1",
                        "attributes": {
                          "attendeeType": "Family Member",
                          "showInReports": null,
                          "points": null,
                          "permissionGiven": "Unknown",
                          "paid": false,
                          "paidAmount": null
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "1",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/attendee-link/1",
                          "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                        }
                      },
                      {
                        "type": "attendeeLink",
                        "id": "1",
                        "attributes": {
                          "attendeeType": "Family Member",
                          "showInReports": null,
                          "points": null,
                          "permissionGiven": "Unknown",
                          "paid": false,
                          "paidAmount": null
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "1",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/attendee-link/1",
                          "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                        }
                      },
                      {
                        "type": "attendeeLink",
                        "id": "1",
                        "attributes": {
                          "attendeeType": "Family Member",
                          "showInReports": null,
                          "points": null,
                          "permissionGiven": "Unknown",
                          "paid": false,
                          "paidAmount": null
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "1",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/attendee-link/1",
                          "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity/{id}/instances": {
    "get": {
      "operationId": "getPersonActivityInstances",
      "summary": "Get Person Activity Instances",
      "description": "Retrieves all of the instances of ``, the relation `instances` of `activityInstance`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityInstance' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: activity. [optional] [default: null] [example: \"activity\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityInstance' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityInstance"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityInstance",
                        "id": "1",
                        "attributes": {
                          "status": "pending",
                          "year": 2018,
                          "name": "2018 - ",
                          "startDate": "2018-01-01",
                          "endDate": "2018-01-02",
                          "startTime": "12:00:00",
                          "endTime": "13:00:00",
                          "isPublishedToPortal": true,
                          "isPaymentRequired": true,
                          "isPermissionRequired": true,
                          "isActive": true
                        },
                        "relationships": {
                          "activity": {
                            "data": {
                              "id": "1",
                              "type": "activity"
                            }
                          },
                          "rolls": {
                            "links": {
                              "related": "/v1/activities/activity-instance/1/rolls"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-instance/1",
                          "rolls": "/v1/activities/activity-instance/1/rolls"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "activityInstance",
                        "id": "1",
                        "attributes": {
                          "status": "pending",
                          "year": 2018,
                          "name": "2018 - ",
                          "startDate": "2018-01-01",
                          "endDate": "2018-01-02",
                          "startTime": "12:00:00",
                          "endTime": "13:00:00",
                          "isPublishedToPortal": true,
                          "isPaymentRequired": true,
                          "isPermissionRequired": true,
                          "isActive": true
                        },
                        "relationships": {
                          "activity": {
                            "data": {
                              "id": "1",
                              "type": "activity"
                            }
                          },
                          "rolls": {
                            "links": {
                              "related": "/v1/activities/activity-instance/1/rolls"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-instance/1",
                          "rolls": "/v1/activities/activity-instance/1/rolls"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "activityInstance",
                        "id": "1",
                        "attributes": {
                          "status": "pending",
                          "year": 2018,
                          "name": "2018 - ",
                          "startDate": "2018-01-01",
                          "endDate": "2018-01-02",
                          "startTime": "12:00:00",
                          "endTime": "13:00:00",
                          "isPublishedToPortal": true,
                          "isPaymentRequired": true,
                          "isPermissionRequired": true,
                          "isActive": true
                        },
                        "relationships": {
                          "activity": {
                            "data": {
                              "id": "1",
                              "type": "activity"
                            }
                          },
                          "rolls": {
                            "links": {
                              "related": "/v1/activities/activity-instance/1/rolls"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-instance/1",
                          "rolls": "/v1/activities/activity-instance/1/rolls"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/activity/{id}/sport-events": {
    "get": {
      "operationId": "getActivityRelatedSportEvents",
      "summary": "Get Activity Related Sport Events",
      "description": "Retrieves a page of the instances of ``, the relation `sportEvents` of `activitySportEvent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activitySportEvent' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: venues, grounds, coaches, vehicles, teams. [optional] [default: null] [example: \"venues\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activitySportEvent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activitySportEvent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activitySportEvent",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "description": null,
                          "startDate": "2018-01-01",
                          "endDate": "2018-01-03",
                          "startTime": "08:00:00",
                          "endTime": "17:45:00",
                          "isWholeDay": false,
                          "placeType": "central",
                          "opposition": "",
                          "playersType": "cohort",
                          "type": "practice",
                          "isActive": true
                        },
                        "relationships": {
                          "venues": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/venues"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/grounds"
                            }
                          },
                          "coaches": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/coaches"
                            }
                          },
                          "vehicles": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/vehicle"
                            }
                          },
                          "teams": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/teams"
                            }
                          },
                          "transportEvents": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/transport-events"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-sport-event/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "activitySportEvent",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "description": null,
                          "startDate": "2018-01-01",
                          "endDate": "2018-01-03",
                          "startTime": "08:00:00",
                          "endTime": "17:45:00",
                          "isWholeDay": false,
                          "placeType": "central",
                          "opposition": "",
                          "playersType": "cohort",
                          "type": "practice",
                          "isActive": true
                        },
                        "relationships": {
                          "venues": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/venues"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/grounds"
                            }
                          },
                          "coaches": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/coaches"
                            }
                          },
                          "vehicles": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/vehicle"
                            }
                          },
                          "teams": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/teams"
                            }
                          },
                          "transportEvents": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/transport-events"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-sport-event/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "activitySportEvent",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "description": null,
                          "startDate": "2018-01-01",
                          "endDate": "2018-01-03",
                          "startTime": "08:00:00",
                          "endTime": "17:45:00",
                          "isWholeDay": false,
                          "placeType": "central",
                          "opposition": "",
                          "playersType": "cohort",
                          "type": "practice",
                          "isActive": true
                        },
                        "relationships": {
                          "venues": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/venues"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/grounds"
                            }
                          },
                          "coaches": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/coaches"
                            }
                          },
                          "vehicles": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/vehicle"
                            }
                          },
                          "teams": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/teams"
                            }
                          },
                          "transportEvents": {
                            "links": {
                              "related": "/v1/activities/activity-sport-event/1/transport-events"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity-sport-event/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/attendee-link": {
    "get": {
      "operationId": "getAttendeeLinks",
      "summary": "Get Attendee Links",
      "description": "Retrieves a page of instances of `attendeeLink`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'attendeeLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/attendeeLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "attendeeLink",
                        "id": "1",
                        "attributes": {
                          "attendeeType": "Family Member",
                          "showInReports": null,
                          "points": null,
                          "permissionGiven": "Unknown",
                          "paid": false,
                          "paidAmount": null
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "1",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/attendee-link/1",
                          "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                        }
                      },
                      {
                        "type": "attendeeLink",
                        "id": "1",
                        "attributes": {
                          "attendeeType": "Family Member",
                          "showInReports": null,
                          "points": null,
                          "permissionGiven": "Unknown",
                          "paid": false,
                          "paidAmount": null
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "1",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/attendee-link/1",
                          "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                        }
                      },
                      {
                        "type": "attendeeLink",
                        "id": "1",
                        "attributes": {
                          "attendeeType": "Family Member",
                          "showInReports": null,
                          "points": null,
                          "permissionGiven": "Unknown",
                          "paid": false,
                          "paidAmount": null
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "1",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/attendee-link/1",
                          "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/attendee-link/{id}": {
    "get": {
      "operationId": "getAttendeeLink",
      "summary": "Get Attendee Link",
      "description": "Retrieves a single instance of `attendeeLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'attendeeLink' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'attendeeLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/attendeeLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "attendeeLink",
                      "id": "1",
                      "attributes": {
                        "attendeeType": "Family Member",
                        "showInReports": null,
                        "points": null,
                        "permissionGiven": "Unknown",
                        "paid": false,
                        "paidAmount": null
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        },
                        "activityInstance": {
                          "data": {
                            "id": "1",
                            "type": "activityInstance"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/attendee-link/1",
                        "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/attendee-link/{id}/student": {
    "get": {
      "operationId": "getAttendeeLinkStudent",
      "summary": "Get Attendee Link Student",
      "description": "Retrieves a single instance of ``, the relation `student` of `student`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'student' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'student' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/student"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "student",
                      "id": "1",
                      "attributes": {
                        "studentCode": null,
                        "barcode": null,
                        "permissionToPhotograph": true,
                        "examNumber": null,
                        "usiId": null,
                        "isEligibleForDiscount": false,
                        "acaraId": null,
                        "systemStudentId": null,
                        "refId": null,
                        "ealStage": null,
                        "ealIsReceivingSupport": null,
                        "ealLastAssessmentAt": null,
                        "isSubjectToCourtOrders": false,
                        "courtOrderInformation": null,
                        "studentFirstLanguage": null,
                        "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                        "languageOtherThanEnglishSpokenAtHome": false,
                        "studentMainlySpeaksEnglishAtHome": false,
                        "loteBackground": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "primaryEnrolment": {
                          "links": {
                            "related": "/v1/enrolments/student/1/primaryEnrolment"
                          }
                        },
                        "person": {
                          "links": {
                            "related": "/v1/enrolments/student/1/person"
                          }
                        },
                        "activities": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activities"
                          }
                        },
                        "activityLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activity-links"
                          }
                        },
                        "photo": {
                          "links": {
                            "related": "/v1/enrolments/student/1/photo"
                          }
                        },
                        "documents": {
                          "links": {
                            "related": "/v1/enrolments/student/1/documents"
                          }
                        },
                        "tenants": {
                          "links": {
                            "related": "/v1/enrolments/student/1/tenants"
                          }
                        },
                        "flags": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flags"
                          }
                        },
                        "flagLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flagLinks"
                          }
                        },
                        "awards": {
                          "links": {
                            "related": "/v1/enrolments/student/1/awards"
                          }
                        },
                        "awardLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/award-links"
                          }
                        },
                        "households": {
                          "links": {
                            "related": "/v1/enrolments/student/1/households"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/student/1",
                        "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                        "person": "/v1/enrolments/student/1/person",
                        "activities": "/v1/enrolments/student/1/activities",
                        "activityLinks": "/v1/enrolments/student/1/activity-links",
                        "photo": "/v1/enrolments/student/1/photo",
                        "documents": "/v1/enrolments/student/1/documents",
                        "tenants": "/v1/enrolments/student/1/tenants",
                        "flags": "/v1/enrolments/student/1/flags",
                        "flagLinks": "/v1/enrolments/student/1/flag-links"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/attendee-links/{id}": {
    "patch": {
      "operationId": "patchAttendeeLink",
      "summary": "Patch Attendee Link",
      "description": "Modifies an existing `attendeeLink`.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`attendeeLink`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `showInReports` → Boolean Whether to display this attendee link in reports [example: TRUE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'attendeeLink' which should be modified. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "showInReports": {
                              "type": "boolean",
                              "description": "Boolean Whether to display this attendee link in reports [optional] [example: TRUE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "attendeeLink",
                    "id": 1,
                    "attributes": {
                      "showInReports": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'attendeeLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/attendeeLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "attendeeLink",
                      "id": "1",
                      "attributes": {
                        "attendeeType": "Family Member",
                        "showInReports": null,
                        "points": null,
                        "permissionGiven": "Unknown",
                        "paid": false,
                        "paidAmount": null
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        },
                        "activityInstance": {
                          "data": {
                            "id": "1",
                            "type": "activityInstance"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/attendee-link/1",
                        "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/cycle-instance": {
    "get": {
      "operationId": "getCycleInstances",
      "summary": "Get Cycle Instances",
      "description": "Retrieves a page of instances of `cycleInstance`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'cycleInstance' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/cycleInstance"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "cycleInstance",
                        "id": "1",
                        "attributes": {
                          "name": "Week #7 2018",
                          "year": 2018,
                          "cycle": "Weekly",
                          "period": "Week #7"
                        },
                        "links": {
                          "self": "/v1/activities/cycle-instance/1"
                        }
                      },
                      {
                        "type": "cycleInstance",
                        "id": "1",
                        "attributes": {
                          "name": "Week #7 2018",
                          "year": 2018,
                          "cycle": "Weekly",
                          "period": "Week #7"
                        },
                        "links": {
                          "self": "/v1/activities/cycle-instance/1"
                        }
                      },
                      {
                        "type": "cycleInstance",
                        "id": "1",
                        "attributes": {
                          "name": "Week #7 2018",
                          "year": 2018,
                          "cycle": "Weekly",
                          "period": "Week #7"
                        },
                        "links": {
                          "self": "/v1/activities/cycle-instance/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/cycle-instance/{id}": {
    "get": {
      "operationId": "getCycleInstance",
      "summary": "Get Cycle Instance",
      "description": "Retrieves a single instance of `cycleInstance`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'cycleInstance' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'cycleInstance' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/cycleInstance"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "cycleInstance",
                      "id": "1",
                      "attributes": {
                        "name": "Week #7 2018",
                        "year": 2018,
                        "cycle": "Weekly",
                        "period": "Week #7"
                      },
                      "links": {
                        "self": "/v1/activities/cycle-instance/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/roll": {
    "get": {
      "operationId": "getActivityRolls",
      "summary": "Get Activity Rolls",
      "description": "Retrieves a page of instances of `activityRoll`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activityRoll' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activityRoll"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activityRoll",
                        "id": "1",
                        "attributes": {
                          "name": "Main roll",
                          "rollDate": null,
                          "isSubmitted": null
                        },
                        "relationships": {
                          "activityInstance": {
                            "data": {
                              "id": "2",
                              "type": "activityInstance"
                            },
                            "links": {
                              "related": "/v1/activities/activity-instance/1/activity-instance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/roll/1",
                          "activityInstance": "/v1/activities/roll/1/activity-instance",
                          "uiMarkRolls": "/activities/mark_roll/1"
                        }
                      },
                      {
                        "type": "activityRoll",
                        "id": "1",
                        "attributes": {
                          "name": "Main roll",
                          "rollDate": null,
                          "isSubmitted": null
                        },
                        "relationships": {
                          "activityInstance": {
                            "data": {
                              "id": "2",
                              "type": "activityInstance"
                            },
                            "links": {
                              "related": "/v1/activities/activity-instance/1/activity-instance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/roll/1",
                          "activityInstance": "/v1/activities/roll/1/activity-instance",
                          "uiMarkRolls": "/activities/mark_roll/1"
                        }
                      },
                      {
                        "type": "activityRoll",
                        "id": "1",
                        "attributes": {
                          "name": "Main roll",
                          "rollDate": null,
                          "isSubmitted": null
                        },
                        "relationships": {
                          "activityInstance": {
                            "data": {
                              "id": "2",
                              "type": "activityInstance"
                            },
                            "links": {
                              "related": "/v1/activities/activity-instance/1/activity-instance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/roll/1",
                          "activityInstance": "/v1/activities/roll/1/activity-instance",
                          "uiMarkRolls": "/activities/mark_roll/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/roll/{id}": {
    "get": {
      "operationId": "getActivityRoll",
      "summary": "Get Activity Roll",
      "description": "Retrieves a single instance of `activityRoll`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityRoll' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activityRoll' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activityRoll"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activityRoll",
                      "id": "1",
                      "attributes": {
                        "name": "Main roll",
                        "rollDate": null,
                        "isSubmitted": null
                      },
                      "relationships": {
                        "activityInstance": {
                          "data": {
                            "id": "2",
                            "type": "activityInstance"
                          },
                          "links": {
                            "related": "/v1/activities/activity-instance/1/activity-instance"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/roll/1",
                        "activityInstance": "/v1/activities/roll/1/activity-instance",
                        "uiMarkRolls": "/activities/mark_roll/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/roll/{id}/activity-instance": {
    "get": {
      "operationId": "getActivityRollActivityInstance",
      "summary": "Get Activity Roll Activity Instance",
      "description": "Retrieves a single instance of ``, the relation `activityInstance` of `activityInstance`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityInstance' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: activity. [optional] [default: null] [example: \"activity\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activityInstance' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activityInstance"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activityInstance",
                      "id": "1",
                      "attributes": {
                        "status": "pending",
                        "year": 2018,
                        "name": "2018 - ",
                        "startDate": "2018-01-01",
                        "endDate": "2018-01-02",
                        "startTime": "12:00:00",
                        "endTime": "13:00:00",
                        "isPublishedToPortal": true,
                        "isPaymentRequired": true,
                        "isPermissionRequired": true,
                        "isActive": true
                      },
                      "relationships": {
                        "activity": {
                          "data": {
                            "id": "1",
                            "type": "activity"
                          }
                        },
                        "rolls": {
                          "links": {
                            "related": "/v1/activities/activity-instance/1/rolls"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/activity-instance/1",
                        "rolls": "/v1/activities/activity-instance/1/rolls"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/venue": {
    "get": {
      "operationId": "getVenues",
      "summary": "Get Venues",
      "description": "Retrieves a page of instances of `venue`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: grounds. [optional] [default: null] [example: \"grounds\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'venue' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/venue"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "venue",
                        "id": "1",
                        "attributes": {
                          "name": "Australian International High School",
                          "address": null,
                          "mapUrl": null
                        },
                        "relationships": {
                          "group": {
                            "data": {
                              "id": "2",
                              "type": "venueGroup"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/venue/1/grounds"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue/1"
                        }
                      },
                      {
                        "type": "venue",
                        "id": "1",
                        "attributes": {
                          "name": "Australian International High School",
                          "address": null,
                          "mapUrl": null
                        },
                        "relationships": {
                          "group": {
                            "data": {
                              "id": "2",
                              "type": "venueGroup"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/venue/1/grounds"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue/1"
                        }
                      },
                      {
                        "type": "venue",
                        "id": "1",
                        "attributes": {
                          "name": "Australian International High School",
                          "address": null,
                          "mapUrl": null
                        },
                        "relationships": {
                          "group": {
                            "data": {
                              "id": "2",
                              "type": "venueGroup"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/venue/1/grounds"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/venue-grounds": {
    "get": {
      "operationId": "getVenueGrounds",
      "summary": "Get Venue Grounds",
      "description": "Retrieves a page of instances of `venueGrounds`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'venueGrounds' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/venueGrounds"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "venueGrounds",
                        "id": "1",
                        "attributes": {
                          "name": "Footbal Stadium"
                        },
                        "relationships": {
                          "venue": {
                            "data": {
                              "id": "2",
                              "type": "venue"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue-grounds/1"
                        }
                      },
                      {
                        "type": "venueGrounds",
                        "id": "1",
                        "attributes": {
                          "name": "Footbal Stadium"
                        },
                        "relationships": {
                          "venue": {
                            "data": {
                              "id": "2",
                              "type": "venue"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue-grounds/1"
                        }
                      },
                      {
                        "type": "venueGrounds",
                        "id": "1",
                        "attributes": {
                          "name": "Footbal Stadium"
                        },
                        "relationships": {
                          "venue": {
                            "data": {
                              "id": "2",
                              "type": "venue"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue-grounds/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/venue-grounds/{id}": {
    "get": {
      "operationId": "getVenueGround",
      "summary": "Get Venue Ground",
      "description": "Retrieves a single instance of `venueGrounds`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'venueGrounds' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'venueGrounds' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/venueGrounds"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "venueGrounds",
                      "id": "1",
                      "attributes": {
                        "name": "Footbal Stadium"
                      },
                      "relationships": {
                        "venue": {
                          "data": {
                            "id": "2",
                            "type": "venue"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/venue-grounds/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/venue-group": {
    "get": {
      "operationId": "getVenueGroups",
      "summary": "Get Venue Groups",
      "description": "Retrieves a page of instances of `venueGroup`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'venueGroup' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/venueGroup"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "venueGroup",
                        "id": "1",
                        "attributes": {
                          "name": "Sport venues"
                        },
                        "relationships": {
                          "venues": {
                            "links": {
                              "related": "/v1/activities/venue-group/1/venues"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue-group/1"
                        }
                      },
                      {
                        "type": "venueGroup",
                        "id": "1",
                        "attributes": {
                          "name": "Sport venues"
                        },
                        "relationships": {
                          "venues": {
                            "links": {
                              "related": "/v1/activities/venue-group/1/venues"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue-group/1"
                        }
                      },
                      {
                        "type": "venueGroup",
                        "id": "1",
                        "attributes": {
                          "name": "Sport venues"
                        },
                        "relationships": {
                          "venues": {
                            "links": {
                              "related": "/v1/activities/venue-group/1/venues"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue-group/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/venue-group/{id}": {
    "get": {
      "operationId": "getVenueGroup",
      "summary": "Get Venue Group",
      "description": "Retrieves a single instance of `venueGroup`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'venueGroup' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'venueGroup' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/venueGroup"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "venueGroup",
                      "id": "1",
                      "attributes": {
                        "name": "Sport venues"
                      },
                      "relationships": {
                        "venues": {
                          "links": {
                            "related": "/v1/activities/venue-group/1/venues"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/venue-group/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/venue-group/{id}/venues": {
    "get": {
      "operationId": "getVenueGroupVenues",
      "summary": "Get Venue Group Venues",
      "description": "Retrieves a page of the instances of ``, the relation `venues` of `venue`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'venue' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: grounds. [optional] [default: null] [example: \"grounds\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'venue' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/venue"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "venue",
                        "id": "1",
                        "attributes": {
                          "name": "Australian International High School",
                          "address": null,
                          "mapUrl": null
                        },
                        "relationships": {
                          "group": {
                            "data": {
                              "id": "2",
                              "type": "venueGroup"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/venue/1/grounds"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue/1"
                        }
                      },
                      {
                        "type": "venue",
                        "id": "1",
                        "attributes": {
                          "name": "Australian International High School",
                          "address": null,
                          "mapUrl": null
                        },
                        "relationships": {
                          "group": {
                            "data": {
                              "id": "2",
                              "type": "venueGroup"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/venue/1/grounds"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue/1"
                        }
                      },
                      {
                        "type": "venue",
                        "id": "1",
                        "attributes": {
                          "name": "Australian International High School",
                          "address": null,
                          "mapUrl": null
                        },
                        "relationships": {
                          "group": {
                            "data": {
                              "id": "2",
                              "type": "venueGroup"
                            }
                          },
                          "grounds": {
                            "links": {
                              "related": "/v1/activities/venue/1/grounds"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/venue/{id}": {
    "get": {
      "operationId": "getVenue",
      "summary": "Get Venue",
      "description": "Retrieves a single instance of `venue`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'venue' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: grounds. [optional] [default: null] [example: \"grounds\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'venue' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/venue"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "venue",
                      "id": "1",
                      "attributes": {
                        "name": "Australian International High School",
                        "address": null,
                        "mapUrl": null
                      },
                      "relationships": {
                        "group": {
                          "data": {
                            "id": "2",
                            "type": "venueGroup"
                          }
                        },
                        "grounds": {
                          "links": {
                            "related": "/v1/activities/venue/1/grounds"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/activities/venue/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/activities/venue/{id}/grounds": {
    "get": {
      "operationId": "getVenueRelatedGrounds",
      "summary": "Get Venue Related Grounds",
      "description": "Retrieves a page of the instances of ``, the relation `grounds` of `venueGrounds`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'venueGrounds' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'venueGrounds' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/venueGrounds"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "venueGrounds",
                        "id": "1",
                        "attributes": {
                          "name": "Footbal Stadium"
                        },
                        "relationships": {
                          "venue": {
                            "data": {
                              "id": "2",
                              "type": "venue"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue-grounds/1"
                        }
                      },
                      {
                        "type": "venueGrounds",
                        "id": "1",
                        "attributes": {
                          "name": "Footbal Stadium"
                        },
                        "relationships": {
                          "venue": {
                            "data": {
                              "id": "2",
                              "type": "venue"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue-grounds/1"
                        }
                      },
                      {
                        "type": "venueGrounds",
                        "id": "1",
                        "attributes": {
                          "name": "Footbal Stadium"
                        },
                        "relationships": {
                          "venue": {
                            "data": {
                              "id": "2",
                              "type": "venue"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/venue-grounds/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/absence": {
    "post": {
      "operationId": "postAbsence",
      "summary": "Post Absence",
      "description": "Creates a new absence\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`absence`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `date` → Date (, eg. 20190102) Date of the absence [example: \"2018-08-01\"]\n   * `type` → String Type of the absence [example: \"whole\"] \nValue constraints:\nAllowed values: \"whole\", \"early\", \"timed\", \"late\"\n   * `start` → Time (H:i, eg 03:08) Start time of the absence. [optional] [example: \"8:00\"]\n   * `end` → Time (H:i, eg 03:08) End time of the absence [optional] [example: \"15:00\"]\n * Relationships\n   * `coreStudent` → [required] [single] expected type is `coreStudent`. ",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "date": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date of the absence [example: \"2018-08-01\"]"
                            },
                            "type": {
                              "type": "string",
                              "description": "String Type of the absence [example: \"whole\"] \nValue constraints:\nAllowed values: \"whole\", \"early\", \"timed\", \"late\""
                            },
                            "start": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) Start time of the absence. [optional] [example: \"8:00\"]"
                            },
                            "end": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) End time of the absence [optional] [example: \"15:00\"]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "coreStudent": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "absence",
                    "attributes": {
                      "date": "2018-08-01",
                      "type": "whole",
                      "start": "8:00",
                      "end": "15:00"
                    },
                    "relationships": {
                      "coreStudent": {
                        "data": {
                          "id": 1,
                          "type": "coreStudent"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'absence' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/absence"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "absence",
                      "id": "1",
                      "attributes": {
                        "type": "timed",
                        "date": "2018-10-01",
                        "start": null,
                        "end": null,
                        "comment": "",
                        "explainer": "",
                        "explainerSource": "",
                        "letterSent": false,
                        "submitted": false
                      },
                      "relationships": {
                        "enrolmentStudent": {
                          "data": {
                            "id": "3",
                            "type": "student"
                          }
                        },
                        "coreStudent": {
                          "data": {
                            "id": "2",
                            "type": "coreStudent"
                          }
                        },
                        "matchingFutureAbsence": {
                          "data": {
                            "id": "4",
                            "type": "futureAbsence"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/attendance/absence/1",
                        "student": "/v1/enrolments/student/3"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getAbsences",
      "summary": "Get Absences",
      "description": "Retrieves a page of instances of `absence`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 366 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "studentId",
          "required": false,
          "description": "String Comma-separated list of `enrolmentStudent` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "year",
          "required": false,
          "description": "String Comma-separated list of years from which absences to return (matches the year of the `date` attribute). [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "coreStudentIds",
          "required": false,
          "description": "String Comma-separated list of `coreStudent` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "dates",
          "required": false,
          "description": "String Comma-separated list of `date` values to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'absence' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/absence"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "absence",
                        "id": "1",
                        "attributes": {
                          "type": "timed",
                          "date": "2018-10-01",
                          "start": null,
                          "end": null,
                          "comment": "",
                          "explainer": "",
                          "explainerSource": "",
                          "letterSent": false,
                          "submitted": false
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "3",
                              "type": "student"
                            }
                          },
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          },
                          "matchingFutureAbsence": {
                            "data": {
                              "id": "4",
                              "type": "futureAbsence"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/attendance/absence/1",
                          "student": "/v1/enrolments/student/3"
                        }
                      },
                      {
                        "type": "absence",
                        "id": "1",
                        "attributes": {
                          "type": "timed",
                          "date": "2018-10-01",
                          "start": null,
                          "end": null,
                          "comment": "",
                          "explainer": "",
                          "explainerSource": "",
                          "letterSent": false,
                          "submitted": false
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "3",
                              "type": "student"
                            }
                          },
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          },
                          "matchingFutureAbsence": {
                            "data": {
                              "id": "4",
                              "type": "futureAbsence"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/attendance/absence/1",
                          "student": "/v1/enrolments/student/3"
                        }
                      },
                      {
                        "type": "absence",
                        "id": "1",
                        "attributes": {
                          "type": "timed",
                          "date": "2018-10-01",
                          "start": null,
                          "end": null,
                          "comment": "",
                          "explainer": "",
                          "explainerSource": "",
                          "letterSent": false,
                          "submitted": false
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "3",
                              "type": "student"
                            }
                          },
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          },
                          "matchingFutureAbsence": {
                            "data": {
                              "id": "4",
                              "type": "futureAbsence"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/attendance/absence/1",
                          "student": "/v1/enrolments/student/3"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/absence-reason": {
    "get": {
      "operationId": "getAbsenceReasons",
      "summary": "Get Absence Reasons",
      "description": "Retrieves a page of instances of `absenceReason`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'absenceReason' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/absenceReason"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "absenceReason",
                        "id": "1",
                        "attributes": {
                          "description": "Work shift",
                          "shorthand": "Ws",
                          "internalCode": "workshift",
                          "isExplained": true,
                          "isLegal": true,
                          "isDefault": false,
                          "isRestricted": false
                        },
                        "links": {
                          "self": "/v1/attendance/absence-reason/1"
                        }
                      },
                      {
                        "type": "absenceReason",
                        "id": "1",
                        "attributes": {
                          "description": "Work shift",
                          "shorthand": "Ws",
                          "internalCode": "workshift",
                          "isExplained": true,
                          "isLegal": true,
                          "isDefault": false,
                          "isRestricted": false
                        },
                        "links": {
                          "self": "/v1/attendance/absence-reason/1"
                        }
                      },
                      {
                        "type": "absenceReason",
                        "id": "1",
                        "attributes": {
                          "description": "Work shift",
                          "shorthand": "Ws",
                          "internalCode": "workshift",
                          "isExplained": true,
                          "isLegal": true,
                          "isDefault": false,
                          "isRestricted": false
                        },
                        "links": {
                          "self": "/v1/attendance/absence-reason/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/absence-reason/{id}": {
    "get": {
      "operationId": "getAbsenceReason",
      "summary": "Get Absence Reason",
      "description": "Retrieves a single instance of `absenceReason`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'absenceReason' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'absenceReason' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/absenceReason"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "absenceReason",
                      "id": "1",
                      "attributes": {
                        "description": "Work shift",
                        "shorthand": "Ws",
                        "internalCode": "workshift",
                        "isExplained": true,
                        "isLegal": true,
                        "isDefault": false,
                        "isRestricted": false
                      },
                      "links": {
                        "self": "/v1/attendance/absence-reason/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/absence/{id}": {
    "get": {
      "operationId": "getAbsence",
      "summary": "Get Absence",
      "description": "Retrieves a single instance of `absence`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'absence' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'absence' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/absence"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "absence",
                      "id": "1",
                      "attributes": {
                        "type": "timed",
                        "date": "2018-10-01",
                        "start": null,
                        "end": null,
                        "comment": "",
                        "explainer": "",
                        "explainerSource": "",
                        "letterSent": false,
                        "submitted": false
                      },
                      "relationships": {
                        "enrolmentStudent": {
                          "data": {
                            "id": "3",
                            "type": "student"
                          }
                        },
                        "coreStudent": {
                          "data": {
                            "id": "2",
                            "type": "coreStudent"
                          }
                        },
                        "matchingFutureAbsence": {
                          "data": {
                            "id": "4",
                            "type": "futureAbsence"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/attendance/absence/1",
                        "student": "/v1/enrolments/student/3"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteAbsence",
      "summary": "Delete Absence",
      "description": "Removes existing 'absence'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'absence' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response with only metadata.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "description": "Meta fields",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "[Not-null] Always true when operation is successful",
                        "nullable": false
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/absence/{id}/relationships/response/{messageId}": {
    "delete": {
      "operationId": "deleteAbsenceRelationshipToResponse",
      "summary": "Delete Absence Relationship To Response",
      "description": "Removes a link between an 'absence' and 'incomingMessage' which form a response to former from a guardian.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of 'absence' of which response should be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "messageId",
          "required": true,
          "description": "Number ID of the 'incomingMessage' belonging to the 'absence' to which link should be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/attendance/absence/{id}/response": {
    "post": {
      "operationId": "postAbsenceResponse",
      "summary": "Post Absence Response",
      "description": "Adds a response to an absence by creating a new outgoing message in the system and linking it through to the absence.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`incomingMessage`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `message` → String The message that was sent that contains the explanation for absence. [example: \"\"] \nValue constraints:\nLength must be at least 1 characters, inclusive\n   * `type` → String Type of the message delivery mechanism. [example: \"sms\"] \nValue constraints:\nAllowed values: \"sms\", \"email\", \"phone\", \"letter\", \"portal\"\n   * `isUnsolicited` → Boolean Whether the message was unsolicited. [example: FALSE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `absence` to which a new response should be added. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "message": {
                              "type": "string",
                              "description": "String The message that was sent that contains the explanation for absence. [example: \"\"] \nValue constraints:\nLength must be at least 1 characters, inclusive"
                            },
                            "type": {
                              "type": "string",
                              "description": "String Type of the message delivery mechanism. [example: \"sms\"] \nValue constraints:\nAllowed values: \"sms\", \"email\", \"phone\", \"letter\", \"portal\""
                            },
                            "isUnsolicited": {
                              "type": "boolean",
                              "description": "Boolean Whether the message was unsolicited. [example: FALSE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "incomingMessage",
                    "attributes": {
                      "message": "",
                      "type": "sms",
                      "isUnsolicited": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'incomingMessage' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/incomingMessage"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "incomingMessage",
                      "id": "1",
                      "attributes": {
                        "type": "portal",
                        "message": "Hi! This is an example message!",
                        "isUnsolicited": false
                      },
                      "links": {
                        "self": "/v1/messaging/incoming-message/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/absence/{id}/responses": {
    "get": {
      "operationId": "getAbsenceResponses",
      "summary": "Get Absence Responses",
      "description": "Retrieves all of the instances of ``, the relation `responses` of `incomingMessage`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'incomingMessage' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'incomingMessage' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/incomingMessage"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "incomingMessage",
                        "id": "1",
                        "attributes": {
                          "type": "portal",
                          "message": "Hi! This is an example message!",
                          "isUnsolicited": false
                        },
                        "links": {
                          "self": "/v1/messaging/incoming-message/1"
                        }
                      },
                      {
                        "type": "incomingMessage",
                        "id": "1",
                        "attributes": {
                          "type": "portal",
                          "message": "Hi! This is an example message!",
                          "isUnsolicited": false
                        },
                        "links": {
                          "self": "/v1/messaging/incoming-message/1"
                        }
                      },
                      {
                        "type": "incomingMessage",
                        "id": "1",
                        "attributes": {
                          "type": "portal",
                          "message": "Hi! This is an example message!",
                          "isUnsolicited": false
                        },
                        "links": {
                          "self": "/v1/messaging/incoming-message/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/attendance": {
    "get": {
      "operationId": "getAttendances",
      "summary": "Get Attendances",
      "description": "Retrieves a page of instances of `attendance`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 366 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "studentId",
          "required": false,
          "description": "Number ID of the student whose attendances should be returned. [optional] [default: null]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "year",
          "required": false,
          "description": "Number Year from which attendances should be returned. [optional] [default: null] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'attendance' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/attendance"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "attendance",
                        "id": "1",
                        "attributes": {
                          "date": "2018-10-01",
                          "schoolTime": null,
                          "source": "WEBATTEND"
                        },
                        "links": {
                          "self": "/v1/attendance/attendance/1",
                          "student": "/v1/enrolments/student/1"
                        }
                      },
                      {
                        "type": "attendance",
                        "id": "1",
                        "attributes": {
                          "date": "2018-10-01",
                          "schoolTime": null,
                          "source": "WEBATTEND"
                        },
                        "links": {
                          "self": "/v1/attendance/attendance/1",
                          "student": "/v1/enrolments/student/1"
                        }
                      },
                      {
                        "type": "attendance",
                        "id": "1",
                        "attributes": {
                          "date": "2018-10-01",
                          "schoolTime": null,
                          "source": "WEBATTEND"
                        },
                        "links": {
                          "self": "/v1/attendance/attendance/1",
                          "student": "/v1/enrolments/student/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/attendance/{id}": {
    "get": {
      "operationId": "getAttendance",
      "summary": "Get Attendance",
      "description": "Retrieves a single instance of `attendance`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'attendance' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'attendance' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/attendance"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "attendance",
                      "id": "1",
                      "attributes": {
                        "date": "2018-10-01",
                        "schoolTime": null,
                        "source": "WEBATTEND"
                      },
                      "links": {
                        "self": "/v1/attendance/attendance/1",
                        "student": "/v1/enrolments/student/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/core-day-roll": {
    "post": {
      "operationId": "submitCoreDayRoll",
      "summary": "Submit Core Day Roll",
      "description": "Submits a coreDayRoll, which closes off a roll for the given class for the given date\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`coreDayRoll`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `date` → Date (, eg. 20190102) Date for which to submit the roll. Must be a school day. [example: \"2019-02-27\"]\n * Relationships\n   * `coreRollclass` → [required] [single] expected type is `coreRollclass`. Rollclass for which to submit the roll\n   * `submitter` → [required] [single] expected type is `coreAdministrativeUser`. User who submitted the roll",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "date": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date for which to submit the roll. Must be a school day. [example: \"2019-02-27\"]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "coreRollclass": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "submitter": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "coreDayRoll",
                    "attributes": {
                      "date": "2019-02-27"
                    },
                    "relationships": {
                      "coreRollclass": {
                        "data": {
                          "id": 1,
                          "type": "coreRollclass"
                        }
                      },
                      "submitter": {
                        "data": {
                          "id": 1,
                          "type": "coreAdministrativeUser"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'coreDayRoll' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/coreDayRoll"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "coreDayRoll",
                      "id": "1",
                      "attributes": {
                        "date": "2018-06-01",
                        "submittedAt": null
                      },
                      "links": {
                        "self": "/v1/attendance/core-day-roll/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getCoreDayRolls",
      "summary": "Get Core Day Rolls",
      "description": "Retrieves a page of instances of `coreDayRoll`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: absences. [optional] [default: null] [example: \"absences\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 3660 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "coreRollclassIds",
          "required": false,
          "description": "String Comma-separated list of `coreRollclass` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "years",
          "required": false,
          "description": "String Comma-separated list of years in `date` attribute to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreDayRoll' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreDayRoll"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreDayRoll",
                        "id": "1",
                        "attributes": {
                          "date": "2018-06-01",
                          "submittedAt": null
                        },
                        "links": {
                          "self": "/v1/attendance/core-day-roll/1"
                        }
                      },
                      {
                        "type": "coreDayRoll",
                        "id": "1",
                        "attributes": {
                          "date": "2018-06-01",
                          "submittedAt": null
                        },
                        "links": {
                          "self": "/v1/attendance/core-day-roll/1"
                        }
                      },
                      {
                        "type": "coreDayRoll",
                        "id": "1",
                        "attributes": {
                          "date": "2018-06-01",
                          "submittedAt": null
                        },
                        "links": {
                          "self": "/v1/attendance/core-day-roll/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/core-day-roll/{id}": {
    "get": {
      "operationId": "getCoreDayRoll",
      "summary": "Get Core Day Roll",
      "description": "Retrieves a single instance of `coreDayRoll`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreDayRoll' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: absences. [optional] [default: null] [example: \"absences\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'coreDayRoll' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/coreDayRoll"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "coreDayRoll",
                      "id": "1",
                      "attributes": {
                        "date": "2018-06-01",
                        "submittedAt": null
                      },
                      "links": {
                        "self": "/v1/attendance/core-day-roll/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/day-roll": {
    "get": {
      "operationId": "getRolls",
      "summary": "Get Rolls",
      "description": "Retrieves a page of instances of `dayRoll`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "year",
          "required": false,
          "description": "Number Academic Year from which rolls should be returned. [optional] [default: Defaults to current year if not provided.]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "term",
          "required": false,
          "description": "Number Term whose rolls should be returned. [optional] [default: null] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "week",
          "required": false,
          "description": "Number Term week whose rolls should be returned. [optional] [default: null] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "rollclassId",
          "required": false,
          "description": "Number ID of enrolment rollclass by which to filter [optional] [default: null] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "date",
          "required": false,
          "description": "Number If provided it will return only rolls that happen in the week of this date. If no other date filter is provided this is set to current server date. [optional] [default: Current date] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "coreRollclassIds",
          "required": false,
          "description": "String Comma-separated list of `coreRollclass` IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'dayRoll' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/dayRoll"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "dayRoll",
                        "id": "2-20180601",
                        "attributes": {
                          "date": "2018-06-01",
                          "submitted": false,
                          "rollMarkingUrl": "https://www.example.com/TENANT/attendance/roll/2/term1/week3"
                        },
                        "links": {
                          "self": "/v1/attendance/day-roll/2-20180601",
                          "rollClass": "/v1/enrolments/rollclass/2"
                        }
                      },
                      {
                        "type": "dayRoll",
                        "id": "2-20180601",
                        "attributes": {
                          "date": "2018-06-01",
                          "submitted": false,
                          "rollMarkingUrl": "https://www.example.com/TENANT/attendance/roll/2/term1/week3"
                        },
                        "links": {
                          "self": "/v1/attendance/day-roll/2-20180601",
                          "rollClass": "/v1/enrolments/rollclass/2"
                        }
                      },
                      {
                        "type": "dayRoll",
                        "id": "2-20180601",
                        "attributes": {
                          "date": "2018-06-01",
                          "submitted": false,
                          "rollMarkingUrl": "https://www.example.com/TENANT/attendance/roll/2/term1/week3"
                        },
                        "links": {
                          "self": "/v1/attendance/day-roll/2-20180601",
                          "rollClass": "/v1/enrolments/rollclass/2"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/day-roll/{id}": {
    "get": {
      "operationId": "getRoll",
      "summary": "Get Roll",
      "description": "Retrieves a single instance of `dayRoll`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String `id` of roll to retrieve which is a compound of `rollclass` ID and date in `Ymd` format separated by a dash. [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'dayRoll' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/dayRoll"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "dayRoll",
                      "id": "2-20180601",
                      "attributes": {
                        "date": "2018-06-01",
                        "submitted": false,
                        "rollMarkingUrl": "https://www.example.com/TENANT/attendance/roll/2/term1/week3"
                      },
                      "links": {
                        "self": "/v1/attendance/day-roll/2-20180601",
                        "rollClass": "/v1/enrolments/rollclass/2"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/future-absence": {
    "post": {
      "operationId": "postFutureAbsence",
      "summary": "Post Future Absence",
      "description": "Creates a new future absence\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`futureAbsence`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `startDate` → Date (, eg. 20190102) The start date of the planned absence. Must be the same date or earlier than `endDate`. [example: \"2018-08-01\"] \nValue constraints:\nMimimum value: yesterday [inclusive]\n   * `endDate` → Date (, eg. 20190102) The end date of the planned absence. Must be the same date or later than `startDate`. [example: \"2018-08-08\"] \nValue constraints:\nMimimum value: today [inclusive]\n   * `startTime` → Time (H:i, eg 03:08) Start time of the planned absence. Will be ignored if the `futureAbsence's` type is either 'whole' or 'early'. Can't be earlier than school start time for the given student and date. [example: \"8:00\"]\n   * `endTime` → Time (H:i, eg 03:08) End time of the planned absence. Will be ignored if the `futureAbsence's` type is either 'whole' or 'late'. Can't be later than school end time for the given student and date. [example: \"15:00\"]\n   * `type` → String Time-span category of the absence. `whole` means the absence covers fully every day in the specified date range, and will ignore the provided values for `startTime` and `endTime`, setting them to the school start/end time for the respective days for the student. `late` means that on the last day of the absence the student will be in the school after it starts; it will ignore the provided value for `startTime`, setting it to the school start time of the last day of the absence. `early` means that on the first day of the absence the student will be in the school but will leave earlier than normal; it will ignore the provided value for `endTime`, setting it to the school end time of the first day of the absence. `timed` means the student will be in the school both on the first and last day of the absence, but will leave early and return late. [example: \"whole\"] \nValue constraints:\nAllowed values: \"whole\", \"early\", \"timed\", \"late\"\n   * `category` → String Category of the absence. [example: \"medical\"] \nValue constraints:\nAllowed values: \"holiday\", \"observance\", \"medical\", \"sport\", \"other\"\n   * `comment` → String A comment from the submiter [example: \"Minor cosmetic surgery\"]\n * Relationships\n   * `student` → [required] [single] expected type is `student`. \n   * `reason` → [optional] [single] expected type is `absenceReason`. ",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "startDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) The start date of the planned absence. Must be the same date or earlier than `endDate`. [example: \"2018-08-01\"] \nValue constraints:\nMimimum value: yesterday [inclusive]"
                            },
                            "endDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) The end date of the planned absence. Must be the same date or later than `startDate`. [example: \"2018-08-08\"] \nValue constraints:\nMimimum value: today [inclusive]"
                            },
                            "startTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) Start time of the planned absence. Will be ignored if the `futureAbsence's` type is either 'whole' or 'early'. Can't be earlier than school start time for the given student and date. [optional] [example: \"8:00\"]"
                            },
                            "endTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) End time of the planned absence. Will be ignored if the `futureAbsence's` type is either 'whole' or 'late'. Can't be later than school end time for the given student and date. [optional] [example: \"15:00\"]"
                            },
                            "type": {
                              "type": "string",
                              "description": "String Time-span category of the absence. `whole` means the absence covers fully every day in the specified date range, and will ignore the provided values for `startTime` and `endTime`, setting them to the school start/end time for the respective days for the student. `late` means that on the last day of the absence the student will be in the school after it starts; it will ignore the provided value for `startTime`, setting it to the school start time of the last day of the absence. `early` means that on the first day of the absence the student will be in the school but will leave earlier than normal; it will ignore the provided value for `endTime`, setting it to the school end time of the first day of the absence. `timed` means the student will be in the school both on the first and last day of the absence, but will leave early and return late. [optional] [example: \"whole\"] \nValue constraints:\nAllowed values: \"whole\", \"early\", \"timed\", \"late\""
                            },
                            "category": {
                              "type": "string",
                              "description": "String Category of the absence. [example: \"medical\"] \nValue constraints:\nAllowed values: \"holiday\", \"observance\", \"medical\", \"sport\", \"other\""
                            },
                            "comment": {
                              "type": "string",
                              "description": "String A comment from the submiter [example: \"Minor cosmetic surgery\"]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "student": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "reason": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "futureAbsence",
                    "attributes": {
                      "startDate": "2018-08-01",
                      "endDate": "2018-08-08",
                      "startTime": "8:00",
                      "endTime": "15:00",
                      "type": "whole",
                      "category": "medical",
                      "comment": "Minor cosmetic surgery"
                    },
                    "relationships": {
                      "student": {
                        "data": {
                          "id": 1,
                          "type": "student"
                        }
                      },
                      "reason": {
                        "data": {
                          "id": 1,
                          "type": "absenceReason"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'futureAbsence' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/futureAbsence"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "futureAbsence",
                      "id": "1",
                      "attributes": {
                        "type": "whole",
                        "startDate": "2018-11-01",
                        "endDate": "2018-11-02",
                        "startTime": null,
                        "endTime": null,
                        "comment": "Family vacation",
                        "category": "holiday",
                        "status": "PENDING"
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "3",
                            "type": "student"
                          }
                        },
                        "matchingAbsence": {
                          "data": [
                            {
                              "id": "4",
                              "type": "absence"
                            },
                            {
                              "id": "5",
                              "type": "absence"
                            },
                            {
                              "id": "6",
                              "type": "absence"
                            }
                          ]
                        }
                      },
                      "links": {
                        "self": "/v1/attendance/absence/1",
                        "student": "/v1/enrolments/student/3"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getFutureAbsences",
      "summary": "Get Future Absences",
      "description": "Retrieves a page of instances of `futureAbsence`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "studentId",
          "required": false,
          "description": "Number ID of the student whose future absences should be returned. [optional] [default: null]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'futureAbsence' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/futureAbsence"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "futureAbsence",
                        "id": "1",
                        "attributes": {
                          "type": "whole",
                          "startDate": "2018-11-01",
                          "endDate": "2018-11-02",
                          "startTime": null,
                          "endTime": null,
                          "comment": "Family vacation",
                          "category": "holiday",
                          "status": "PENDING"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "3",
                              "type": "student"
                            }
                          },
                          "matchingAbsence": {
                            "data": [
                              {
                                "id": "4",
                                "type": "absence"
                              },
                              {
                                "id": "5",
                                "type": "absence"
                              },
                              {
                                "id": "6",
                                "type": "absence"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "/v1/attendance/absence/1",
                          "student": "/v1/enrolments/student/3"
                        }
                      },
                      {
                        "type": "futureAbsence",
                        "id": "1",
                        "attributes": {
                          "type": "whole",
                          "startDate": "2018-11-01",
                          "endDate": "2018-11-02",
                          "startTime": null,
                          "endTime": null,
                          "comment": "Family vacation",
                          "category": "holiday",
                          "status": "PENDING"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "3",
                              "type": "student"
                            }
                          },
                          "matchingAbsence": {
                            "data": [
                              {
                                "id": "4",
                                "type": "absence"
                              },
                              {
                                "id": "5",
                                "type": "absence"
                              },
                              {
                                "id": "6",
                                "type": "absence"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "/v1/attendance/absence/1",
                          "student": "/v1/enrolments/student/3"
                        }
                      },
                      {
                        "type": "futureAbsence",
                        "id": "1",
                        "attributes": {
                          "type": "whole",
                          "startDate": "2018-11-01",
                          "endDate": "2018-11-02",
                          "startTime": null,
                          "endTime": null,
                          "comment": "Family vacation",
                          "category": "holiday",
                          "status": "PENDING"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "3",
                              "type": "student"
                            }
                          },
                          "matchingAbsence": {
                            "data": [
                              {
                                "id": "4",
                                "type": "absence"
                              },
                              {
                                "id": "5",
                                "type": "absence"
                              },
                              {
                                "id": "6",
                                "type": "absence"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "/v1/attendance/absence/1",
                          "student": "/v1/enrolments/student/3"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/future-absence/{id}": {
    "get": {
      "operationId": "getFutureAbsence",
      "summary": "Get Future Absence",
      "description": "Retrieves a single instance of `futureAbsence`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'futureAbsence' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'futureAbsence' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/futureAbsence"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "futureAbsence",
                      "id": "1",
                      "attributes": {
                        "type": "whole",
                        "startDate": "2018-11-01",
                        "endDate": "2018-11-02",
                        "startTime": null,
                        "endTime": null,
                        "comment": "Family vacation",
                        "category": "holiday",
                        "status": "PENDING"
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "3",
                            "type": "student"
                          }
                        },
                        "matchingAbsence": {
                          "data": [
                            {
                              "id": "4",
                              "type": "absence"
                            },
                            {
                              "id": "5",
                              "type": "absence"
                            },
                            {
                              "id": "6",
                              "type": "absence"
                            }
                          ]
                        }
                      },
                      "links": {
                        "self": "/v1/attendance/absence/1",
                        "student": "/v1/enrolments/student/3"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchFutureAbsence",
      "summary": "Patch Future Absence",
      "description": "Updates an existing absence\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`futureAbsence`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `startDate` → Date (, eg. 20190102) The start date of the planned absence. Must be the same date or earlier than `endDate`. [example: \"2018-08-01\"] \nValue constraints:\nMimimum value: yesterday [inclusive]\n   * `endDate` → Date (, eg. 20190102) The end date of the planned absence. Must be the same date or later than `startDate`. [example: \"2018-08-08\"] \nValue constraints:\nMimimum value: today [inclusive]\n   * `startTime` → Time (H:i, eg 03:08) Start time of the planned absence. Will be ignored if the `futureAbsence's` type is either 'whole' or 'early'. Can't be earlier than school start time for the given student and date. [example: \"8:00\"]\n   * `endTime` → Time (H:i, eg 03:08) End time of the planned absence. Will be ignored if the `futureAbsence's` type is either 'whole' or 'late'. Can't be later than school end time for the given student and date. [example: \"15:00\"]\n   * `type` → String Time-span category of the absence. `whole` means the absence covers fully every day in the specified date range, and will ignore the provided values for `startTime` and `endTime`, setting them to the school start/end time for the respective days for the student. `late` means that on the last day of the absence the student will be in the school after it starts; it will ignore the provided value for `startTime`, setting it to the school start time of the last day of the absence. `early` means that on the first day of the absence the student will be in the school but will leave earlier than normal; it will ignore the provided value for `endTime`, setting it to the school end time of the first day of the absence. `timed` means the student will be in the school both on the first and last day of the absence, but will leave early and return late. [example: \"whole\"] \nValue constraints:\nAllowed values: \"whole\", \"early\", \"timed\", \"late\"\n   * `category` → String Category of the absence. [example: \"medical\"] \nValue constraints:\nAllowed values: \"holiday\", \"observance\", \"medical\", \"sport\", \"other\"\n   * `comment` → String A comment from the submiter [example: \"Minor cosmetic surgery\"]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `futureAbsence` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "startDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) The start date of the planned absence. Must be the same date or earlier than `endDate`. [optional] [example: \"2018-08-01\"] \nValue constraints:\nMimimum value: yesterday [inclusive]"
                            },
                            "endDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) The end date of the planned absence. Must be the same date or later than `startDate`. [optional] [example: \"2018-08-08\"] \nValue constraints:\nMimimum value: today [inclusive]"
                            },
                            "startTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) Start time of the planned absence. Will be ignored if the `futureAbsence's` type is either 'whole' or 'early'. Can't be earlier than school start time for the given student and date. [optional] [example: \"8:00\"]"
                            },
                            "endTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) End time of the planned absence. Will be ignored if the `futureAbsence's` type is either 'whole' or 'late'. Can't be later than school end time for the given student and date. [optional] [example: \"15:00\"]"
                            },
                            "type": {
                              "type": "string",
                              "description": "String Time-span category of the absence. `whole` means the absence covers fully every day in the specified date range, and will ignore the provided values for `startTime` and `endTime`, setting them to the school start/end time for the respective days for the student. `late` means that on the last day of the absence the student will be in the school after it starts; it will ignore the provided value for `startTime`, setting it to the school start time of the last day of the absence. `early` means that on the first day of the absence the student will be in the school but will leave earlier than normal; it will ignore the provided value for `endTime`, setting it to the school end time of the first day of the absence. `timed` means the student will be in the school both on the first and last day of the absence, but will leave early and return late. [optional] [example: \"whole\"] \nValue constraints:\nAllowed values: \"whole\", \"early\", \"timed\", \"late\""
                            },
                            "category": {
                              "type": "string",
                              "description": "String Category of the absence. [optional] [example: \"medical\"] \nValue constraints:\nAllowed values: \"holiday\", \"observance\", \"medical\", \"sport\", \"other\""
                            },
                            "comment": {
                              "type": "string",
                              "description": "String A comment from the submiter [optional] [example: \"Minor cosmetic surgery\"]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "futureAbsence",
                    "id": 1,
                    "attributes": {
                      "startDate": "2018-08-01",
                      "endDate": "2018-08-08",
                      "startTime": "8:00",
                      "endTime": "15:00",
                      "type": "whole",
                      "category": "medical",
                      "comment": "Minor cosmetic surgery"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'futureAbsence' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/futureAbsence"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "futureAbsence",
                      "id": "1",
                      "attributes": {
                        "type": "whole",
                        "startDate": "2018-11-01",
                        "endDate": "2018-11-02",
                        "startTime": null,
                        "endTime": null,
                        "comment": "Family vacation",
                        "category": "holiday",
                        "status": "PENDING"
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "3",
                            "type": "student"
                          }
                        },
                        "matchingAbsence": {
                          "data": [
                            {
                              "id": "4",
                              "type": "absence"
                            },
                            {
                              "id": "5",
                              "type": "absence"
                            },
                            {
                              "id": "6",
                              "type": "absence"
                            }
                          ]
                        }
                      },
                      "links": {
                        "self": "/v1/attendance/absence/1",
                        "student": "/v1/enrolments/student/3"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteFutureAbsence",
      "summary": "Delete Future Absence",
      "description": "Removes existing 'futureAbsence'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `futureAbsence` that should be deleted. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/attendance/period-roll": {
    "get": {
      "operationId": "getPeriodRolls",
      "summary": "Get Period Rolls",
      "description": "Retrieves a page of instances of `periodRoll`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "date",
          "required": false,
          "description": "Date (Y-m-d, eg. 20190102) Filters by the date field [optional] [default: null] [example: \"2018-01-01\"]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "period",
          "required": false,
          "description": "Number Filters by the period filed [optional] [default: null] [example: \"3\"]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "rollclassId",
          "required": false,
          "description": "Number Filters by the rollclass to which this periodRoll belongs [optional] [default: null] [example: \"7\"]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'periodRoll' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/periodRoll"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "periodRoll",
                        "id": "2--20180401",
                        "attributes": {
                          "date": "2018-04-01",
                          "period": null,
                          "periodName": null,
                          "classTime": null,
                          "isSubmitted": false,
                          "startTime": null,
                          "endTime": null,
                          "rollMarkingUrl": "https://www.example.com/TENANT/attendance/period/roll/2/term1/week3"
                        },
                        "links": {
                          "self": "/v1/attendance/period-roll/2--20180401",
                          "rollClass": "/v1/enrolments/rollclass/2"
                        }
                      },
                      {
                        "type": "periodRoll",
                        "id": "2--20180401",
                        "attributes": {
                          "date": "2018-04-01",
                          "period": null,
                          "periodName": null,
                          "classTime": null,
                          "isSubmitted": false,
                          "startTime": null,
                          "endTime": null,
                          "rollMarkingUrl": "https://www.example.com/TENANT/attendance/period/roll/2/term1/week3"
                        },
                        "links": {
                          "self": "/v1/attendance/period-roll/2--20180401",
                          "rollClass": "/v1/enrolments/rollclass/2"
                        }
                      },
                      {
                        "type": "periodRoll",
                        "id": "2--20180401",
                        "attributes": {
                          "date": "2018-04-01",
                          "period": null,
                          "periodName": null,
                          "classTime": null,
                          "isSubmitted": false,
                          "startTime": null,
                          "endTime": null,
                          "rollMarkingUrl": "https://www.example.com/TENANT/attendance/period/roll/2/term1/week3"
                        },
                        "links": {
                          "self": "/v1/attendance/period-roll/2--20180401",
                          "rollClass": "/v1/enrolments/rollclass/2"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/attendance/period-roll/{id}": {
    "get": {
      "operationId": "getPeriodRoll",
      "summary": "Get Period Roll",
      "description": "Retrieves a single instance of `periodRoll`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String ID of the 'periodRoll' to retrieve [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'periodRoll' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/periodRoll"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "periodRoll",
                      "id": "2--20180401",
                      "attributes": {
                        "date": "2018-04-01",
                        "period": null,
                        "periodName": null,
                        "classTime": null,
                        "isSubmitted": false,
                        "startTime": null,
                        "endTime": null,
                        "rollMarkingUrl": "https://www.example.com/TENANT/attendance/period/roll/2/term1/week3"
                      },
                      "links": {
                        "self": "/v1/attendance/period-roll/2--20180401",
                        "rollClass": "/v1/enrolments/rollclass/2"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-administrative-user": {
    "get": {
      "operationId": "getCoreAdministrativeUsers",
      "summary": "Get Core Administrative Users",
      "description": "Retrieves a page of instances of `coreAdministrativeUser`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "administrativeUserIds",
          "required": false,
          "description": "String Comma-separated list of `administratieUser` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreAdministrativeUser' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreAdministrativeUser"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreAdministrativeUser",
                        "id": "1",
                        "attributes": {
                          "username": "admin",
                          "title": "Ms",
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "email": "jane.doe@example.com",
                          "provider": "au.com.sentral.enterprise",
                          "providerId": "7a7bcf7ac7dd2009",
                          "externalId": "EXT-ID-0001",
                          "externalSource": "SIS",
                          "createdAt": "2019-01-01"
                        },
                        "links": {
                          "self": "/v1/core/core-administrative-user/1"
                        }
                      },
                      {
                        "type": "coreAdministrativeUser",
                        "id": "1",
                        "attributes": {
                          "username": "admin",
                          "title": "Ms",
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "email": "jane.doe@example.com",
                          "provider": "au.com.sentral.enterprise",
                          "providerId": "7a7bcf7ac7dd2009",
                          "externalId": "EXT-ID-0001",
                          "externalSource": "SIS",
                          "createdAt": "2019-01-01"
                        },
                        "links": {
                          "self": "/v1/core/core-administrative-user/1"
                        }
                      },
                      {
                        "type": "coreAdministrativeUser",
                        "id": "1",
                        "attributes": {
                          "username": "admin",
                          "title": "Ms",
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "email": "jane.doe@example.com",
                          "provider": "au.com.sentral.enterprise",
                          "providerId": "7a7bcf7ac7dd2009",
                          "externalId": "EXT-ID-0001",
                          "externalSource": "SIS",
                          "createdAt": "2019-01-01"
                        },
                        "links": {
                          "self": "/v1/core/core-administrative-user/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-administrative-user/{id}": {
    "get": {
      "operationId": "getCoreAdministrativeUser",
      "summary": "Get Core Administrative User",
      "description": "Retrieves a single instance of `coreAdministrativeUser`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreAdministrativeUser' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'coreAdministrativeUser' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/coreAdministrativeUser"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "coreAdministrativeUser",
                      "id": "1",
                      "attributes": {
                        "username": "admin",
                        "title": "Ms",
                        "firstName": "Jane",
                        "lastName": "Doe",
                        "email": "jane.doe@example.com",
                        "provider": "au.com.sentral.enterprise",
                        "providerId": "7a7bcf7ac7dd2009",
                        "externalId": "EXT-ID-0001",
                        "externalSource": "SIS",
                        "createdAt": "2019-01-01"
                      },
                      "links": {
                        "self": "/v1/core/core-administrative-user/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-class/{id}": {
    "get": {
      "operationId": "getCoreClass",
      "summary": "Get Core Class",
      "description": "Retrieves a single instance of `coreClass`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreClass' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: assignedStudents, assignedStaff. [optional] [default: null] [example: \"assignedStudents\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'coreClass' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/coreClass"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "coreClass",
                      "id": "1",
                      "attributes": {
                        "name": "English 101",
                        "description": null,
                        "year": 2019,
                        "schoolYear": "",
                        "externalId": null,
                        "externalSource": "INTERNAL",
                        "refId": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "teacher": {
                          "data": {
                            "id": "2",
                            "type": "coreStaff"
                          }
                        },
                        "assignedStudents": {
                          "links": {
                            "related": "/v1/core/core-class/1/assigned-students"
                          }
                        },
                        "assignedStaff": {
                          "links": {
                            "related": "/v1/core/core-class/1/assigned-staff"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/core/core-class/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-classes": {
    "get": {
      "operationId": "getCoreClasses",
      "summary": "Get Core Classes",
      "description": "Retrieves a page of instances of `coreClass`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: assignedStudents, assignedStaff. [optional] [default: null] [example: \"assignedStudents\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "teacherIds",
          "required": false,
          "description": "String Comma-separated list of `teacher` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "assignedStudentIds",
          "required": false,
          "description": "String Comma-separated list of `assignedStudents` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "assignedStaffIds",
          "required": false,
          "description": "String Comma-separated list of `assignedStaff` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreClass' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreClass"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreClass",
                        "id": "1",
                        "attributes": {
                          "name": "English 101",
                          "description": null,
                          "year": 2019,
                          "schoolYear": "",
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          },
                          "assignedStudents": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-students"
                            }
                          },
                          "assignedStaff": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-class/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreClass",
                        "id": "1",
                        "attributes": {
                          "name": "English 101",
                          "description": null,
                          "year": 2019,
                          "schoolYear": "",
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          },
                          "assignedStudents": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-students"
                            }
                          },
                          "assignedStaff": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-class/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreClass",
                        "id": "1",
                        "attributes": {
                          "name": "English 101",
                          "description": null,
                          "year": 2019,
                          "schoolYear": "",
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          },
                          "assignedStudents": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-students"
                            }
                          },
                          "assignedStaff": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-class/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-classes/{id}/assigned-staff": {
    "get": {
      "operationId": "getCoreClassesAssignedStaff",
      "summary": "Get Core Classes Assigned Staff",
      "description": "Retrieves a page of the instances of ``, the relation `assignedStaff` of `coreStaff`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreStaff' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: assignedClasses. [optional] [default: null] [example: \"assignedClasses\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreStaff' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreStaff"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreStaff",
                        "id": "1",
                        "attributes": {
                          "title": "Ms",
                          "givenNames": "Jane Matilda",
                          "lastName": "Lizbona-Moscow",
                          "preferredTitle": "Miss",
                          "preferredFirstName": "Jane",
                          "preferredLastName": "Lizbona",
                          "gender": "F",
                          "dateOfBirth": null,
                          "mobilePhone": null,
                          "email": "jane.lizbona@example.com",
                          "username": null,
                          "employmentStatus": null,
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": "100ecf7b-30b5-411d-910a-27892f5d1722",
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStaff": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "assignedClasses": {
                            "links": {
                              "related": "/v1/core/core-staff/1/assigned-classes"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStaff",
                        "id": "1",
                        "attributes": {
                          "title": "Ms",
                          "givenNames": "Jane Matilda",
                          "lastName": "Lizbona-Moscow",
                          "preferredTitle": "Miss",
                          "preferredFirstName": "Jane",
                          "preferredLastName": "Lizbona",
                          "gender": "F",
                          "dateOfBirth": null,
                          "mobilePhone": null,
                          "email": "jane.lizbona@example.com",
                          "username": null,
                          "employmentStatus": null,
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": "100ecf7b-30b5-411d-910a-27892f5d1722",
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStaff": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "assignedClasses": {
                            "links": {
                              "related": "/v1/core/core-staff/1/assigned-classes"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStaff",
                        "id": "1",
                        "attributes": {
                          "title": "Ms",
                          "givenNames": "Jane Matilda",
                          "lastName": "Lizbona-Moscow",
                          "preferredTitle": "Miss",
                          "preferredFirstName": "Jane",
                          "preferredLastName": "Lizbona",
                          "gender": "F",
                          "dateOfBirth": null,
                          "mobilePhone": null,
                          "email": "jane.lizbona@example.com",
                          "username": null,
                          "employmentStatus": null,
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": "100ecf7b-30b5-411d-910a-27892f5d1722",
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStaff": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "assignedClasses": {
                            "links": {
                              "related": "/v1/core/core-staff/1/assigned-classes"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-classes/{id}/assigned-students": {
    "get": {
      "operationId": "getCoreClassesAssignedStudents",
      "summary": "Get Core Classes Assigned Students",
      "description": "Retrieves a page of the instances of ``, the relation `assignedStudents` of `coreStudent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreStudent' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: additionalDetails, coreRollclass, attendedClasses, holidays, studentRelationships, coreHouse, contacts. [optional] [default: null] [example: \"additionalDetails\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreStudent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreStudent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreStudent",
                        "id": "2",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Smith",
                          "preferredName": "Jane",
                          "gender": null,
                          "barcode": "B000007001",
                          "examId": null,
                          "schoolYear": null,
                          "dateOfBirth": null,
                          "allergies": null,
                          "medicalConditions": null,
                          "externalId": "EXT_123",
                          "externalSource": "SentralEnrolment",
                          "username": null,
                          "email": null,
                          "mobile": null,
                          "refId": "8b6447c6-49e1-44f7-952c-12006df6dfab",
                          "eslSupportNeeded": false,
                          "eslDateAssessed": null,
                          "isEslSupportReceived": false,
                          "enrolDate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "additionalDetails": {
                            "data": {
                              "id": "1",
                              "type": "corePerson"
                            }
                          },
                          "attendedClasses": {
                            "links": {
                              "related": "/v1/core/core-student/2/attended-classes"
                            }
                          },
                          "studentRelationships": {
                            "links": {
                              "related": "/v1/core/core-student-relationships?studentIds=2"
                            }
                          },
                          "coreHouse": {
                            "data": {
                              "id": "1",
                              "type": "coreHouse"
                            }
                          },
                          "contacts": {
                            "links": {
                              "related": "/v1/core/core-student/2/contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student/2"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStudent",
                        "id": "2",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Smith",
                          "preferredName": "Jane",
                          "gender": null,
                          "barcode": "B000007001",
                          "examId": null,
                          "schoolYear": null,
                          "dateOfBirth": null,
                          "allergies": null,
                          "medicalConditions": null,
                          "externalId": "EXT_123",
                          "externalSource": "SentralEnrolment",
                          "username": null,
                          "email": null,
                          "mobile": null,
                          "refId": "8b6447c6-49e1-44f7-952c-12006df6dfab",
                          "eslSupportNeeded": false,
                          "eslDateAssessed": null,
                          "isEslSupportReceived": false,
                          "enrolDate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "additionalDetails": {
                            "data": {
                              "id": "1",
                              "type": "corePerson"
                            }
                          },
                          "attendedClasses": {
                            "links": {
                              "related": "/v1/core/core-student/2/attended-classes"
                            }
                          },
                          "studentRelationships": {
                            "links": {
                              "related": "/v1/core/core-student-relationships?studentIds=2"
                            }
                          },
                          "coreHouse": {
                            "data": {
                              "id": "1",
                              "type": "coreHouse"
                            }
                          },
                          "contacts": {
                            "links": {
                              "related": "/v1/core/core-student/2/contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student/2"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStudent",
                        "id": "2",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Smith",
                          "preferredName": "Jane",
                          "gender": null,
                          "barcode": "B000007001",
                          "examId": null,
                          "schoolYear": null,
                          "dateOfBirth": null,
                          "allergies": null,
                          "medicalConditions": null,
                          "externalId": "EXT_123",
                          "externalSource": "SentralEnrolment",
                          "username": null,
                          "email": null,
                          "mobile": null,
                          "refId": "8b6447c6-49e1-44f7-952c-12006df6dfab",
                          "eslSupportNeeded": false,
                          "eslDateAssessed": null,
                          "isEslSupportReceived": false,
                          "enrolDate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "additionalDetails": {
                            "data": {
                              "id": "1",
                              "type": "corePerson"
                            }
                          },
                          "attendedClasses": {
                            "links": {
                              "related": "/v1/core/core-student/2/attended-classes"
                            }
                          },
                          "studentRelationships": {
                            "links": {
                              "related": "/v1/core/core-student-relationships?studentIds=2"
                            }
                          },
                          "coreHouse": {
                            "data": {
                              "id": "1",
                              "type": "coreHouse"
                            }
                          },
                          "contacts": {
                            "links": {
                              "related": "/v1/core/core-student/2/contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student/2"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-families": {
    "get": {
      "operationId": "getCoreFamilies",
      "summary": "Get Core Families",
      "description": "Retrieves a page of instances of `coreFamily`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreFamily' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreFamily"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreFamily",
                        "id": "1",
                        "attributes": {
                          "addressTitle": "Mr & Mrs",
                          "addressPoBox": "",
                          "addressStreetNo": "7",
                          "addressStreet": "Railway Avenue",
                          "addressSuburb": "",
                          "addressState": "Victoria",
                          "addressPostCode": "3616",
                          "isOutOfArea": false,
                          "phone": "03586-67499",
                          "emailAddress": "smiths@example.com",
                          "contact1Title": "Mr",
                          "contact1Gender": "M",
                          "contact1Surname": "Smith",
                          "contact1GivenNames": "John",
                          "contact1HomePhone": "02896-07460",
                          "contact1WorkPhone": "08550-44838",
                          "contact1Mobile": "042010-8714",
                          "contact1Email": "john.smith@example.com",
                          "contact1Occupation": "Software Developer",
                          "contact1OccupationGroup": "Tradsesmen/women, clerks and skilled office, sales and service staff",
                          "contact1CountryOfBirth": "Australia",
                          "contact1Nationality": "Australian",
                          "contact1LanguageHome": "English",
                          "contact1LanguageOther1": "Spanish",
                          "contact1LanguageOther2": "Russian",
                          "contact1InterpreterRequired": false,
                          "contact1SchoolEducation": "Year 12 or equivalent",
                          "contact1NonschoolEducation": "Advanced diploma/Diploma",
                          "contact2Title": "Mrs",
                          "contact2Gender": "F",
                          "contact2Surname": "Smith",
                          "contact2GivenNames": "Jane",
                          "contact2HomePhone": "08753-02803",
                          "contact2WorkPhone": "03872-09569",
                          "contact2Mobile": "048980-5491",
                          "contact2Email": "jane.smith@example.com",
                          "contact2Occupation": "CTO",
                          "contact2OccupationGroup": "Senior management in large business organisation, government administration and defence and qualified professionals.",
                          "contact2CountryOfBirth": "France",
                          "contact2Nationality": "French",
                          "contact2LanguageHome": "English",
                          "contact2LanguageOther1": "French",
                          "contact2LanguageOther2": "",
                          "contact2InterpreterRequired": false,
                          "contact2SchoolEducation": "Year 12 or equivalnet",
                          "contact2NonschoolEducation": "Advanced diploma/Diploma",
                          "emergencyContact1Name": "Laura",
                          "emergencyContact1Phone": "02896-07460",
                          "emergencyContact1Mobile": "048980-5491",
                          "emergencyContact1Email": "laura@example.com",
                          "emergencyContact1Relationship": "Cousin",
                          "emergencyContact2Name": "Richard",
                          "emergencyContact2Phone": "03586-67499",
                          "emergencyContact2Mobile": "048998-5190",
                          "emergencyContact2Email": "richard@example.com",
                          "emergencyContact2Relationship": "Brother",
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": null,
                          "createdAt": null,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/core/core-family/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreFamily",
                        "id": "1",
                        "attributes": {
                          "addressTitle": "Mr & Mrs",
                          "addressPoBox": "",
                          "addressStreetNo": "7",
                          "addressStreet": "Railway Avenue",
                          "addressSuburb": "",
                          "addressState": "Victoria",
                          "addressPostCode": "3616",
                          "isOutOfArea": false,
                          "phone": "03586-67499",
                          "emailAddress": "smiths@example.com",
                          "contact1Title": "Mr",
                          "contact1Gender": "M",
                          "contact1Surname": "Smith",
                          "contact1GivenNames": "John",
                          "contact1HomePhone": "02896-07460",
                          "contact1WorkPhone": "08550-44838",
                          "contact1Mobile": "042010-8714",
                          "contact1Email": "john.smith@example.com",
                          "contact1Occupation": "Software Developer",
                          "contact1OccupationGroup": "Tradsesmen/women, clerks and skilled office, sales and service staff",
                          "contact1CountryOfBirth": "Australia",
                          "contact1Nationality": "Australian",
                          "contact1LanguageHome": "English",
                          "contact1LanguageOther1": "Spanish",
                          "contact1LanguageOther2": "Russian",
                          "contact1InterpreterRequired": false,
                          "contact1SchoolEducation": "Year 12 or equivalent",
                          "contact1NonschoolEducation": "Advanced diploma/Diploma",
                          "contact2Title": "Mrs",
                          "contact2Gender": "F",
                          "contact2Surname": "Smith",
                          "contact2GivenNames": "Jane",
                          "contact2HomePhone": "08753-02803",
                          "contact2WorkPhone": "03872-09569",
                          "contact2Mobile": "048980-5491",
                          "contact2Email": "jane.smith@example.com",
                          "contact2Occupation": "CTO",
                          "contact2OccupationGroup": "Senior management in large business organisation, government administration and defence and qualified professionals.",
                          "contact2CountryOfBirth": "France",
                          "contact2Nationality": "French",
                          "contact2LanguageHome": "English",
                          "contact2LanguageOther1": "French",
                          "contact2LanguageOther2": "",
                          "contact2InterpreterRequired": false,
                          "contact2SchoolEducation": "Year 12 or equivalnet",
                          "contact2NonschoolEducation": "Advanced diploma/Diploma",
                          "emergencyContact1Name": "Laura",
                          "emergencyContact1Phone": "02896-07460",
                          "emergencyContact1Mobile": "048980-5491",
                          "emergencyContact1Email": "laura@example.com",
                          "emergencyContact1Relationship": "Cousin",
                          "emergencyContact2Name": "Richard",
                          "emergencyContact2Phone": "03586-67499",
                          "emergencyContact2Mobile": "048998-5190",
                          "emergencyContact2Email": "richard@example.com",
                          "emergencyContact2Relationship": "Brother",
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": null,
                          "createdAt": null,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/core/core-family/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreFamily",
                        "id": "1",
                        "attributes": {
                          "addressTitle": "Mr & Mrs",
                          "addressPoBox": "",
                          "addressStreetNo": "7",
                          "addressStreet": "Railway Avenue",
                          "addressSuburb": "",
                          "addressState": "Victoria",
                          "addressPostCode": "3616",
                          "isOutOfArea": false,
                          "phone": "03586-67499",
                          "emailAddress": "smiths@example.com",
                          "contact1Title": "Mr",
                          "contact1Gender": "M",
                          "contact1Surname": "Smith",
                          "contact1GivenNames": "John",
                          "contact1HomePhone": "02896-07460",
                          "contact1WorkPhone": "08550-44838",
                          "contact1Mobile": "042010-8714",
                          "contact1Email": "john.smith@example.com",
                          "contact1Occupation": "Software Developer",
                          "contact1OccupationGroup": "Tradsesmen/women, clerks and skilled office, sales and service staff",
                          "contact1CountryOfBirth": "Australia",
                          "contact1Nationality": "Australian",
                          "contact1LanguageHome": "English",
                          "contact1LanguageOther1": "Spanish",
                          "contact1LanguageOther2": "Russian",
                          "contact1InterpreterRequired": false,
                          "contact1SchoolEducation": "Year 12 or equivalent",
                          "contact1NonschoolEducation": "Advanced diploma/Diploma",
                          "contact2Title": "Mrs",
                          "contact2Gender": "F",
                          "contact2Surname": "Smith",
                          "contact2GivenNames": "Jane",
                          "contact2HomePhone": "08753-02803",
                          "contact2WorkPhone": "03872-09569",
                          "contact2Mobile": "048980-5491",
                          "contact2Email": "jane.smith@example.com",
                          "contact2Occupation": "CTO",
                          "contact2OccupationGroup": "Senior management in large business organisation, government administration and defence and qualified professionals.",
                          "contact2CountryOfBirth": "France",
                          "contact2Nationality": "French",
                          "contact2LanguageHome": "English",
                          "contact2LanguageOther1": "French",
                          "contact2LanguageOther2": "",
                          "contact2InterpreterRequired": false,
                          "contact2SchoolEducation": "Year 12 or equivalnet",
                          "contact2NonschoolEducation": "Advanced diploma/Diploma",
                          "emergencyContact1Name": "Laura",
                          "emergencyContact1Phone": "02896-07460",
                          "emergencyContact1Mobile": "048980-5491",
                          "emergencyContact1Email": "laura@example.com",
                          "emergencyContact1Relationship": "Cousin",
                          "emergencyContact2Name": "Richard",
                          "emergencyContact2Phone": "03586-67499",
                          "emergencyContact2Mobile": "048998-5190",
                          "emergencyContact2Email": "richard@example.com",
                          "emergencyContact2Relationship": "Brother",
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": null,
                          "createdAt": null,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/core/core-family/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-family/{id}": {
    "get": {
      "operationId": "getCoreFamily",
      "summary": "Get Core Family",
      "description": "Retrieves a single instance of `coreFamily`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreFamily' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'coreFamily' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/coreFamily"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "coreFamily",
                      "id": "1",
                      "attributes": {
                        "addressTitle": "Mr & Mrs",
                        "addressPoBox": "",
                        "addressStreetNo": "7",
                        "addressStreet": "Railway Avenue",
                        "addressSuburb": "",
                        "addressState": "Victoria",
                        "addressPostCode": "3616",
                        "isOutOfArea": false,
                        "phone": "03586-67499",
                        "emailAddress": "smiths@example.com",
                        "contact1Title": "Mr",
                        "contact1Gender": "M",
                        "contact1Surname": "Smith",
                        "contact1GivenNames": "John",
                        "contact1HomePhone": "02896-07460",
                        "contact1WorkPhone": "08550-44838",
                        "contact1Mobile": "042010-8714",
                        "contact1Email": "john.smith@example.com",
                        "contact1Occupation": "Software Developer",
                        "contact1OccupationGroup": "Tradsesmen/women, clerks and skilled office, sales and service staff",
                        "contact1CountryOfBirth": "Australia",
                        "contact1Nationality": "Australian",
                        "contact1LanguageHome": "English",
                        "contact1LanguageOther1": "Spanish",
                        "contact1LanguageOther2": "Russian",
                        "contact1InterpreterRequired": false,
                        "contact1SchoolEducation": "Year 12 or equivalent",
                        "contact1NonschoolEducation": "Advanced diploma/Diploma",
                        "contact2Title": "Mrs",
                        "contact2Gender": "F",
                        "contact2Surname": "Smith",
                        "contact2GivenNames": "Jane",
                        "contact2HomePhone": "08753-02803",
                        "contact2WorkPhone": "03872-09569",
                        "contact2Mobile": "048980-5491",
                        "contact2Email": "jane.smith@example.com",
                        "contact2Occupation": "CTO",
                        "contact2OccupationGroup": "Senior management in large business organisation, government administration and defence and qualified professionals.",
                        "contact2CountryOfBirth": "France",
                        "contact2Nationality": "French",
                        "contact2LanguageHome": "English",
                        "contact2LanguageOther1": "French",
                        "contact2LanguageOther2": "",
                        "contact2InterpreterRequired": false,
                        "contact2SchoolEducation": "Year 12 or equivalnet",
                        "contact2NonschoolEducation": "Advanced diploma/Diploma",
                        "emergencyContact1Name": "Laura",
                        "emergencyContact1Phone": "02896-07460",
                        "emergencyContact1Mobile": "048980-5491",
                        "emergencyContact1Email": "laura@example.com",
                        "emergencyContact1Relationship": "Cousin",
                        "emergencyContact2Name": "Richard",
                        "emergencyContact2Phone": "03586-67499",
                        "emergencyContact2Mobile": "048998-5190",
                        "emergencyContact2Email": "richard@example.com",
                        "emergencyContact2Relationship": "Brother",
                        "externalId": null,
                        "externalSource": "INTERNAL",
                        "refId": null,
                        "createdAt": null,
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/core/core-family/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-holiday": {
    "get": {
      "operationId": "getCoreHolidays",
      "summary": "Get Core Holidays",
      "description": "Retrieves a page of instances of `coreHoliday`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "years",
          "required": false,
          "description": "String Comma-separated list of years to filter by. \n            When filtering by years it will also return ALL reoccuring holidays from the past. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreHoliday' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreHoliday"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreHoliday",
                        "id": "1",
                        "attributes": {
                          "date": "2017-12-24",
                          "name": "Christmas Eve",
                          "isReoccuring": true,
                          "isWholeSchool": true
                        },
                        "links": {
                          "self": "/v1/core/core-holiday/1"
                        }
                      },
                      {
                        "type": "coreHoliday",
                        "id": "1",
                        "attributes": {
                          "date": "2017-12-24",
                          "name": "Christmas Eve",
                          "isReoccuring": true,
                          "isWholeSchool": true
                        },
                        "links": {
                          "self": "/v1/core/core-holiday/1"
                        }
                      },
                      {
                        "type": "coreHoliday",
                        "id": "1",
                        "attributes": {
                          "date": "2017-12-24",
                          "name": "Christmas Eve",
                          "isReoccuring": true,
                          "isWholeSchool": true
                        },
                        "links": {
                          "self": "/v1/core/core-holiday/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-holiday/{id}": {
    "get": {
      "operationId": "getCoreHoliday",
      "summary": "Get Core Holiday",
      "description": "Retrieves a single instance of `coreHoliday`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreHoliday' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'coreHoliday' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/coreHoliday"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "coreHoliday",
                      "id": "1",
                      "attributes": {
                        "date": "2017-12-24",
                        "name": "Christmas Eve",
                        "isReoccuring": true,
                        "isWholeSchool": true
                      },
                      "links": {
                        "self": "/v1/core/core-holiday/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-house": {
    "get": {
      "operationId": "getCoreHouses",
      "summary": "Get Core Houses",
      "description": "Retrieves a page of instances of `coreHouse`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreHouse' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreHouse"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreHouse",
                        "id": "1",
                        "attributes": {
                          "name": "Kangaroos",
                          "shortName": "KNG",
                          "colour": "DDDDDD",
                          "externalId": "01000214-8494-4fc1-bd5f-a1438f560a13",
                          "externalSource": "ENROLMENTS",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/core/core-house/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreHouse",
                        "id": "1",
                        "attributes": {
                          "name": "Kangaroos",
                          "shortName": "KNG",
                          "colour": "DDDDDD",
                          "externalId": "01000214-8494-4fc1-bd5f-a1438f560a13",
                          "externalSource": "ENROLMENTS",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/core/core-house/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreHouse",
                        "id": "1",
                        "attributes": {
                          "name": "Kangaroos",
                          "shortName": "KNG",
                          "colour": "DDDDDD",
                          "externalId": "01000214-8494-4fc1-bd5f-a1438f560a13",
                          "externalSource": "ENROLMENTS",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/core/core-house/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-house/{id}": {
    "get": {
      "operationId": "getCoreHouse",
      "summary": "Get Core House",
      "description": "Retrieves a single instance of `coreHouse`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreHouse' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'coreHouse' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/coreHouse"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "coreHouse",
                      "id": "1",
                      "attributes": {
                        "name": "Kangaroos",
                        "shortName": "KNG",
                        "colour": "DDDDDD",
                        "externalId": "01000214-8494-4fc1-bd5f-a1438f560a13",
                        "externalSource": "ENROLMENTS",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/core/core-house/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-person": {
    "get": {
      "operationId": "getCorePersons",
      "summary": "Get Core Persons",
      "description": "Retrieves a page of instances of `corePerson`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: studentContacts. [optional] [default: null] [example: \"studentContacts\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'corePerson' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/corePerson"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "corePerson",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "title": "Ms",
                          "preferredName": "JL",
                          "gender": "F",
                          "externalId": "",
                          "isDeceased": false,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentPerson": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          },
                          "studentContacts": {
                            "links": {
                              "related": "/v1/core/core-person/1/student-contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-person/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "corePerson",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "title": "Ms",
                          "preferredName": "JL",
                          "gender": "F",
                          "externalId": "",
                          "isDeceased": false,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentPerson": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          },
                          "studentContacts": {
                            "links": {
                              "related": "/v1/core/core-person/1/student-contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-person/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "corePerson",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "title": "Ms",
                          "preferredName": "JL",
                          "gender": "F",
                          "externalId": "",
                          "isDeceased": false,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentPerson": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          },
                          "studentContacts": {
                            "links": {
                              "related": "/v1/core/core-person/1/student-contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-person/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-person/{id}": {
    "get": {
      "operationId": "getCorePerson",
      "summary": "Get Core Person",
      "description": "Retrieves a single instance of `corePerson`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'corePerson' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: studentContacts. [optional] [default: null] [example: \"studentContacts\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'corePerson' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/corePerson"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "corePerson",
                      "id": "1",
                      "attributes": {
                        "firstName": "Jane",
                        "lastName": "Doe",
                        "title": "Ms",
                        "preferredName": "JL",
                        "gender": "F",
                        "externalId": "",
                        "isDeceased": false,
                        "isActive": true
                      },
                      "relationships": {
                        "enrolmentPerson": {
                          "data": {
                            "id": "2",
                            "type": "person"
                          }
                        },
                        "studentContacts": {
                          "links": {
                            "related": "/v1/core/core-person/1/student-contacts"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/core/core-person/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-person/{id}/contacts": {
    "get": {
      "operationId": "getCorePersonStudentContacts",
      "summary": "Get Core Person Student Contacts",
      "description": "Retrieves a page of the instances of ``, the relation `studentContacts` of `coreStudentPersonRelation`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreStudentPersonRelation' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreStudentPersonRelation' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreStudentPersonRelation"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreStudentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "relationship": null,
                          "isResidentialGuardian": true,
                          "isEmergencyContact": false,
                          "isAuthorisedPickup": true,
                          "canContactViaSms": true,
                          "canContactViaEmail": true,
                          "canContactViaPhone": true,
                          "canContactViaLetter": true,
                          "canReceiveCorrespondence": true,
                          "canReceivePortalAccess": true,
                          "canReceiveReports": true,
                          "canReceiveSms": true,
                          "sequence": 1,
                          "externalId": null,
                          "externalSource": null
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "1",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student-relationship/1"
                        }
                      },
                      {
                        "type": "coreStudentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "relationship": null,
                          "isResidentialGuardian": true,
                          "isEmergencyContact": false,
                          "isAuthorisedPickup": true,
                          "canContactViaSms": true,
                          "canContactViaEmail": true,
                          "canContactViaPhone": true,
                          "canContactViaLetter": true,
                          "canReceiveCorrespondence": true,
                          "canReceivePortalAccess": true,
                          "canReceiveReports": true,
                          "canReceiveSms": true,
                          "sequence": 1,
                          "externalId": null,
                          "externalSource": null
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "1",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student-relationship/1"
                        }
                      },
                      {
                        "type": "coreStudentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "relationship": null,
                          "isResidentialGuardian": true,
                          "isEmergencyContact": false,
                          "isAuthorisedPickup": true,
                          "canContactViaSms": true,
                          "canContactViaEmail": true,
                          "canContactViaPhone": true,
                          "canContactViaLetter": true,
                          "canReceiveCorrespondence": true,
                          "canReceivePortalAccess": true,
                          "canReceiveReports": true,
                          "canReceiveSms": true,
                          "sequence": 1,
                          "externalId": null,
                          "externalSource": null
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "1",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student-relationship/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-rollclass": {
    "get": {
      "operationId": "getCoreRollclasses",
      "summary": "Get Core Rollclasses",
      "description": "Retrieves a page of instances of `coreRollclass`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: assignedStudents, assignedStaff. [optional] [default: null] [example: \"assignedStudents\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "enterpriseUserIds",
          "required": false,
          "description": "String Comma-separated list of IDs of `AdminUsers` to whom the classes are linked to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreRollclass' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreRollclass"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreRollclass",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "year": 0,
                          "externalId": "10962115-2ad2-4272-8cb6-6f03a78d52e4",
                          "externalSource": "ENROLMENTS",
                          "refId": "68004d0b-7c6f-492d-84cb-06d1d335bcfc",
                          "createdAt": "2019-01-01",
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          },
                          "enrolmentRollclass": {
                            "data": {
                              "id": "3",
                              "type": "rollclass"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-rollclass/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreRollclass",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "year": 0,
                          "externalId": "10962115-2ad2-4272-8cb6-6f03a78d52e4",
                          "externalSource": "ENROLMENTS",
                          "refId": "68004d0b-7c6f-492d-84cb-06d1d335bcfc",
                          "createdAt": "2019-01-01",
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          },
                          "enrolmentRollclass": {
                            "data": {
                              "id": "3",
                              "type": "rollclass"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-rollclass/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreRollclass",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "year": 0,
                          "externalId": "10962115-2ad2-4272-8cb6-6f03a78d52e4",
                          "externalSource": "ENROLMENTS",
                          "refId": "68004d0b-7c6f-492d-84cb-06d1d335bcfc",
                          "createdAt": "2019-01-01",
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          },
                          "enrolmentRollclass": {
                            "data": {
                              "id": "3",
                              "type": "rollclass"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-rollclass/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-rollclass/{id}": {
    "get": {
      "operationId": "getCoreRollclass",
      "summary": "Get Core Rollclass",
      "description": "Retrieves a single instance of `coreRollclass`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreRollclass' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: assignedStudents, assignedStaff. [optional] [default: null] [example: \"assignedStudents\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'coreRollclass' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/coreRollclass"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "coreRollclass",
                      "id": "1",
                      "attributes": {
                        "name": null,
                        "year": 0,
                        "externalId": "10962115-2ad2-4272-8cb6-6f03a78d52e4",
                        "externalSource": "ENROLMENTS",
                        "refId": "68004d0b-7c6f-492d-84cb-06d1d335bcfc",
                        "createdAt": "2019-01-01",
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "teacher": {
                          "data": {
                            "id": "2",
                            "type": "coreStaff"
                          }
                        },
                        "enrolmentRollclass": {
                          "data": {
                            "id": "3",
                            "type": "rollclass"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/core/core-rollclass/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-staff": {
    "get": {
      "operationId": "getCoreStaffs",
      "summary": "Get Core Staffs",
      "description": "Retrieves a page of instances of `coreStaff`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: assignedClasses. [optional] [default: null] [example: \"assignedClasses\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreStaff' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreStaff"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreStaff",
                        "id": "1",
                        "attributes": {
                          "title": "Ms",
                          "givenNames": "Jane Matilda",
                          "lastName": "Lizbona-Moscow",
                          "preferredTitle": "Miss",
                          "preferredFirstName": "Jane",
                          "preferredLastName": "Lizbona",
                          "gender": "F",
                          "dateOfBirth": null,
                          "mobilePhone": null,
                          "email": "jane.lizbona@example.com",
                          "username": null,
                          "employmentStatus": null,
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": "100ecf7b-30b5-411d-910a-27892f5d1722",
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStaff": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "assignedClasses": {
                            "links": {
                              "related": "/v1/core/core-staff/1/assigned-classes"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStaff",
                        "id": "1",
                        "attributes": {
                          "title": "Ms",
                          "givenNames": "Jane Matilda",
                          "lastName": "Lizbona-Moscow",
                          "preferredTitle": "Miss",
                          "preferredFirstName": "Jane",
                          "preferredLastName": "Lizbona",
                          "gender": "F",
                          "dateOfBirth": null,
                          "mobilePhone": null,
                          "email": "jane.lizbona@example.com",
                          "username": null,
                          "employmentStatus": null,
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": "100ecf7b-30b5-411d-910a-27892f5d1722",
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStaff": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "assignedClasses": {
                            "links": {
                              "related": "/v1/core/core-staff/1/assigned-classes"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStaff",
                        "id": "1",
                        "attributes": {
                          "title": "Ms",
                          "givenNames": "Jane Matilda",
                          "lastName": "Lizbona-Moscow",
                          "preferredTitle": "Miss",
                          "preferredFirstName": "Jane",
                          "preferredLastName": "Lizbona",
                          "gender": "F",
                          "dateOfBirth": null,
                          "mobilePhone": null,
                          "email": "jane.lizbona@example.com",
                          "username": null,
                          "employmentStatus": null,
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": "100ecf7b-30b5-411d-910a-27892f5d1722",
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStaff": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "assignedClasses": {
                            "links": {
                              "related": "/v1/core/core-staff/1/assigned-classes"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-staff/{id}": {
    "get": {
      "operationId": "getCoreStaff",
      "summary": "Get Core Staff",
      "description": "Retrieves a single instance of `coreStaff`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreStaff' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: assignedClasses. [optional] [default: null] [example: \"assignedClasses\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'coreStaff' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/coreStaff"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "coreStaff",
                      "id": "1",
                      "attributes": {
                        "title": "Ms",
                        "givenNames": "Jane Matilda",
                        "lastName": "Lizbona-Moscow",
                        "preferredTitle": "Miss",
                        "preferredFirstName": "Jane",
                        "preferredLastName": "Lizbona",
                        "gender": "F",
                        "dateOfBirth": null,
                        "mobilePhone": null,
                        "email": "jane.lizbona@example.com",
                        "username": null,
                        "employmentStatus": null,
                        "externalId": null,
                        "externalSource": "INTERNAL",
                        "refId": "100ecf7b-30b5-411d-910a-27892f5d1722",
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "enrolmentStaff": {
                          "data": {
                            "id": "2",
                            "type": "staff"
                          }
                        },
                        "assignedClasses": {
                          "links": {
                            "related": "/v1/core/core-staff/1/assigned-classes"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/core/core-staff/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-staff/{id}/assigned-classes": {
    "get": {
      "operationId": "getCoreStaffAssignedClasses",
      "summary": "Get Core Staff Assigned Classes",
      "description": "Retrieves a page of the instances of ``, the relation `assignedClasses` of `coreClass`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreClass' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: assignedStudents, assignedStaff. [optional] [default: null] [example: \"assignedStudents\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreClass' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreClass"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreClass",
                        "id": "1",
                        "attributes": {
                          "name": "English 101",
                          "description": null,
                          "year": 2019,
                          "schoolYear": "",
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          },
                          "assignedStudents": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-students"
                            }
                          },
                          "assignedStaff": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-class/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreClass",
                        "id": "1",
                        "attributes": {
                          "name": "English 101",
                          "description": null,
                          "year": 2019,
                          "schoolYear": "",
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          },
                          "assignedStudents": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-students"
                            }
                          },
                          "assignedStaff": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-class/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreClass",
                        "id": "1",
                        "attributes": {
                          "name": "English 101",
                          "description": null,
                          "year": 2019,
                          "schoolYear": "",
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          },
                          "assignedStudents": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-students"
                            }
                          },
                          "assignedStaff": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-class/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-student": {
    "get": {
      "operationId": "getCoreStudents",
      "summary": "Get Core Students",
      "description": "Retrieves a page of instances of `coreStudent`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: additionalDetails, coreRollclass, attendedClasses, holidays, studentRelationships, coreHouse, contacts. [optional] [default: null] [example: \"additionalDetails\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "coreRollclassIds",
          "required": false,
          "description": "String Comma-separated list of `coreRollclass` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreStudent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreStudent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreStudent",
                        "id": "2",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Smith",
                          "preferredName": "Jane",
                          "gender": null,
                          "barcode": "B000007001",
                          "examId": null,
                          "schoolYear": null,
                          "dateOfBirth": null,
                          "allergies": null,
                          "medicalConditions": null,
                          "externalId": "EXT_123",
                          "externalSource": "SentralEnrolment",
                          "username": null,
                          "email": null,
                          "mobile": null,
                          "refId": "8b6447c6-49e1-44f7-952c-12006df6dfab",
                          "eslSupportNeeded": false,
                          "eslDateAssessed": null,
                          "isEslSupportReceived": false,
                          "enrolDate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "additionalDetails": {
                            "data": {
                              "id": "1",
                              "type": "corePerson"
                            }
                          },
                          "attendedClasses": {
                            "links": {
                              "related": "/v1/core/core-student/2/attended-classes"
                            }
                          },
                          "studentRelationships": {
                            "links": {
                              "related": "/v1/core/core-student-relationships?studentIds=2"
                            }
                          },
                          "coreHouse": {
                            "data": {
                              "id": "1",
                              "type": "coreHouse"
                            }
                          },
                          "contacts": {
                            "links": {
                              "related": "/v1/core/core-student/2/contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student/2"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStudent",
                        "id": "2",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Smith",
                          "preferredName": "Jane",
                          "gender": null,
                          "barcode": "B000007001",
                          "examId": null,
                          "schoolYear": null,
                          "dateOfBirth": null,
                          "allergies": null,
                          "medicalConditions": null,
                          "externalId": "EXT_123",
                          "externalSource": "SentralEnrolment",
                          "username": null,
                          "email": null,
                          "mobile": null,
                          "refId": "8b6447c6-49e1-44f7-952c-12006df6dfab",
                          "eslSupportNeeded": false,
                          "eslDateAssessed": null,
                          "isEslSupportReceived": false,
                          "enrolDate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "additionalDetails": {
                            "data": {
                              "id": "1",
                              "type": "corePerson"
                            }
                          },
                          "attendedClasses": {
                            "links": {
                              "related": "/v1/core/core-student/2/attended-classes"
                            }
                          },
                          "studentRelationships": {
                            "links": {
                              "related": "/v1/core/core-student-relationships?studentIds=2"
                            }
                          },
                          "coreHouse": {
                            "data": {
                              "id": "1",
                              "type": "coreHouse"
                            }
                          },
                          "contacts": {
                            "links": {
                              "related": "/v1/core/core-student/2/contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student/2"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStudent",
                        "id": "2",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Smith",
                          "preferredName": "Jane",
                          "gender": null,
                          "barcode": "B000007001",
                          "examId": null,
                          "schoolYear": null,
                          "dateOfBirth": null,
                          "allergies": null,
                          "medicalConditions": null,
                          "externalId": "EXT_123",
                          "externalSource": "SentralEnrolment",
                          "username": null,
                          "email": null,
                          "mobile": null,
                          "refId": "8b6447c6-49e1-44f7-952c-12006df6dfab",
                          "eslSupportNeeded": false,
                          "eslDateAssessed": null,
                          "isEslSupportReceived": false,
                          "enrolDate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "additionalDetails": {
                            "data": {
                              "id": "1",
                              "type": "corePerson"
                            }
                          },
                          "attendedClasses": {
                            "links": {
                              "related": "/v1/core/core-student/2/attended-classes"
                            }
                          },
                          "studentRelationships": {
                            "links": {
                              "related": "/v1/core/core-student-relationships?studentIds=2"
                            }
                          },
                          "coreHouse": {
                            "data": {
                              "id": "1",
                              "type": "coreHouse"
                            }
                          },
                          "contacts": {
                            "links": {
                              "related": "/v1/core/core-student/2/contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student/2"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-student-relationship/{id}": {
    "get": {
      "operationId": "getCoreStudentRelationship",
      "summary": "Get Core Student Relationship",
      "description": "Retrieves a single instance of `coreStudentRelationship`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreStudentRelationship' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: coreStudent. [optional] [default: null] [example: \"coreStudent\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'coreStudentRelationship' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/coreStudentRelationship"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "coreStudentRelationship",
                      "id": "1",
                      "attributes": {
                        "relationship": null,
                        "isResidentialGuardian": true,
                        "isEmergencyContact": false,
                        "sequence": 1,
                        "corePerson": {
                          "id": 1,
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "title": "Ms",
                          "preferredName": "JL",
                          "gender": "F",
                          "homePhone": "+48 123 123 123 ",
                          "workPhone": "",
                          "mobile": "",
                          "email": "jane.doe@example.com",
                          "externalId": "",
                          "externalSource": "",
                          "refId": "d32423b6-f117-4f17-8d2d-c91910dade28",
                          "isActive": true
                        },
                        "isActive": true
                      },
                      "relationships": {
                        "coreStudent": {
                          "data": {
                            "id": "1",
                            "type": "coreStudent"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/core/core-student-relationship/1",
                        "person": "/v1/core/core-person/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-student-relationships": {
    "get": {
      "operationId": "getCoreStudentRelationships",
      "summary": "Get Core Student Relationships",
      "description": "Retrieves a page of instances of `coreStudentRelationship`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: coreStudent. [optional] [default: null] [example: \"coreStudent\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "studentIds",
          "required": false,
          "description": "String Comma-separated list of Student IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreStudentRelationship' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreStudentRelationship"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreStudentRelationship",
                        "id": "1",
                        "attributes": {
                          "relationship": null,
                          "isResidentialGuardian": true,
                          "isEmergencyContact": false,
                          "sequence": 1,
                          "corePerson": {
                            "id": 1,
                            "firstName": "Jane",
                            "lastName": "Doe",
                            "title": "Ms",
                            "preferredName": "JL",
                            "gender": "F",
                            "homePhone": "+48 123 123 123 ",
                            "workPhone": "",
                            "mobile": "",
                            "email": "jane.doe@example.com",
                            "externalId": "",
                            "externalSource": "",
                            "refId": "d32423b6-f117-4f17-8d2d-c91910dade28",
                            "isActive": true
                          },
                          "isActive": true
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "1",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student-relationship/1",
                          "person": "/v1/core/core-person/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStudentRelationship",
                        "id": "1",
                        "attributes": {
                          "relationship": null,
                          "isResidentialGuardian": true,
                          "isEmergencyContact": false,
                          "sequence": 1,
                          "corePerson": {
                            "id": 1,
                            "firstName": "Jane",
                            "lastName": "Doe",
                            "title": "Ms",
                            "preferredName": "JL",
                            "gender": "F",
                            "homePhone": "+48 123 123 123 ",
                            "workPhone": "",
                            "mobile": "",
                            "email": "jane.doe@example.com",
                            "externalId": "",
                            "externalSource": "",
                            "refId": "d32423b6-f117-4f17-8d2d-c91910dade28",
                            "isActive": true
                          },
                          "isActive": true
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "1",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student-relationship/1",
                          "person": "/v1/core/core-person/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStudentRelationship",
                        "id": "1",
                        "attributes": {
                          "relationship": null,
                          "isResidentialGuardian": true,
                          "isEmergencyContact": false,
                          "sequence": 1,
                          "corePerson": {
                            "id": 1,
                            "firstName": "Jane",
                            "lastName": "Doe",
                            "title": "Ms",
                            "preferredName": "JL",
                            "gender": "F",
                            "homePhone": "+48 123 123 123 ",
                            "workPhone": "",
                            "mobile": "",
                            "email": "jane.doe@example.com",
                            "externalId": "",
                            "externalSource": "",
                            "refId": "d32423b6-f117-4f17-8d2d-c91910dade28",
                            "isActive": true
                          },
                          "isActive": true
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "1",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student-relationship/1",
                          "person": "/v1/core/core-person/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-student/{id}": {
    "get": {
      "operationId": "getCoreStudent",
      "summary": "Get Core Student",
      "description": "Retrieves a single instance of `coreStudent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreStudent' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: additionalDetails, coreRollclass, attendedClasses, holidays, studentRelationships, coreHouse, contacts. [optional] [default: null] [example: \"additionalDetails\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'coreStudent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/coreStudent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "coreStudent",
                      "id": "2",
                      "attributes": {
                        "firstName": "Jane",
                        "lastName": "Smith",
                        "preferredName": "Jane",
                        "gender": null,
                        "barcode": "B000007001",
                        "examId": null,
                        "schoolYear": null,
                        "dateOfBirth": null,
                        "allergies": null,
                        "medicalConditions": null,
                        "externalId": "EXT_123",
                        "externalSource": "SentralEnrolment",
                        "username": null,
                        "email": null,
                        "mobile": null,
                        "refId": "8b6447c6-49e1-44f7-952c-12006df6dfab",
                        "eslSupportNeeded": false,
                        "eslDateAssessed": null,
                        "isEslSupportReceived": false,
                        "enrolDate": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "enrolmentStudent": {
                          "data": {
                            "id": "2",
                            "type": "student"
                          }
                        },
                        "additionalDetails": {
                          "data": {
                            "id": "1",
                            "type": "corePerson"
                          }
                        },
                        "attendedClasses": {
                          "links": {
                            "related": "/v1/core/core-student/2/attended-classes"
                          }
                        },
                        "studentRelationships": {
                          "links": {
                            "related": "/v1/core/core-student-relationships?studentIds=2"
                          }
                        },
                        "coreHouse": {
                          "data": {
                            "id": "1",
                            "type": "coreHouse"
                          }
                        },
                        "contacts": {
                          "links": {
                            "related": "/v1/core/core-student/2/contacts"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/core/core-student/2"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-student/{id}/attended-classes": {
    "get": {
      "operationId": "getCoreStudentAttendedClasses",
      "summary": "Get Core Student Attended Classes",
      "description": "Retrieves a page of the instances of ``, the relation `attendedClasses` of `coreClass`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreClass' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: assignedStudents, assignedStaff. [optional] [default: null] [example: \"assignedStudents\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreClass' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreClass"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreClass",
                        "id": "1",
                        "attributes": {
                          "name": "English 101",
                          "description": null,
                          "year": 2019,
                          "schoolYear": "",
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          },
                          "assignedStudents": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-students"
                            }
                          },
                          "assignedStaff": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-class/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreClass",
                        "id": "1",
                        "attributes": {
                          "name": "English 101",
                          "description": null,
                          "year": 2019,
                          "schoolYear": "",
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          },
                          "assignedStudents": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-students"
                            }
                          },
                          "assignedStaff": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-class/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreClass",
                        "id": "1",
                        "attributes": {
                          "name": "English 101",
                          "description": null,
                          "year": 2019,
                          "schoolYear": "",
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          },
                          "assignedStudents": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-students"
                            }
                          },
                          "assignedStaff": {
                            "links": {
                              "related": "/v1/core/core-class/1/assigned-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-class/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-student/{id}/contacts": {
    "get": {
      "operationId": "getCoreStudentContacts",
      "summary": "Get Core Student Contacts",
      "description": "Retrieves a page of the instances of ``, the relation `contacts` of `coreStudentPersonRelation`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreStudentPersonRelation' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreStudentPersonRelation' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreStudentPersonRelation"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreStudentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "relationship": null,
                          "isResidentialGuardian": true,
                          "isEmergencyContact": false,
                          "isAuthorisedPickup": true,
                          "canContactViaSms": true,
                          "canContactViaEmail": true,
                          "canContactViaPhone": true,
                          "canContactViaLetter": true,
                          "canReceiveCorrespondence": true,
                          "canReceivePortalAccess": true,
                          "canReceiveReports": true,
                          "canReceiveSms": true,
                          "sequence": 1,
                          "externalId": null,
                          "externalSource": null
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "1",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student-relationship/1"
                        }
                      },
                      {
                        "type": "coreStudentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "relationship": null,
                          "isResidentialGuardian": true,
                          "isEmergencyContact": false,
                          "isAuthorisedPickup": true,
                          "canContactViaSms": true,
                          "canContactViaEmail": true,
                          "canContactViaPhone": true,
                          "canContactViaLetter": true,
                          "canReceiveCorrespondence": true,
                          "canReceivePortalAccess": true,
                          "canReceiveReports": true,
                          "canReceiveSms": true,
                          "sequence": 1,
                          "externalId": null,
                          "externalSource": null
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "1",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student-relationship/1"
                        }
                      },
                      {
                        "type": "coreStudentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "relationship": null,
                          "isResidentialGuardian": true,
                          "isEmergencyContact": false,
                          "isAuthorisedPickup": true,
                          "canContactViaSms": true,
                          "canContactViaEmail": true,
                          "canContactViaPhone": true,
                          "canContactViaLetter": true,
                          "canReceiveCorrespondence": true,
                          "canReceivePortalAccess": true,
                          "canReceiveReports": true,
                          "canReceiveSms": true,
                          "sequence": 1,
                          "externalId": null,
                          "externalSource": null
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "1",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student-relationship/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-student/{id}/photo": {
    "get": {
      "operationId": "getCoreStudentPhoto",
      "summary": "Get Core Student Photo",
      "description": "Returns the photo of a given student",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String ID of the coreStudent whose photo to retrieve. Also supports `externalId` for backwards compatibility.",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "width",
          "required": false,
          "description": "Number Width of the returned photo, must be between 16 and 1024, defaults to 256. [optional] [default: 256] \nValue constraints:\nMimimum value: 16 [inclusive]\nMaximum value: 1024 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "height",
          "required": false,
          "description": "Number Height of the returned photo, must be between 16 and 1024, defaults to 256. [optional] [default: 256] \nValue constraints:\nMimimum value: 16 [inclusive]\nMaximum value: 1024 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the image requested",
          "content": {
            "image/jpeg": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-student/{id}/timetable-classes": {
    "get": {
      "operationId": "getTimetableStudentRelatedTimetableClasses",
      "summary": "Get Timetable Student Related Timetable Classes",
      "description": "Retrieves a page of the instances of ``, the relation `timetableClasses` of `timetableClass`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetableClass' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: timetableStudents. [optional] [default: null] [example: \"timetableStudents\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableClass' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableClass"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableClass",
                        "id": "1",
                        "attributes": {
                          "name": "BIOLOGY Y4",
                          "type": null
                        },
                        "relationships": {
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "timetableSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-class/1"
                        }
                      },
                      {
                        "type": "timetableClass",
                        "id": "1",
                        "attributes": {
                          "name": "BIOLOGY Y4",
                          "type": null
                        },
                        "relationships": {
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "timetableSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-class/1"
                        }
                      },
                      {
                        "type": "timetableClass",
                        "id": "1",
                        "attributes": {
                          "name": "BIOLOGY Y4",
                          "type": null
                        },
                        "relationships": {
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "timetableSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-class/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-subject": {
    "get": {
      "operationId": "getCoreSubjects",
      "summary": "Get Core Subjects",
      "description": "Retrieves a page of instances of `coreSubject`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreSubject' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreSubject"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreSubject",
                        "id": "1",
                        "attributes": {
                          "name": "Yr 7 English",
                          "description": "Year 7 English",
                          "externalId": " 3ae65a2f-5ffc-4bc5-a161-892c3d94bc1c",
                          "externalSource": "ENROLMENTS",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/core/core-subject/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreSubject",
                        "id": "1",
                        "attributes": {
                          "name": "Yr 7 English",
                          "description": "Year 7 English",
                          "externalId": " 3ae65a2f-5ffc-4bc5-a161-892c3d94bc1c",
                          "externalSource": "ENROLMENTS",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/core/core-subject/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreSubject",
                        "id": "1",
                        "attributes": {
                          "name": "Yr 7 English",
                          "description": "Year 7 English",
                          "externalId": " 3ae65a2f-5ffc-4bc5-a161-892c3d94bc1c",
                          "externalSource": "ENROLMENTS",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/core/core-subject/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-subject/{id}": {
    "get": {
      "operationId": "getCoreSubject",
      "summary": "Get Core Subject",
      "description": "Retrieves a single instance of `coreSubject`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreSubject' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'coreSubject' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/coreSubject"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "coreSubject",
                      "id": "1",
                      "attributes": {
                        "name": "Yr 7 English",
                        "description": "Year 7 English",
                        "externalId": " 3ae65a2f-5ffc-4bc5-a161-892c3d94bc1c",
                        "externalSource": "ENROLMENTS",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/core/core-subject/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-term/{id}": {
    "get": {
      "operationId": "getCoreTerm",
      "summary": "Get Core Term",
      "description": "Retrieves a single instance of `coreTerm`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String matching regular expression: ~^\\d{4}-\\d+$~ ID of the 'coreTerm' to retrieve [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'coreTerm' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/coreTerm"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "coreTerm",
                      "id": "2019-1",
                      "attributes": {
                        "year": 2019,
                        "term": 1,
                        "startDate": "2019-01-01",
                        "endDate": "2019-03-31"
                      },
                      "links": {
                        "self": "/v1/core/core-term/2019-1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/core-terms": {
    "get": {
      "operationId": "getCoreTerms",
      "summary": "Get Core Terms",
      "description": "Retrieves a page of instances of `coreTerm`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "years",
          "required": false,
          "description": "String Comma-separated list of years to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreTerm' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreTerm"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreTerm",
                        "id": "2019-1",
                        "attributes": {
                          "year": 2019,
                          "term": 1,
                          "startDate": "2019-01-01",
                          "endDate": "2019-03-31"
                        },
                        "links": {
                          "self": "/v1/core/core-term/2019-1"
                        }
                      },
                      {
                        "type": "coreTerm",
                        "id": "2019-1",
                        "attributes": {
                          "year": 2019,
                          "term": 1,
                          "startDate": "2019-01-01",
                          "endDate": "2019-03-31"
                        },
                        "links": {
                          "self": "/v1/core/core-term/2019-1"
                        }
                      },
                      {
                        "type": "coreTerm",
                        "id": "2019-1",
                        "attributes": {
                          "year": 2019,
                          "term": 1,
                          "startDate": "2019-01-01",
                          "endDate": "2019-03-31"
                        },
                        "links": {
                          "self": "/v1/core/core-term/2019-1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/date": {
    "get": {
      "operationId": "getDates",
      "summary": "Get Dates",
      "description": "Retrieves at most a year worth of dates.",
      "parameters": [
        {
          "in": "query",
          "name": "fromDate",
          "required": false,
          "description": "Date (, eg. 20190102) Date from which to return. Must be the same year as `toDate` [optional] [default: First day of the server's year.] [example: \"2019-02-15\"]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "toDate",
          "required": false,
          "description": "Date (, eg. 20190102) Date to which to return. Must be the same year as `fromDate` [optional] [default: Last day of the server's year.] [example: \"2019-03-01\"]",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'date' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/date"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "date",
                        "id": "2019-01-01",
                        "attributes": {
                          "term": 1,
                          "week": 2,
                          "code": "S"
                        },
                        "links": {
                          "self": "/v1/core/date/2019-01-01"
                        }
                      },
                      {
                        "type": "date",
                        "id": "2019-01-01",
                        "attributes": {
                          "term": 1,
                          "week": 2,
                          "code": "S"
                        },
                        "links": {
                          "self": "/v1/core/date/2019-01-01"
                        }
                      },
                      {
                        "type": "date",
                        "id": "2019-01-01",
                        "attributes": {
                          "term": 1,
                          "week": 2,
                          "code": "S"
                        },
                        "links": {
                          "self": "/v1/core/date/2019-01-01"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/core/date/{id}": {
    "get": {
      "operationId": "getDate",
      "summary": "Get Date",
      "description": "Retrieves information about a dates.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Date (, eg. 20190102) ID of the 'date' to retrieve [example: \"2019-01-01\"]",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'date' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/date"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "date",
                      "id": "2019-01-01",
                      "attributes": {
                        "term": 1,
                        "week": 2,
                        "code": "S"
                      },
                      "links": {
                        "self": "/v1/core/date/2019-01-01"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/dashboard/dashboard-notice": {
    "get": {
      "operationId": "getDashboardNotices",
      "summary": "Get Dashboard Notices",
      "description": "Retrieves a page of instances of `dashboardNotice`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "recipientIds",
          "required": false,
          "description": "String Comma-separated list of recipient IDs, will only include notices which have any of given recipients (in any status). [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "senderIds",
          "required": false,
          "description": "String Comma-separated list of sender IDs to filter by, `null` (case insensitive) can be used to limit results to notices with no sender (must be used alone). [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'dashboardNotice' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/dashboardNotice"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "dashboardNotice",
                        "id": "1",
                        "attributes": {
                          "type": "PERSONAL",
                          "source": "PERSONAL",
                          "subject": "School break announcement",
                          "body": "<p>A reminder that this year's school break will start at 10:30.</p>",
                          "isHtml": true,
                          "createdAt": {
                            "timestamp": 1514801543,
                            "iso8601": "2018-01-01T10:12:23+0000"
                          }
                        },
                        "relationships": {
                          "sender": {
                            "data": {
                              "id": "2",
                              "type": "administrativeUser"
                            }
                          },
                          "recipients": {
                            "links": {
                              "related": "/v1/dashboards/dashboard-notice/1/recipients"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/dashboard/dashboard-notice/1"
                        }
                      },
                      {
                        "type": "dashboardNotice",
                        "id": "1",
                        "attributes": {
                          "type": "PERSONAL",
                          "source": "PERSONAL",
                          "subject": "School break announcement",
                          "body": "<p>A reminder that this year's school break will start at 10:30.</p>",
                          "isHtml": true,
                          "createdAt": {
                            "timestamp": 1514801543,
                            "iso8601": "2018-01-01T10:12:23+0000"
                          }
                        },
                        "relationships": {
                          "sender": {
                            "data": {
                              "id": "2",
                              "type": "administrativeUser"
                            }
                          },
                          "recipients": {
                            "links": {
                              "related": "/v1/dashboards/dashboard-notice/1/recipients"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/dashboard/dashboard-notice/1"
                        }
                      },
                      {
                        "type": "dashboardNotice",
                        "id": "1",
                        "attributes": {
                          "type": "PERSONAL",
                          "source": "PERSONAL",
                          "subject": "School break announcement",
                          "body": "<p>A reminder that this year's school break will start at 10:30.</p>",
                          "isHtml": true,
                          "createdAt": {
                            "timestamp": 1514801543,
                            "iso8601": "2018-01-01T10:12:23+0000"
                          }
                        },
                        "relationships": {
                          "sender": {
                            "data": {
                              "id": "2",
                              "type": "administrativeUser"
                            }
                          },
                          "recipients": {
                            "links": {
                              "related": "/v1/dashboards/dashboard-notice/1/recipients"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/dashboard/dashboard-notice/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/dashboard/dashboard-notice-recipient": {
    "get": {
      "operationId": "getDashboardNoticeRecipients",
      "summary": "Get Dashboard Notice Recipients",
      "description": "Retrieves a page of instances of `dashboardNoticeRecipient`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "noticeIds",
          "required": false,
          "description": "String Comma-separated list of notice IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "recipientIds",
          "required": false,
          "description": "String Comma-separated list of recipient IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "statuses",
          "required": false,
          "description": "String Comma-separated list of statuses to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'dashboardNoticeRecipient' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/dashboardNoticeRecipient"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "dashboardNoticeRecipient",
                        "id": "1",
                        "attributes": {
                          "status": "UNREAD"
                        },
                        "relationships": {
                          "notice": {
                            "data": {
                              "id": "1",
                              "type": "dashboardNotice"
                            }
                          },
                          "recipient": {
                            "data": {
                              "id": "2",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/dashboard/dashboard-notice-recipient/1"
                        }
                      },
                      {
                        "type": "dashboardNoticeRecipient",
                        "id": "1",
                        "attributes": {
                          "status": "UNREAD"
                        },
                        "relationships": {
                          "notice": {
                            "data": {
                              "id": "1",
                              "type": "dashboardNotice"
                            }
                          },
                          "recipient": {
                            "data": {
                              "id": "2",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/dashboard/dashboard-notice-recipient/1"
                        }
                      },
                      {
                        "type": "dashboardNoticeRecipient",
                        "id": "1",
                        "attributes": {
                          "status": "UNREAD"
                        },
                        "relationships": {
                          "notice": {
                            "data": {
                              "id": "1",
                              "type": "dashboardNotice"
                            }
                          },
                          "recipient": {
                            "data": {
                              "id": "2",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/dashboard/dashboard-notice-recipient/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/dashboard/dashboard-notice-recipient/{id}": {
    "get": {
      "operationId": "getDashboardNoticeRecipient",
      "summary": "Get Dashboard Notice Recipient",
      "description": "Retrieves a single instance of `dashboardNoticeRecipient`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'dashboardNoticeRecipient' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'dashboardNoticeRecipient' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/dashboardNoticeRecipient"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "dashboardNoticeRecipient",
                      "id": "1",
                      "attributes": {
                        "status": "UNREAD"
                      },
                      "relationships": {
                        "notice": {
                          "data": {
                            "id": "1",
                            "type": "dashboardNotice"
                          }
                        },
                        "recipient": {
                          "data": {
                            "id": "2",
                            "type": "administrativeUser"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/dashboard/dashboard-notice-recipient/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchDashboardNoticeRecipient",
      "summary": "Patch Dashboard Notice Recipient",
      "description": "Updates an existing `dasboardNoticeRecipient`\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`dashboardNoticeRecipient`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `status` → String New status of the delivery. [example: \"UNREAD\"] \nValue constraints:\nAllowed values: \"READ\", \"UNREAD\", \"DELETED\"\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `dashboardNoticeRecipient` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "status": {
                              "type": "string",
                              "description": "String New status of the delivery. [optional] [example: \"UNREAD\"] \nValue constraints:\nAllowed values: \"READ\", \"UNREAD\", \"DELETED\""
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "dashboardNoticeRecipient",
                    "id": 1,
                    "attributes": {
                      "status": "UNREAD"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'dashboardNoticeRecipient' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/dashboardNoticeRecipient"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "dashboardNoticeRecipient",
                      "id": "1",
                      "attributes": {
                        "status": "UNREAD"
                      },
                      "relationships": {
                        "notice": {
                          "data": {
                            "id": "1",
                            "type": "dashboardNotice"
                          }
                        },
                        "recipient": {
                          "data": {
                            "id": "2",
                            "type": "administrativeUser"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/dashboard/dashboard-notice-recipient/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/dashboard/dashboard-notice/{id}": {
    "get": {
      "operationId": "getDashboardNotice",
      "summary": "Get Dashboard Notice",
      "description": "Retrieves a single instance of `dashboardNotice`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'dashboardNotice' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'dashboardNotice' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/dashboardNotice"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "dashboardNotice",
                      "id": "1",
                      "attributes": {
                        "type": "PERSONAL",
                        "source": "PERSONAL",
                        "subject": "School break announcement",
                        "body": "<p>A reminder that this year's school break will start at 10:30.</p>",
                        "isHtml": true,
                        "createdAt": {
                          "timestamp": 1514801543,
                          "iso8601": "2018-01-01T10:12:23+0000"
                        }
                      },
                      "relationships": {
                        "sender": {
                          "data": {
                            "id": "2",
                            "type": "administrativeUser"
                          }
                        },
                        "recipients": {
                          "links": {
                            "related": "/v1/dashboards/dashboard-notice/1/recipients"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/dashboard/dashboard-notice/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/dashboard/dashboard-notice/{id}/recipients": {
    "get": {
      "operationId": "getDashboardNoticeRelatedRecipients",
      "summary": "Get Dashboard Notice Related Recipients",
      "description": "Retrieves a page of the instances of ``, the relation `recipients` of `dashboardNoticeRecipient`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'dashboardNoticeRecipient' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "statuses",
          "required": false,
          "description": "String Comma-separated list of statuses to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "recipientIds",
          "required": false,
          "description": "String Comma-separated list of recipient IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'dashboardNoticeRecipient' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/dashboardNoticeRecipient"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "dashboardNoticeRecipient",
                        "id": "1",
                        "attributes": {
                          "status": "UNREAD"
                        },
                        "relationships": {
                          "notice": {
                            "data": {
                              "id": "1",
                              "type": "dashboardNotice"
                            }
                          },
                          "recipient": {
                            "data": {
                              "id": "2",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/dashboard/dashboard-notice-recipient/1"
                        }
                      },
                      {
                        "type": "dashboardNoticeRecipient",
                        "id": "1",
                        "attributes": {
                          "status": "UNREAD"
                        },
                        "relationships": {
                          "notice": {
                            "data": {
                              "id": "1",
                              "type": "dashboardNotice"
                            }
                          },
                          "recipient": {
                            "data": {
                              "id": "2",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/dashboard/dashboard-notice-recipient/1"
                        }
                      },
                      {
                        "type": "dashboardNoticeRecipient",
                        "id": "1",
                        "attributes": {
                          "status": "UNREAD"
                        },
                        "relationships": {
                          "notice": {
                            "data": {
                              "id": "1",
                              "type": "dashboardNotice"
                            }
                          },
                          "recipient": {
                            "data": {
                              "id": "2",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/dashboard/dashboard-notice-recipient/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/edupro/student-academic-report": {
    "get": {
      "operationId": "getStudentAcademicReportsEduPro",
      "summary": "Get Student Academic Reports Edu Pro",
      "description": "Retrieves a page of instances of `studentAcademicReportEduPro`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "studentIds",
          "required": false,
          "description": "String Comma-separated list of `student` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentAcademicReportEduPro' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentAcademicReportEduPro"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentAcademicReportEduPro",
                        "id": "1",
                        "attributes": {
                          "year": "2018",
                          "semester": 1,
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/edupro/student-academic-report/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "studentAcademicReportEduPro",
                        "id": "1",
                        "attributes": {
                          "year": "2018",
                          "semester": 1,
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/edupro/student-academic-report/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "studentAcademicReportEduPro",
                        "id": "1",
                        "attributes": {
                          "year": "2018",
                          "semester": 1,
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/edupro/student-academic-report/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/edupro/student-academic-report/{id}": {
    "get": {
      "operationId": "getStudentAcademicReportEduPro",
      "summary": "Get Student Academic Report Edu Pro",
      "description": "Retrieves a single instance of `studentAcademicReportEduPro`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentAcademicReportEduPro' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentAcademicReportEduPro' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentAcademicReportEduPro"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentAcademicReportEduPro",
                      "id": "1",
                      "attributes": {
                        "year": "2018",
                        "semester": 1,
                        "isActive": true
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/edupro/student-academic-report/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/edupro/student-academic-report/{id}/file": {
    "get": {
      "operationId": "getStudentAcademicReportEduProFile",
      "summary": "Get Student Academic Report Edu Pro File",
      "description": "Returns the actual file of the given EduPro student academic report",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `studentAcademicReportEduPro` which file to retrieve",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the report requested",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/ability": {
    "get": {
      "operationId": "getAbilities",
      "summary": "Get Abilities",
      "description": "Retrieves a page of instances of `ability`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'ability' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ability"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "ability",
                        "id": "1",
                        "attributes": {
                          "type": "Swimming",
                          "level": "beginner",
                          "details": "Cannot swim alone",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/ability/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "ability",
                        "id": "1",
                        "attributes": {
                          "type": "Swimming",
                          "level": "beginner",
                          "details": "Cannot swim alone",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/ability/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "ability",
                        "id": "1",
                        "attributes": {
                          "type": "Swimming",
                          "level": "beginner",
                          "details": "Cannot swim alone",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/ability/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/ability/{id}": {
    "get": {
      "operationId": "getAbility",
      "summary": "Get Ability",
      "description": "Retrieves a single instance of `ability`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'ability' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'ability' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/ability"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "ability",
                      "id": "1",
                      "attributes": {
                        "type": "Swimming",
                        "level": "beginner",
                        "details": "Cannot swim alone",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/enrolments/ability/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/academic-period": {
    "get": {
      "operationId": "getAcademicPeriods",
      "summary": "Get Academic Periods",
      "description": "Retrieves a page of instances of `academicPeriod`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "date",
          "required": false,
          "description": "Date (, eg. 20190102) A date encompassed by the academic period. [optional] [example: \"2018-01-01\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'academicPeriod' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/academicPeriod"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "academicPeriod",
                        "id": "1",
                        "attributes": {
                          "name": "Default",
                          "year": "2021",
                          "start_date": "2021-01-01",
                          "end_date": "2021-12-23"
                        },
                        "links": {
                          "self": "/v1/enrolments/academic-period/1"
                        }
                      },
                      {
                        "type": "academicPeriod",
                        "id": "1",
                        "attributes": {
                          "name": "Default",
                          "year": "2021",
                          "start_date": "2021-01-01",
                          "end_date": "2021-12-23"
                        },
                        "links": {
                          "self": "/v1/enrolments/academic-period/1"
                        }
                      },
                      {
                        "type": "academicPeriod",
                        "id": "1",
                        "attributes": {
                          "name": "Default",
                          "year": "2021",
                          "start_date": "2021-01-01",
                          "end_date": "2021-12-23"
                        },
                        "links": {
                          "self": "/v1/enrolments/academic-period/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/academic-period/{id}": {
    "get": {
      "operationId": "getAcademicPeriod",
      "summary": "Get Academic Period",
      "description": "Retrieves a single instance of `academicPeriod`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'academicPeriod' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'academicPeriod' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/academicPeriod"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "academicPeriod",
                      "id": "1",
                      "attributes": {
                        "name": "Default",
                        "year": "2021",
                        "start_date": "2021-01-01",
                        "end_date": "2021-12-23"
                      },
                      "links": {
                        "self": "/v1/enrolments/academic-period/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/academic-period/{id}/students": {
    "get": {
      "operationId": "getAcademicPeriodStudents",
      "summary": "Get Academic Period Students",
      "description": "Retrieves a page of the instances of ``, the relation `students` of `student`. Only active students with active enrollment will be included in the results.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'student' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'student' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/student"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/campus": {
    "get": {
      "operationId": "getCampuses",
      "summary": "Get Campuses",
      "description": "Retrieves a page of instances of `campus`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "schoolIds",
          "required": false,
          "description": "String Comma-separated list of `school` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'campus' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/campus"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "campus",
                        "id": "1",
                        "attributes": {
                          "name": "Test Campus",
                          "createdAt": {
                            "timestamp": 1325525696,
                            "iso8601": "2012-01-02T17:34:56+0000"
                          },
                          "isActive": true
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "2",
                              "type": "campus"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/campus/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "campus",
                        "id": "1",
                        "attributes": {
                          "name": "Test Campus",
                          "createdAt": {
                            "timestamp": 1325525696,
                            "iso8601": "2012-01-02T17:34:56+0000"
                          },
                          "isActive": true
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "2",
                              "type": "campus"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/campus/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "campus",
                        "id": "1",
                        "attributes": {
                          "name": "Test Campus",
                          "createdAt": {
                            "timestamp": 1325525696,
                            "iso8601": "2012-01-02T17:34:56+0000"
                          },
                          "isActive": true
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "2",
                              "type": "campus"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/campus/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/campus/{id}": {
    "get": {
      "operationId": "getCampus",
      "summary": "Get Campus",
      "description": "Retrieves a single instance of `campus`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'campus' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'campus' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/campus"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "campus",
                      "id": "1",
                      "attributes": {
                        "name": "Test Campus",
                        "createdAt": {
                          "timestamp": 1325525696,
                          "iso8601": "2012-01-02T17:34:56+0000"
                        },
                        "isActive": true
                      },
                      "relationships": {
                        "school": {
                          "data": {
                            "id": "2",
                            "type": "campus"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/campus/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/class": {
    "get": {
      "operationId": "getClasses",
      "summary": "Get Classes",
      "description": "Retrieves a page of instances of `class`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "subjectIds",
          "required": false,
          "description": "String Comma-separated list of subject IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'class' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/class"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "class",
                        "id": "1",
                        "attributes": {
                          "name": "First year class",
                          "identifier": "CLS01A"
                        },
                        "relationships": {
                          "teachers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              },
                              {
                                "id": "3",
                                "type": "staff"
                              }
                            ]
                          },
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/class/1/students"
                            }
                          },
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "classSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1"
                        }
                      },
                      {
                        "type": "class",
                        "id": "1",
                        "attributes": {
                          "name": "First year class",
                          "identifier": "CLS01A"
                        },
                        "relationships": {
                          "teachers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              },
                              {
                                "id": "3",
                                "type": "staff"
                              }
                            ]
                          },
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/class/1/students"
                            }
                          },
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "classSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1"
                        }
                      },
                      {
                        "type": "class",
                        "id": "1",
                        "attributes": {
                          "name": "First year class",
                          "identifier": "CLS01A"
                        },
                        "relationships": {
                          "teachers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              },
                              {
                                "id": "3",
                                "type": "staff"
                              }
                            ]
                          },
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/class/1/students"
                            }
                          },
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "classSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/class-subject": {
    "get": {
      "operationId": "getClassSubjects",
      "summary": "Get Class Subjects",
      "description": "Retrieves a page of instances of `classSubject`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'classSubject' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/classSubject"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "classSubject",
                        "id": "1",
                        "attributes": {
                          "name": "Biology"
                        },
                        "links": {
                          "self": "/v1/enrolments/class-subject/1"
                        }
                      },
                      {
                        "type": "classSubject",
                        "id": "1",
                        "attributes": {
                          "name": "Biology"
                        },
                        "links": {
                          "self": "/v1/enrolments/class-subject/1"
                        }
                      },
                      {
                        "type": "classSubject",
                        "id": "1",
                        "attributes": {
                          "name": "Biology"
                        },
                        "links": {
                          "self": "/v1/enrolments/class-subject/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/class-subject/{id}": {
    "get": {
      "operationId": "getClassSubject",
      "summary": "Get Class Subject",
      "description": "Retrieves a single instance of `classSubject`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'classSubject' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'classSubject' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/classSubject"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "classSubject",
                      "id": "1",
                      "attributes": {
                        "name": "Biology"
                      },
                      "links": {
                        "self": "/v1/enrolments/class-subject/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/class/{id}": {
    "get": {
      "operationId": "getClass",
      "summary": "Get Class",
      "description": "Retrieves a single instance of `class`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'class' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'class' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/class"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "class",
                      "id": "1",
                      "attributes": {
                        "name": "First year class",
                        "identifier": "CLS01A"
                      },
                      "relationships": {
                        "teachers": {
                          "data": [
                            {
                              "id": "1",
                              "type": "staff"
                            },
                            {
                              "id": "2",
                              "type": "staff"
                            },
                            {
                              "id": "3",
                              "type": "staff"
                            }
                          ]
                        },
                        "students": {
                          "links": {
                            "related": "/v1/enrolments/class/1/students"
                          }
                        },
                        "subject": {
                          "data": {
                            "id": "1",
                            "type": "classSubject"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/enrolment/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/class/{id}/students": {
    "get": {
      "operationId": "getClassStudents",
      "summary": "Get Class Students",
      "description": "Retrieves a page of the instances of ``, the relation `students` of `student`. Only active students with active enrollment will be included in the results.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'student' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'student' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/student"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/consent": {
    "get": {
      "operationId": "getConsents",
      "summary": "Get Consents",
      "description": "Retrieves a page of instances of `consent`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'consent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/consent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "consent",
                        "id": "1",
                        "attributes": {
                          "type": "General Consent",
                          "details": "Consent to use school resources",
                          "isInactive": false
                        },
                        "links": {
                          "self": "/v1/enrolments/consent/1"
                        }
                      },
                      {
                        "type": "consent",
                        "id": "1",
                        "attributes": {
                          "type": "General Consent",
                          "details": "Consent to use school resources",
                          "isInactive": false
                        },
                        "links": {
                          "self": "/v1/enrolments/consent/1"
                        }
                      },
                      {
                        "type": "consent",
                        "id": "1",
                        "attributes": {
                          "type": "General Consent",
                          "details": "Consent to use school resources",
                          "isInactive": false
                        },
                        "links": {
                          "self": "/v1/enrolments/consent/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postConsent",
      "summary": "Post Consent",
      "description": "Creates a new consent.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`consent`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `type` → String The type of the consent [example: \"Attending tea Wednesdays\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `details` → String Any additional details about the type of consent [example: \"Whether the student is allowed to attend the weekly tea Wednesdays with Philosophy teacher\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n * No relationships",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "String The type of the consent [example: \"Attending tea Wednesdays\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Any additional details about the type of consent [example: \"Whether the student is allowed to attend the weekly tea Wednesdays with Philosophy teacher\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "consent",
                    "attributes": {
                      "type": "Attending tea Wednesdays",
                      "details": "Whether the student is allowed to attend the weekly tea Wednesdays with Philosophy teacher"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'consent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/consent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "consent",
                      "id": "1",
                      "attributes": {
                        "type": "General Consent",
                        "details": "Consent to use school resources",
                        "isInactive": false
                      },
                      "links": {
                        "self": "/v1/enrolments/consent/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/consent/{id}": {
    "patch": {
      "operationId": "patchConsent",
      "summary": "Patch Consent",
      "description": "Updates an existing consent\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`consent`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `type` → String The type of the consent [example: \"Attending tea Wednesdays\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `details` → String Any additional details about the type of consent [example: \"Whether the student is allowed to attend the weekly tea Wednesdays with Philosophy teacher\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `futureAbsence` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "String The type of the consent [optional] [example: \"Attending tea Wednesdays\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Any additional details about the type of consent [optional] [example: \"Whether the student is allowed to attend the weekly tea Wednesdays with Philosophy teacher\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "consent",
                    "id": 1,
                    "attributes": {
                      "type": "Attending tea Wednesdays",
                      "details": "Whether the student is allowed to attend the weekly tea Wednesdays with Philosophy teacher"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'consent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/consent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "consent",
                      "id": "1",
                      "attributes": {
                        "type": "General Consent",
                        "details": "Consent to use school resources",
                        "isInactive": false
                      },
                      "links": {
                        "self": "/v1/enrolments/consent/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getConsent",
      "summary": "Get Consent",
      "description": "Retrieves a single instance of `consent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'consent' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'consent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/consent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "consent",
                      "id": "1",
                      "attributes": {
                        "type": "General Consent",
                        "details": "Consent to use school resources",
                        "isInactive": false
                      },
                      "links": {
                        "self": "/v1/enrolments/consent/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteConsent",
      "summary": "Delete Consent",
      "description": "Deletes consent by ID",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the consent to delete. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/enrolments/disability-other": {
    "get": {
      "operationId": "getDisabilityOthers",
      "summary": "Get Disability Others",
      "description": "Retrieves a page of instances of `disabilityOther`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "personIds",
          "required": false,
          "description": "String Comma-separated list of `person` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'disabilityOther' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/disabilityOther"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "disabilityOther",
                        "id": "1",
                        "attributes": {
                          "name": "Missing Limb",
                          "details": "Missing left leg from the knee down.",
                          "receivesFunding": false,
                          "hasCarePlanProvided": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/disability-other/1"
                        }
                      },
                      {
                        "type": "disabilityOther",
                        "id": "1",
                        "attributes": {
                          "name": "Missing Limb",
                          "details": "Missing left leg from the knee down.",
                          "receivesFunding": false,
                          "hasCarePlanProvided": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/disability-other/1"
                        }
                      },
                      {
                        "type": "disabilityOther",
                        "id": "1",
                        "attributes": {
                          "name": "Missing Limb",
                          "details": "Missing left leg from the knee down.",
                          "receivesFunding": false,
                          "hasCarePlanProvided": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/disability-other/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/disability-other/{id}": {
    "get": {
      "operationId": "getDisabilityOther",
      "summary": "Get Disability Other",
      "description": "Retrieves a single instance of `disabilityOther`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'disabilityOther' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'disabilityOther' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/disabilityOther"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "disabilityOther",
                      "id": "1",
                      "attributes": {
                        "name": "Missing Limb",
                        "details": "Missing left leg from the knee down.",
                        "receivesFunding": false,
                        "hasCarePlanProvided": false
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/disability-other/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/disability-other/{id}/care-plan-file": {
    "get": {
      "operationId": "getDisabilityOtherCarePlanFile",
      "summary": "Get Disability Other Care Plan File",
      "description": "Returns the care plan file of the specified disability",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the disability which care plan file to retrieve. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/doctor": {
    "get": {
      "operationId": "getDoctors",
      "summary": "Get Doctors",
      "description": "Retrieves a page of instances of `doctor`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: patient. [optional] [default: null] [example: \"patient\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'doctor' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/doctor"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "doctor",
                        "id": "1",
                        "attributes": {
                          "type": "gp",
                          "name": "Gloria McDoe",
                          "practiceName": "McPractice",
                          "address": "6 Bayley Street TANTARABOO",
                          "phone": "(03) 8070 5665",
                          "consentToContact": false
                        },
                        "relationships": {
                          "patient": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/doctor/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/doctor/1",
                          "patient": "/v1/enrolments/doctor/1/person"
                        }
                      },
                      {
                        "type": "doctor",
                        "id": "1",
                        "attributes": {
                          "type": "gp",
                          "name": "Gloria McDoe",
                          "practiceName": "McPractice",
                          "address": "6 Bayley Street TANTARABOO",
                          "phone": "(03) 8070 5665",
                          "consentToContact": false
                        },
                        "relationships": {
                          "patient": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/doctor/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/doctor/1",
                          "patient": "/v1/enrolments/doctor/1/person"
                        }
                      },
                      {
                        "type": "doctor",
                        "id": "1",
                        "attributes": {
                          "type": "gp",
                          "name": "Gloria McDoe",
                          "practiceName": "McPractice",
                          "address": "6 Bayley Street TANTARABOO",
                          "phone": "(03) 8070 5665",
                          "consentToContact": false
                        },
                        "relationships": {
                          "patient": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/doctor/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/doctor/1",
                          "patient": "/v1/enrolments/doctor/1/person"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/doctor/{id}": {
    "get": {
      "operationId": "getDoctor",
      "summary": "Get Doctor",
      "description": "Retrieves a single instance of `doctor`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'doctor' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: patient. [optional] [default: null] [example: \"patient\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'doctor' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/doctor"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "doctor",
                      "id": "1",
                      "attributes": {
                        "type": "gp",
                        "name": "Gloria McDoe",
                        "practiceName": "McPractice",
                        "address": "6 Bayley Street TANTARABOO",
                        "phone": "(03) 8070 5665",
                        "consentToContact": false
                      },
                      "relationships": {
                        "patient": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          },
                          "links": {
                            "related": "/v1/enrolments/doctor/1/person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/doctor/1",
                        "patient": "/v1/enrolments/doctor/1/person"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/doctor/{id}/person": {
    "get": {
      "operationId": "getDoctorPerson",
      "summary": "Get Doctor Person",
      "description": "Retrieves a single instance of ``, the relation `relatedPerson` of `person`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'person' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryHousehold, studentPrimaryEnrolment, staff, student, contactDetails, otherHouseholds, studentContacts, studentTenants, prescribedMedication, emails, phoneNumbers, givenConsents, givenConsentLinks, emergencyContactLinks, abilities, additionalFields. [optional] [default: null] [example: \"primaryHousehold\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'person' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/person"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "person",
                      "id": "1",
                      "attributes": {
                        "externalId": null,
                        "refId": null,
                        "contactCode": null,
                        "name": "John",
                        "surname": "Doe",
                        "firstName": "John",
                        "middleNames": "Franz Stephen",
                        "lastName": "Doe",
                        "legalLastName": null,
                        "preferredName": null,
                        "email": "john.doe@example.com",
                        "title": null,
                        "givenNames": "Franz Stephen",
                        "gender": "Other",
                        "genderCode": "Other",
                        "dateOfBirth": null,
                        "crn": null,
                        "languageSpokenAtHome": null,
                        "languageSpokenAtHomeCode": null,
                        "countryOfCitizenship": null,
                        "religion": null,
                        "residentialStatus": null,
                        "isDeceased": false,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "primaryHousehold": {
                          "links": {
                            "related": "/v1/enrolments/person/1/primary-household"
                          }
                        },
                        "staff": {
                          "links": {
                            "related": "/v1/enrolments/person/1/staff"
                          }
                        },
                        "student": {
                          "links": {
                            "related": "/v1/enrolments/person/1/student"
                          }
                        },
                        "contactDetails": {
                          "links": {
                            "related": "/v1/enrolments/person/1/person-contact-details"
                          }
                        },
                        "otherHouseholds": {
                          "links": {
                            "related": "/v1/enrolments/person/1/other-households"
                          }
                        },
                        "studentContacts": {
                          "links": {
                            "related": "/v1/enrolments/person/1/student-contacts"
                          }
                        },
                        "medicalSummary": {
                          "links": {
                            "related": "/v1/enrolments/person/1/medical-summary"
                          }
                        },
                        "medicalConditions": {
                          "links": {
                            "related": "/v1/enrolments/person/1/medical-conditions"
                          }
                        },
                        "prescribedMedication": {
                          "links": {
                            "related": "/v1/enrolments/person/1/prescribed-medications"
                          }
                        },
                        "doctors": {
                          "links": {
                            "related": "/v1/enrolments/person/1/doctors"
                          }
                        },
                        "associatedStudents": {
                          "links": {
                            "related": "/v1/enrolments/person/1/associated-students"
                          }
                        },
                        "givenConsents": {
                          "links": {
                            "related": "/v1/enrolments/person/1/given-consents"
                          }
                        },
                        "givenConsentLinks": {
                          "links": {
                            "related": "/v1/enrolments/person/1/given-consent-links"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person/1",
                        "primaryHousehold": "/v1/enrolments/person/1/primary-household",
                        "otherHouseholds": "/v1/enrolments/person/1/other-households",
                        "staff": "/v1/enrolments/person/1/staff",
                        "student": "/v1/enrolments/person/1/student",
                        "studentContacts": "/v1/enrolments/person/1/student-contacts",
                        "associatedStudents": "/v1/enrolments/person/1/associated-students",
                        "medicalSummary": "/v1/enrolments/person/1/medical-summary",
                        "medicalConditions": "/v1/enrolments/person/1/medical-conditions",
                        "prescribedMedications": "/v1/enrolments/person/1/prescribed-medications",
                        "doctors": "/v1/enrolments/person/1/doctors"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/emergency-contact-link": {
    "get": {
      "operationId": "getEmergencyContactLinks",
      "summary": "Get Emergency Contact Links",
      "description": "Retrieves a page of instances of `emergencyContactLink`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'emergencyContactLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/emergencyContactLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "emergencyContactLink",
                        "id": "1",
                        "attributes": {
                          "priority": 1,
                          "name": "Jane McDane",
                          "phone": "+48 123123123",
                          "altPhone": "",
                          "address": "Villagestreet 73/2, Streetville",
                          "relationship": "Legal guardian"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          },
                          "personToContact": {
                            "data": {
                              "id": "3",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/emergency-contact-link/1"
                        }
                      },
                      {
                        "type": "emergencyContactLink",
                        "id": "1",
                        "attributes": {
                          "priority": 1,
                          "name": "Jane McDane",
                          "phone": "+48 123123123",
                          "altPhone": "",
                          "address": "Villagestreet 73/2, Streetville",
                          "relationship": "Legal guardian"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          },
                          "personToContact": {
                            "data": {
                              "id": "3",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/emergency-contact-link/1"
                        }
                      },
                      {
                        "type": "emergencyContactLink",
                        "id": "1",
                        "attributes": {
                          "priority": 1,
                          "name": "Jane McDane",
                          "phone": "+48 123123123",
                          "altPhone": "",
                          "address": "Villagestreet 73/2, Streetville",
                          "relationship": "Legal guardian"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          },
                          "personToContact": {
                            "data": {
                              "id": "3",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/emergency-contact-link/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/emergency-contact-link/{id}": {
    "get": {
      "operationId": "getEmergencyContactLink",
      "summary": "Get Emergency Contact Link",
      "description": "Retrieves a single instance of `emergencyContactLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'emergencyContactLink' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'emergencyContactLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/emergencyContactLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "emergencyContactLink",
                      "id": "1",
                      "attributes": {
                        "priority": 1,
                        "name": "Jane McDane",
                        "phone": "+48 123123123",
                        "altPhone": "",
                        "address": "Villagestreet 73/2, Streetville",
                        "relationship": "Legal guardian"
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "2",
                            "type": "person"
                          }
                        },
                        "personToContact": {
                          "data": {
                            "id": "3",
                            "type": "person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/emergency-contact-link/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/enrolment": {
    "get": {
      "operationId": "getEnrolments",
      "summary": "Get Enrolments",
      "description": "Retrieves a page of instances of `enrolment`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, house, rollclass, classes, campus. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "studentIds",
          "required": false,
          "description": "String Comma-separated list of `student` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "rollclassIds",
          "required": false,
          "description": "String Comma-separated list of `rollclass` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "yearLevelIds",
          "required": false,
          "description": "String Comma-separated list of `yearLevel` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "houseIds",
          "required": false,
          "description": "String Comma-separated list of `house` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "statuses",
          "required": false,
          "description": "String Comma-separated list of statuses to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'enrolment' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/enrolment"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "enrolment",
                        "id": "1",
                        "attributes": {
                          "startDate": "2018-09-01T00:00:00+00:00",
                          "endDate": null,
                          "status": "active",
                          "school": null,
                          "schoolYear": null,
                          "rollClass": null,
                          "isBoarding": false,
                          "boardingHouse": null,
                          "tutorGroup": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "house": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/house"
                            }
                          },
                          "rollclass": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/rollclass"
                            }
                          },
                          "classes": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/classes"
                            }
                          },
                          "academicPeriod": {
                            "data": {
                              "id": "1",
                              "type": "academicPeriod"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1",
                          "house": "/v1/enrolments/enrolment/1/house",
                          "classes": "/v1/enrolments/enrolment/1/classes",
                          "rollclass": "/v1/enrolments/enrolment/1/rollclass"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "enrolment",
                        "id": "1",
                        "attributes": {
                          "startDate": "2018-09-01T00:00:00+00:00",
                          "endDate": null,
                          "status": "active",
                          "school": null,
                          "schoolYear": null,
                          "rollClass": null,
                          "isBoarding": false,
                          "boardingHouse": null,
                          "tutorGroup": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "house": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/house"
                            }
                          },
                          "rollclass": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/rollclass"
                            }
                          },
                          "classes": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/classes"
                            }
                          },
                          "academicPeriod": {
                            "data": {
                              "id": "1",
                              "type": "academicPeriod"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1",
                          "house": "/v1/enrolments/enrolment/1/house",
                          "classes": "/v1/enrolments/enrolment/1/classes",
                          "rollclass": "/v1/enrolments/enrolment/1/rollclass"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "enrolment",
                        "id": "1",
                        "attributes": {
                          "startDate": "2018-09-01T00:00:00+00:00",
                          "endDate": null,
                          "status": "active",
                          "school": null,
                          "schoolYear": null,
                          "rollClass": null,
                          "isBoarding": false,
                          "boardingHouse": null,
                          "tutorGroup": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "house": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/house"
                            }
                          },
                          "rollclass": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/rollclass"
                            }
                          },
                          "classes": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/classes"
                            }
                          },
                          "academicPeriod": {
                            "data": {
                              "id": "1",
                              "type": "academicPeriod"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1",
                          "house": "/v1/enrolments/enrolment/1/house",
                          "classes": "/v1/enrolments/enrolment/1/classes",
                          "rollclass": "/v1/enrolments/enrolment/1/rollclass"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/enrolment-class-link": {
    "get": {
      "operationId": "getEnrolmentClassLinks",
      "summary": "Get Enrolment Class Links",
      "description": "Retrieves a page of instances of `enrolmentClassLink`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "enrolmentIds",
          "required": false,
          "description": "String Comma-separated list of `enrolment` relation IDs. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "classIds",
          "required": false,
          "description": "String Comma-separated list of `class` relation IDs. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'enrolmentClassLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/enrolmentClassLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "enrolmentClassLink",
                        "id": "1",
                        "relationships": {
                          "enrolment": {
                            "data": {
                              "id": "2",
                              "type": "enrolment"
                            }
                          },
                          "class": {
                            "data": {
                              "id": "3",
                              "type": "class"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment-class-link/1"
                        }
                      },
                      {
                        "type": "enrolmentClassLink",
                        "id": "1",
                        "relationships": {
                          "enrolment": {
                            "data": {
                              "id": "2",
                              "type": "enrolment"
                            }
                          },
                          "class": {
                            "data": {
                              "id": "3",
                              "type": "class"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment-class-link/1"
                        }
                      },
                      {
                        "type": "enrolmentClassLink",
                        "id": "1",
                        "relationships": {
                          "enrolment": {
                            "data": {
                              "id": "2",
                              "type": "enrolment"
                            }
                          },
                          "class": {
                            "data": {
                              "id": "3",
                              "type": "class"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment-class-link/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/enrolment-class-link/{id}": {
    "get": {
      "operationId": "getEnrolmentClassLink",
      "summary": "Get Enrolment Class Link",
      "description": "Retrieves a single instance of `enrolmentClassLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'enrolmentClassLink' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'enrolmentClassLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/enrolmentClassLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "enrolmentClassLink",
                      "id": "1",
                      "relationships": {
                        "enrolment": {
                          "data": {
                            "id": "2",
                            "type": "enrolment"
                          }
                        },
                        "class": {
                          "data": {
                            "id": "3",
                            "type": "class"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/enrolment-class-link/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/enrolment-priority": {
    "get": {
      "operationId": "getEnrolmentPriorities",
      "summary": "Get Enrolment Priorities",
      "description": "Retrieves a page of instances of `enrolmentPriority`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'enrolmentPriority' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/enrolmentPriority"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "enrolmentPriority",
                        "id": "1",
                        "attributes": {
                          "name": "Principal's Discretion",
                          "code": "7",
                          "description": "",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment-priority/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "enrolmentPriority",
                        "id": "1",
                        "attributes": {
                          "name": "Principal's Discretion",
                          "code": "7",
                          "description": "",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment-priority/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "enrolmentPriority",
                        "id": "1",
                        "attributes": {
                          "name": "Principal's Discretion",
                          "code": "7",
                          "description": "",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment-priority/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/enrolment-priority/{id}": {
    "get": {
      "operationId": "getEnrolmentPriority",
      "summary": "Get Enrolment Priority",
      "description": "Retrieves a single instance of `enrolmentPriority`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'enrolmentPriority' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'enrolmentPriority' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/enrolmentPriority"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "enrolmentPriority",
                      "id": "1",
                      "attributes": {
                        "name": "Principal's Discretion",
                        "code": "7",
                        "description": "",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/enrolments/enrolment-priority/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/enrolment/{id}": {
    "patch": {
      "operationId": "patchEnrolment",
      "summary": "Patch Enrolment",
      "description": "Updates an existing enrolment\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`enrolment`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `isBoarding` → Boolean Whether this enrolment includes boarding [example: TRUE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `enrolment` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "isBoarding": {
                              "type": "boolean",
                              "description": "Boolean Whether this enrolment includes boarding [optional] [example: TRUE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "enrolment",
                    "id": 1,
                    "attributes": {
                      "isBoarding": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'enrolment' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/enrolment"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "enrolment",
                      "id": "1",
                      "attributes": {
                        "startDate": "2018-09-01T00:00:00+00:00",
                        "endDate": null,
                        "status": "active",
                        "school": null,
                        "schoolYear": null,
                        "rollClass": null,
                        "isBoarding": false,
                        "boardingHouse": null,
                        "tutorGroup": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        },
                        "house": {
                          "links": {
                            "related": "/v1/enrolments/enrolment/1/house"
                          }
                        },
                        "rollclass": {
                          "links": {
                            "related": "/v1/enrolments/enrolment/1/rollclass"
                          }
                        },
                        "classes": {
                          "links": {
                            "related": "/v1/enrolments/enrolment/1/classes"
                          }
                        },
                        "academicPeriod": {
                          "data": {
                            "id": "1",
                            "type": "academicPeriod"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/enrolment/1",
                        "house": "/v1/enrolments/enrolment/1/house",
                        "classes": "/v1/enrolments/enrolment/1/classes",
                        "rollclass": "/v1/enrolments/enrolment/1/rollclass"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getEnrolment",
      "summary": "Get Enrolment",
      "description": "Retrieves a single instance of `enrolment`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'enrolment' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, house, rollclass, classes, campus. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'enrolment' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/enrolment"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "enrolment",
                      "id": "1",
                      "attributes": {
                        "startDate": "2018-09-01T00:00:00+00:00",
                        "endDate": null,
                        "status": "active",
                        "school": null,
                        "schoolYear": null,
                        "rollClass": null,
                        "isBoarding": false,
                        "boardingHouse": null,
                        "tutorGroup": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        },
                        "house": {
                          "links": {
                            "related": "/v1/enrolments/enrolment/1/house"
                          }
                        },
                        "rollclass": {
                          "links": {
                            "related": "/v1/enrolments/enrolment/1/rollclass"
                          }
                        },
                        "classes": {
                          "links": {
                            "related": "/v1/enrolments/enrolment/1/classes"
                          }
                        },
                        "academicPeriod": {
                          "data": {
                            "id": "1",
                            "type": "academicPeriod"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/enrolment/1",
                        "house": "/v1/enrolments/enrolment/1/house",
                        "classes": "/v1/enrolments/enrolment/1/classes",
                        "rollclass": "/v1/enrolments/enrolment/1/rollclass"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/enrolment/{id}/classes": {
    "get": {
      "operationId": "getEnrolmentClasses",
      "summary": "Get Enrolment Classes",
      "description": "Retrieves a page of the instances of ``, the relation `classes` of `class`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'class' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'class' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/class"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "class",
                        "id": "1",
                        "attributes": {
                          "name": "First year class",
                          "identifier": "CLS01A"
                        },
                        "relationships": {
                          "teachers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              },
                              {
                                "id": "3",
                                "type": "staff"
                              }
                            ]
                          },
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/class/1/students"
                            }
                          },
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "classSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1"
                        }
                      },
                      {
                        "type": "class",
                        "id": "1",
                        "attributes": {
                          "name": "First year class",
                          "identifier": "CLS01A"
                        },
                        "relationships": {
                          "teachers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              },
                              {
                                "id": "3",
                                "type": "staff"
                              }
                            ]
                          },
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/class/1/students"
                            }
                          },
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "classSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1"
                        }
                      },
                      {
                        "type": "class",
                        "id": "1",
                        "attributes": {
                          "name": "First year class",
                          "identifier": "CLS01A"
                        },
                        "relationships": {
                          "teachers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              },
                              {
                                "id": "3",
                                "type": "staff"
                              }
                            ]
                          },
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/class/1/students"
                            }
                          },
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "classSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/enrolment/{id}/house": {
    "get": {
      "operationId": "getEnrolmentHouse",
      "summary": "Get Enrolment House",
      "description": "Retrieves a single instance of ``, the relation `house` of `house`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'house' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'house' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/house"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "house",
                      "id": "1",
                      "attributes": {
                        "name": "Sentral House",
                        "sequence": 1
                      },
                      "relationships": {
                        "students": {
                          "links": {
                            "related": "/v1/enrolments/house/1/students"
                          }
                        },
                        "school": {
                          "data": {
                            "id": "1",
                            "type": "school"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/house/1",
                        "students": "/v1/enrolments/house/1/students"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/enrolment/{id}/rollclass": {
    "get": {
      "operationId": "getEnrolmentRollclass",
      "summary": "Get Enrolment Rollclass",
      "description": "Retrieves a single instance of ``, the relation `rollclass` of `rollclass`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'rollclass' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'rollclass' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/rollclass"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "rollclass",
                      "id": "1",
                      "attributes": {
                        "name": "1A",
                        "isPastoralCare": false,
                        "pastoral_care": false,
                        "refId": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "teacher": {
                          "data": {
                            "id": "1",
                            "type": "staff"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/rollclass/1",
                        "teacher": "/v1/enrolments/staff/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/flag": {
    "get": {
      "operationId": "getFlags",
      "summary": "Get Flags",
      "description": "Retrieves a page of instances of `flag`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: school. [optional] [default: null] [example: \"school\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'flag' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/flag"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "flag",
                        "id": "1",
                        "attributes": {
                          "internalName": "hasSchoolProblems",
                          "name": "Has school problems",
                          "color": "FF8888",
                          "showInSentral": true,
                          "showInFees": true,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/flag/1",
                          "school": "/v1/enrolments/flag/1/school"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "flag",
                        "id": "1",
                        "attributes": {
                          "internalName": "hasSchoolProblems",
                          "name": "Has school problems",
                          "color": "FF8888",
                          "showInSentral": true,
                          "showInFees": true,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/flag/1",
                          "school": "/v1/enrolments/flag/1/school"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "flag",
                        "id": "1",
                        "attributes": {
                          "internalName": "hasSchoolProblems",
                          "name": "Has school problems",
                          "color": "FF8888",
                          "showInSentral": true,
                          "showInFees": true,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/flag/1",
                          "school": "/v1/enrolments/flag/1/school"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/flag/{id}": {
    "get": {
      "operationId": "getFlag",
      "summary": "Get Flag",
      "description": "Retrieves a single instance of `flag`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'flag' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: school. [optional] [default: null] [example: \"school\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'flag' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/flag"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "flag",
                      "id": "1",
                      "attributes": {
                        "internalName": "hasSchoolProblems",
                        "name": "Has school problems",
                        "color": "FF8888",
                        "showInSentral": true,
                        "showInFees": true,
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/enrolments/flag/1",
                        "school": "/v1/enrolments/flag/1/school"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/flag/{id}/school": {
    "get": {
      "operationId": "getFlagSchool",
      "summary": "Get Flag School",
      "description": "Retrieves a single instance of ``, the relation `school` of `school`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'school' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: tenant. [optional] [default: null] [example: \"tenant\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'school' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/school"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "school",
                      "id": "1",
                      "attributes": {
                        "name": "School 1",
                        "schoolCode": "a7bd8e",
                        "sequence": 1,
                        "isActive": true
                      },
                      "relationships": {
                        "tenant": {
                          "data": {
                            "id": "1",
                            "type": "tenant"
                          },
                          "links": {
                            "related": "/v1/enrolments/school/1/tenant"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/school/1",
                        "tenant": "/v1/enrolments/school/1/tenant"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/house": {
    "get": {
      "operationId": "getHouses",
      "summary": "Get Houses",
      "description": "Retrieves a page of instances of `house`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "schoolIds",
          "required": false,
          "description": "String Comma-separated list of `school` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'house' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/house"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "house",
                        "id": "1",
                        "attributes": {
                          "name": "Sentral House",
                          "sequence": 1
                        },
                        "relationships": {
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/house/1/students"
                            }
                          },
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/house/1",
                          "students": "/v1/enrolments/house/1/students"
                        }
                      },
                      {
                        "type": "house",
                        "id": "1",
                        "attributes": {
                          "name": "Sentral House",
                          "sequence": 1
                        },
                        "relationships": {
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/house/1/students"
                            }
                          },
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/house/1",
                          "students": "/v1/enrolments/house/1/students"
                        }
                      },
                      {
                        "type": "house",
                        "id": "1",
                        "attributes": {
                          "name": "Sentral House",
                          "sequence": 1
                        },
                        "relationships": {
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/house/1/students"
                            }
                          },
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/house/1",
                          "students": "/v1/enrolments/house/1/students"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/house/{id}": {
    "get": {
      "operationId": "getHouse",
      "summary": "Get House",
      "description": "Retrieves a single instance of `house`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'house' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'house' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/house"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "house",
                      "id": "1",
                      "attributes": {
                        "name": "Sentral House",
                        "sequence": 1
                      },
                      "relationships": {
                        "students": {
                          "links": {
                            "related": "/v1/enrolments/house/1/students"
                          }
                        },
                        "school": {
                          "data": {
                            "id": "1",
                            "type": "school"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/house/1",
                        "students": "/v1/enrolments/house/1/students"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/house/{id}/students": {
    "get": {
      "operationId": "getHouseStudents",
      "summary": "Get House Students",
      "description": "Retrieves a page of the instances of ``, the relation `students` of `student`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'student' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'student' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/student"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/household": {
    "get": {
      "operationId": "getHouseholds",
      "summary": "Get Households",
      "description": "Retrieves a page of instances of `household`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: addresses. [optional] [default: null] [example: \"addresses\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'household' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/household"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "household",
                        "id": "1",
                        "attributes": {
                          "address": null,
                          "mailingTitle": ""
                        },
                        "links": {
                          "self": "/v1/enrolments/household/1",
                          "addresses": "/v1/enrolments/household/1/addresses"
                        }
                      },
                      {
                        "type": "household",
                        "id": "1",
                        "attributes": {
                          "address": null,
                          "mailingTitle": ""
                        },
                        "links": {
                          "self": "/v1/enrolments/household/1",
                          "addresses": "/v1/enrolments/household/1/addresses"
                        }
                      },
                      {
                        "type": "household",
                        "id": "1",
                        "attributes": {
                          "address": null,
                          "mailingTitle": ""
                        },
                        "links": {
                          "self": "/v1/enrolments/household/1",
                          "addresses": "/v1/enrolments/household/1/addresses"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/household-address": {
    "get": {
      "operationId": "getHouseholdAddresses",
      "summary": "Get Household Addresses",
      "description": "Retrieves a page of instances of `householdAddress`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'householdAddress' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/householdAddress"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "householdAddress",
                        "id": "1",
                        "attributes": {
                          "type": null,
                          "lotNumber": "14",
                          "unitNumber": "7",
                          "streetNumber": "62",
                          "houseNumber": "3",
                          "blockNumber": "1",
                          "floorNumber": "5",
                          "propertyName": "Campus House",
                          "streetName": "Chatsworth Drive",
                          "streetType": "road",
                          "addressLine1": 1,
                          "addressLine2": 1,
                          "addressLine3": null,
                          "suburb": "SYDNEY OLYMPIC PARK, NSW",
                          "section": "n/a",
                          "city": "Sydney",
                          "state": "Western Australia",
                          "country": "Australia",
                          "postcode": "2127",
                          "comment": "Can't access by boat",
                          "locality": "n/a",
                          "province": "n/a",
                          "startDate": "2018-01-01",
                          "endDate": "2018-02-03",
                          "mailingTitle": "Mr.",
                          "isBillingAddress": false,
                          "isValid": true,
                          "isSimpleAddress": false
                        },
                        "relationships": {
                          "household": {
                            "data": {
                              "id": "1",
                              "type": "house"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/household-address/1"
                        }
                      },
                      {
                        "type": "householdAddress",
                        "id": "1",
                        "attributes": {
                          "type": null,
                          "lotNumber": "14",
                          "unitNumber": "7",
                          "streetNumber": "62",
                          "houseNumber": "3",
                          "blockNumber": "1",
                          "floorNumber": "5",
                          "propertyName": "Campus House",
                          "streetName": "Chatsworth Drive",
                          "streetType": "road",
                          "addressLine1": 1,
                          "addressLine2": 1,
                          "addressLine3": null,
                          "suburb": "SYDNEY OLYMPIC PARK, NSW",
                          "section": "n/a",
                          "city": "Sydney",
                          "state": "Western Australia",
                          "country": "Australia",
                          "postcode": "2127",
                          "comment": "Can't access by boat",
                          "locality": "n/a",
                          "province": "n/a",
                          "startDate": "2018-01-01",
                          "endDate": "2018-02-03",
                          "mailingTitle": "Mr.",
                          "isBillingAddress": false,
                          "isValid": true,
                          "isSimpleAddress": false
                        },
                        "relationships": {
                          "household": {
                            "data": {
                              "id": "1",
                              "type": "house"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/household-address/1"
                        }
                      },
                      {
                        "type": "householdAddress",
                        "id": "1",
                        "attributes": {
                          "type": null,
                          "lotNumber": "14",
                          "unitNumber": "7",
                          "streetNumber": "62",
                          "houseNumber": "3",
                          "blockNumber": "1",
                          "floorNumber": "5",
                          "propertyName": "Campus House",
                          "streetName": "Chatsworth Drive",
                          "streetType": "road",
                          "addressLine1": 1,
                          "addressLine2": 1,
                          "addressLine3": null,
                          "suburb": "SYDNEY OLYMPIC PARK, NSW",
                          "section": "n/a",
                          "city": "Sydney",
                          "state": "Western Australia",
                          "country": "Australia",
                          "postcode": "2127",
                          "comment": "Can't access by boat",
                          "locality": "n/a",
                          "province": "n/a",
                          "startDate": "2018-01-01",
                          "endDate": "2018-02-03",
                          "mailingTitle": "Mr.",
                          "isBillingAddress": false,
                          "isValid": true,
                          "isSimpleAddress": false
                        },
                        "relationships": {
                          "household": {
                            "data": {
                              "id": "1",
                              "type": "house"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/household-address/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/household-address/{id}": {
    "get": {
      "operationId": "getHousehouldAddress",
      "summary": "Get Househould Address",
      "description": "Retrieves a single instance of `householdAddress`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'householdAddress' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'householdAddress' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/householdAddress"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "householdAddress",
                      "id": "1",
                      "attributes": {
                        "type": null,
                        "lotNumber": "14",
                        "unitNumber": "7",
                        "streetNumber": "62",
                        "houseNumber": "3",
                        "blockNumber": "1",
                        "floorNumber": "5",
                        "propertyName": "Campus House",
                        "streetName": "Chatsworth Drive",
                        "streetType": "road",
                        "addressLine1": 1,
                        "addressLine2": 1,
                        "addressLine3": null,
                        "suburb": "SYDNEY OLYMPIC PARK, NSW",
                        "section": "n/a",
                        "city": "Sydney",
                        "state": "Western Australia",
                        "country": "Australia",
                        "postcode": "2127",
                        "comment": "Can't access by boat",
                        "locality": "n/a",
                        "province": "n/a",
                        "startDate": "2018-01-01",
                        "endDate": "2018-02-03",
                        "mailingTitle": "Mr.",
                        "isBillingAddress": false,
                        "isValid": true,
                        "isSimpleAddress": false
                      },
                      "relationships": {
                        "household": {
                          "data": {
                            "id": "1",
                            "type": "house"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/household-address/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/household/{id}": {
    "get": {
      "operationId": "getHousehold",
      "summary": "Get Household",
      "description": "Retrieves a single instance of `household`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'household' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: addresses. [optional] [default: null] [example: \"addresses\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'household' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/household"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "household",
                      "id": "1",
                      "attributes": {
                        "address": null,
                        "mailingTitle": ""
                      },
                      "links": {
                        "self": "/v1/enrolments/household/1",
                        "addresses": "/v1/enrolments/household/1/addresses"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/household/{id}/addresses": {
    "get": {
      "operationId": "getHouseholdRelatedAddresses",
      "summary": "Get Household Related Addresses",
      "description": "Retrieves all of the instances of ``, the relation `addresses` of `householdAddress`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'householdAddress' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'householdAddress' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/householdAddress"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "householdAddress",
                        "id": "1",
                        "attributes": {
                          "type": null,
                          "lotNumber": "14",
                          "unitNumber": "7",
                          "streetNumber": "62",
                          "houseNumber": "3",
                          "blockNumber": "1",
                          "floorNumber": "5",
                          "propertyName": "Campus House",
                          "streetName": "Chatsworth Drive",
                          "streetType": "road",
                          "addressLine1": 1,
                          "addressLine2": 1,
                          "addressLine3": null,
                          "suburb": "SYDNEY OLYMPIC PARK, NSW",
                          "section": "n/a",
                          "city": "Sydney",
                          "state": "Western Australia",
                          "country": "Australia",
                          "postcode": "2127",
                          "comment": "Can't access by boat",
                          "locality": "n/a",
                          "province": "n/a",
                          "startDate": "2018-01-01",
                          "endDate": "2018-02-03",
                          "mailingTitle": "Mr.",
                          "isBillingAddress": false,
                          "isValid": true,
                          "isSimpleAddress": false
                        },
                        "relationships": {
                          "household": {
                            "data": {
                              "id": "1",
                              "type": "house"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/household-address/1"
                        }
                      },
                      {
                        "type": "householdAddress",
                        "id": "1",
                        "attributes": {
                          "type": null,
                          "lotNumber": "14",
                          "unitNumber": "7",
                          "streetNumber": "62",
                          "houseNumber": "3",
                          "blockNumber": "1",
                          "floorNumber": "5",
                          "propertyName": "Campus House",
                          "streetName": "Chatsworth Drive",
                          "streetType": "road",
                          "addressLine1": 1,
                          "addressLine2": 1,
                          "addressLine3": null,
                          "suburb": "SYDNEY OLYMPIC PARK, NSW",
                          "section": "n/a",
                          "city": "Sydney",
                          "state": "Western Australia",
                          "country": "Australia",
                          "postcode": "2127",
                          "comment": "Can't access by boat",
                          "locality": "n/a",
                          "province": "n/a",
                          "startDate": "2018-01-01",
                          "endDate": "2018-02-03",
                          "mailingTitle": "Mr.",
                          "isBillingAddress": false,
                          "isValid": true,
                          "isSimpleAddress": false
                        },
                        "relationships": {
                          "household": {
                            "data": {
                              "id": "1",
                              "type": "house"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/household-address/1"
                        }
                      },
                      {
                        "type": "householdAddress",
                        "id": "1",
                        "attributes": {
                          "type": null,
                          "lotNumber": "14",
                          "unitNumber": "7",
                          "streetNumber": "62",
                          "houseNumber": "3",
                          "blockNumber": "1",
                          "floorNumber": "5",
                          "propertyName": "Campus House",
                          "streetName": "Chatsworth Drive",
                          "streetType": "road",
                          "addressLine1": 1,
                          "addressLine2": 1,
                          "addressLine3": null,
                          "suburb": "SYDNEY OLYMPIC PARK, NSW",
                          "section": "n/a",
                          "city": "Sydney",
                          "state": "Western Australia",
                          "country": "Australia",
                          "postcode": "2127",
                          "comment": "Can't access by boat",
                          "locality": "n/a",
                          "province": "n/a",
                          "startDate": "2018-01-01",
                          "endDate": "2018-02-03",
                          "mailingTitle": "Mr.",
                          "isBillingAddress": false,
                          "isValid": true,
                          "isSimpleAddress": false
                        },
                        "relationships": {
                          "household": {
                            "data": {
                              "id": "1",
                              "type": "house"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/household-address/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition": {
    "get": {
      "operationId": "getMedicalConditions",
      "summary": "Get Medical Conditions",
      "description": "Retrieves a page of instance of one of the `medicalCondition*` models.",
      "parameters": [
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "names",
          "required": false,
          "description": "String Comma-separated list of names to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "personIds",
          "required": false,
          "description": "String Comma-separated list of `person` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: medicalConditionAdd, medicalConditionAllergy, medicalConditionAsthma, medicalConditionDiabetes, medicalConditionDietary, medicalConditionEpilepsy, medicalConditionOther, medicalConditionPhobia.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/medicalConditionAdd"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionAllergy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionAsthma"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionDiabetes"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionDietary"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionEpilepsy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionOther"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionPhobia"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalConditionAdd",
                        "id": "1",
                        "attributes": {
                          "name": "Add",
                          "hasCarePlanProvided": false,
                          "isInattentive": true,
                          "isHyperactive": false,
                          "isMedicationRequired": false,
                          "isDoctorsLetterProvided": false,
                          "details": null,
                          "additionalInformation": ""
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionAllergy",
                        "id": "1",
                        "attributes": {
                          "name": "Allergy",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "allergyName": null,
                          "severity": "mild",
                          "isPrescribedAntihistamine": false,
                          "isPrescribedEpiPen": false,
                          "hasEpiPenRegistered": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-allergy/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionAsthma",
                        "id": "1",
                        "attributes": {
                          "name": "Asthma",
                          "details": "Very rare attacks",
                          "additionalInformation": "",
                          "severity": "mild",
                          "dosage": "No dosage",
                          "type": "Non-allergic asthma",
                          "hasCarePlanProvided": false,
                          "isPrescribedSalbutamol": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-asthma/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionDiabetes",
                        "id": "1",
                        "attributes": {
                          "name": "Diabetes",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "hasInsulinInjections": false,
                          "hasInsulinPump": false,
                          "hasGlucagon": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-diabetes/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionDietary",
                        "id": "1",
                        "attributes": {
                          "name": "dietary",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "dietaryName": "Lactose Intolerance"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionEpilepsy",
                        "id": "1",
                        "attributes": {
                          "name": "Epilepsy",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "type": "absence seizures"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-epilepsy/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionOther",
                        "id": "1",
                        "attributes": {
                          "hasCarePlanProvided": false,
                          "details": null,
                          "additionalInformation": "Student suffers from chronic sneezing bouts that can last for a couple of minutes; good classroom ventiallation recommended.",
                          "name": "Chronic Sneezing"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-other/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionPhobia",
                        "id": "1",
                        "attributes": {
                          "name": "dietary",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "phobiaName": "Arachnophobia"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-add": {
    "get": {
      "operationId": "getMedicalConditionsAdd",
      "summary": "Get Medical Conditions Add",
      "description": "Retrieves a page of instances of `medicalConditionAdd`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalConditionAdd' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalConditionAdd"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalConditionAdd",
                        "id": "1",
                        "attributes": {
                          "name": "Add",
                          "hasCarePlanProvided": false,
                          "isInattentive": true,
                          "isHyperactive": false,
                          "isMedicationRequired": false,
                          "isDoctorsLetterProvided": false,
                          "details": null,
                          "additionalInformation": ""
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionAdd",
                        "id": "1",
                        "attributes": {
                          "name": "Add",
                          "hasCarePlanProvided": false,
                          "isInattentive": true,
                          "isHyperactive": false,
                          "isMedicationRequired": false,
                          "isDoctorsLetterProvided": false,
                          "details": null,
                          "additionalInformation": ""
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionAdd",
                        "id": "1",
                        "attributes": {
                          "name": "Add",
                          "hasCarePlanProvided": false,
                          "isInattentive": true,
                          "isHyperactive": false,
                          "isMedicationRequired": false,
                          "isDoctorsLetterProvided": false,
                          "details": null,
                          "additionalInformation": ""
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-add/{id}": {
    "get": {
      "operationId": "getMedicalConditionAdd",
      "summary": "Get Medical Condition Add",
      "description": "Retrieves a single instance of `medicalConditionAdd`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalConditionAdd' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalConditionAdd' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalConditionAdd"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalConditionAdd",
                      "id": "1",
                      "attributes": {
                        "name": "Add",
                        "hasCarePlanProvided": false,
                        "isInattentive": true,
                        "isHyperactive": false,
                        "isMedicationRequired": false,
                        "isDoctorsLetterProvided": false,
                        "details": null,
                        "additionalInformation": ""
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        },
                        "carePlanFile": {
                          "links": {
                            "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/medical-condition/1",
                        "person": "/v1/enrolments/person/1",
                        "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-add/{id}/care-plan-file": {
    "get": {
      "operationId": "getMedicalConditionAddCarePlanFile",
      "summary": "Get Medical Condition Add Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the condition which care plan file to retrieve. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-allergy": {
    "get": {
      "operationId": "getMedicalConditionsAllergy",
      "summary": "Get Medical Conditions Allergy",
      "description": "Retrieves a page of instances of `medicalConditionAllergy`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalConditionAllergy' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalConditionAllergy"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalConditionAllergy",
                        "id": "1",
                        "attributes": {
                          "name": "Allergy",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "allergyName": null,
                          "severity": "mild",
                          "isPrescribedAntihistamine": false,
                          "isPrescribedEpiPen": false,
                          "hasEpiPenRegistered": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-allergy/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionAllergy",
                        "id": "1",
                        "attributes": {
                          "name": "Allergy",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "allergyName": null,
                          "severity": "mild",
                          "isPrescribedAntihistamine": false,
                          "isPrescribedEpiPen": false,
                          "hasEpiPenRegistered": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-allergy/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionAllergy",
                        "id": "1",
                        "attributes": {
                          "name": "Allergy",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "allergyName": null,
                          "severity": "mild",
                          "isPrescribedAntihistamine": false,
                          "isPrescribedEpiPen": false,
                          "hasEpiPenRegistered": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-allergy/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-allergy/{id}": {
    "get": {
      "operationId": "getMedicalConditionAllergy",
      "summary": "Get Medical Condition Allergy",
      "description": "Retrieves a single instance of `medicalConditionAllergy`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalConditionAllergy' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalConditionAllergy' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalConditionAllergy"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalConditionAllergy",
                      "id": "1",
                      "attributes": {
                        "name": "Allergy",
                        "details": null,
                        "additionalInformation": "",
                        "hasCarePlanProvided": false,
                        "allergyName": null,
                        "severity": "mild",
                        "isPrescribedAntihistamine": false,
                        "isPrescribedEpiPen": false,
                        "hasEpiPenRegistered": false
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        },
                        "carePlanFile": {
                          "links": {
                            "related": "/v1/enrolments/medical-condition-allergy/1/care-plan-file"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/medical-condition/1",
                        "person": "/v1/enrolments/person/1",
                        "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-allergy/{id}/care-plan-file": {
    "get": {
      "operationId": "getMedicalConditionAllergyCarePlanFile",
      "summary": "Get Medical Condition Allergy Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the condition which care plan file to retrieve. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-asthma": {
    "get": {
      "operationId": "getMedicalConditionsAsthma",
      "summary": "Get Medical Conditions Asthma",
      "description": "Retrieves a page of instances of `medicalConditionAsthma`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalConditionAsthma' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalConditionAsthma"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalConditionAsthma",
                        "id": "1",
                        "attributes": {
                          "name": "Asthma",
                          "details": "Very rare attacks",
                          "additionalInformation": "",
                          "severity": "mild",
                          "dosage": "No dosage",
                          "type": "Non-allergic asthma",
                          "hasCarePlanProvided": false,
                          "isPrescribedSalbutamol": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-asthma/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionAsthma",
                        "id": "1",
                        "attributes": {
                          "name": "Asthma",
                          "details": "Very rare attacks",
                          "additionalInformation": "",
                          "severity": "mild",
                          "dosage": "No dosage",
                          "type": "Non-allergic asthma",
                          "hasCarePlanProvided": false,
                          "isPrescribedSalbutamol": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-asthma/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionAsthma",
                        "id": "1",
                        "attributes": {
                          "name": "Asthma",
                          "details": "Very rare attacks",
                          "additionalInformation": "",
                          "severity": "mild",
                          "dosage": "No dosage",
                          "type": "Non-allergic asthma",
                          "hasCarePlanProvided": false,
                          "isPrescribedSalbutamol": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-asthma/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-asthma/{id}": {
    "get": {
      "operationId": "getMedicalConditionAsthma",
      "summary": "Get Medical Condition Asthma",
      "description": "Retrieves a single instance of `medicalConditionAsthma`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalConditionAsthma' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalConditionAsthma' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalConditionAsthma"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalConditionAsthma",
                      "id": "1",
                      "attributes": {
                        "name": "Asthma",
                        "details": "Very rare attacks",
                        "additionalInformation": "",
                        "severity": "mild",
                        "dosage": "No dosage",
                        "type": "Non-allergic asthma",
                        "hasCarePlanProvided": false,
                        "isPrescribedSalbutamol": false
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        },
                        "carePlanFile": {
                          "links": {
                            "related": "/v1/enrolments/medical-condition-asthma/1/care-plan-file"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/medical-condition/1",
                        "person": "/v1/enrolments/person/1",
                        "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-asthma/{id}/care-plan-file": {
    "get": {
      "operationId": "getMedicalConditionAsthmaCarePlanFile",
      "summary": "Get Medical Condition Asthma Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the condition which care plan file to retrieve. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-diabetes": {
    "get": {
      "operationId": "getMedicalConditionsDiabetes",
      "summary": "Get Medical Conditions Diabetes",
      "description": "Retrieves a page of instances of `medicalConditionDiabetes`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalConditionDiabetes' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalConditionDiabetes"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalConditionDiabetes",
                        "id": "1",
                        "attributes": {
                          "name": "Diabetes",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "hasInsulinInjections": false,
                          "hasInsulinPump": false,
                          "hasGlucagon": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-diabetes/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionDiabetes",
                        "id": "1",
                        "attributes": {
                          "name": "Diabetes",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "hasInsulinInjections": false,
                          "hasInsulinPump": false,
                          "hasGlucagon": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-diabetes/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionDiabetes",
                        "id": "1",
                        "attributes": {
                          "name": "Diabetes",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "hasInsulinInjections": false,
                          "hasInsulinPump": false,
                          "hasGlucagon": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-diabetes/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-diabetes/{id}": {
    "get": {
      "operationId": "getMedicalConditionDiabetes",
      "summary": "Get Medical Condition Diabetes",
      "description": "Retrieves a single instance of `medicalConditionDiabetes`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalConditionDiabetes' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalConditionDiabetes' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalConditionDiabetes"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalConditionDiabetes",
                      "id": "1",
                      "attributes": {
                        "name": "Diabetes",
                        "details": null,
                        "additionalInformation": "",
                        "hasCarePlanProvided": false,
                        "hasInsulinInjections": false,
                        "hasInsulinPump": false,
                        "hasGlucagon": false
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        },
                        "carePlanFile": {
                          "links": {
                            "related": "/v1/enrolments/medical-condition-diabetes/1/care-plan-file"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/medical-condition/1",
                        "person": "/v1/enrolments/person/1",
                        "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-diabetes/{id}/care-plan-file": {
    "get": {
      "operationId": "getMedicalConditionDiabetesCarePlanFile",
      "summary": "Get Medical Condition Diabetes Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the condition which care plan file to retrieve. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-epilepsy": {
    "get": {
      "operationId": "getMedicalConditionsEpilepsy",
      "summary": "Get Medical Conditions Epilepsy",
      "description": "Retrieves a page of instances of `medicalConditionEpilepsy`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalConditionEpilepsy' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalConditionEpilepsy"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalConditionEpilepsy",
                        "id": "1",
                        "attributes": {
                          "name": "Epilepsy",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "type": "absence seizures"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-epilepsy/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionEpilepsy",
                        "id": "1",
                        "attributes": {
                          "name": "Epilepsy",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "type": "absence seizures"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-epilepsy/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionEpilepsy",
                        "id": "1",
                        "attributes": {
                          "name": "Epilepsy",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "type": "absence seizures"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-epilepsy/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-epilepsy/{id}": {
    "get": {
      "operationId": "getMedicalConditionEpilepsy",
      "summary": "Get Medical Condition Epilepsy",
      "description": "Retrieves a single instance of `medicalConditionEpilepsy`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalConditionEpilepsy' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalConditionEpilepsy' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalConditionEpilepsy"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalConditionEpilepsy",
                      "id": "1",
                      "attributes": {
                        "name": "Epilepsy",
                        "details": null,
                        "additionalInformation": "",
                        "hasCarePlanProvided": false,
                        "type": "absence seizures"
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        },
                        "carePlanFile": {
                          "links": {
                            "related": "/v1/enrolments/medical-condition-epilepsy/1/care-plan-file"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/medical-condition/1",
                        "person": "/v1/enrolments/person/1",
                        "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-epilepsy/{id}/care-plan-file": {
    "get": {
      "operationId": "getMedicalConditionEpilepsyCarePlanFile",
      "summary": "Get Medical Condition Epilepsy Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the condition which care plan file to retrieve. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-other": {
    "get": {
      "operationId": "getMedicalConditionsOther",
      "summary": "Get Medical Conditions Other",
      "description": "Retrieves a page of instances of `medicalConditionOther`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalConditionOther' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalConditionOther"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalConditionOther",
                        "id": "1",
                        "attributes": {
                          "hasCarePlanProvided": false,
                          "details": null,
                          "additionalInformation": "Student suffers from chronic sneezing bouts that can last for a couple of minutes; good classroom ventiallation recommended.",
                          "name": "Chronic Sneezing"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-other/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionOther",
                        "id": "1",
                        "attributes": {
                          "hasCarePlanProvided": false,
                          "details": null,
                          "additionalInformation": "Student suffers from chronic sneezing bouts that can last for a couple of minutes; good classroom ventiallation recommended.",
                          "name": "Chronic Sneezing"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-other/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionOther",
                        "id": "1",
                        "attributes": {
                          "hasCarePlanProvided": false,
                          "details": null,
                          "additionalInformation": "Student suffers from chronic sneezing bouts that can last for a couple of minutes; good classroom ventiallation recommended.",
                          "name": "Chronic Sneezing"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-other/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-other/{id}": {
    "get": {
      "operationId": "getMedicalConditionOther",
      "summary": "Get Medical Condition Other",
      "description": "Retrieves a single instance of `medicalConditionOther`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalConditionOther' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalConditionOther' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalConditionOther"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalConditionOther",
                      "id": "1",
                      "attributes": {
                        "hasCarePlanProvided": false,
                        "details": null,
                        "additionalInformation": "Student suffers from chronic sneezing bouts that can last for a couple of minutes; good classroom ventiallation recommended.",
                        "name": "Chronic Sneezing"
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        },
                        "carePlanFile": {
                          "links": {
                            "related": "/v1/enrolments/medical-condition-other/1/care-plan-file"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/medical-condition/1",
                        "person": "/v1/enrolments/person/1",
                        "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-other/{id}/care-plan-file": {
    "get": {
      "operationId": "getMedicalConditionOtherCarePlanFile",
      "summary": "Get Medical Condition Other Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the condition which care plan file to retrieve. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-type": {
    "get": {
      "operationId": "getMedicalConditionTypes",
      "summary": "Get Medical Condition Types",
      "description": "Retrieves a page of instances of `medicalConditionType`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalConditionType' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalConditionType"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalConditionType",
                        "id": "0",
                        "attributes": {
                          "name": "Add",
                          "enrolmentModelName": "medicalConditionAdd",
                          "changeModelName": "medicalChangeConditionAdd",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition-type/0"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "medicalConditionType",
                        "id": "0",
                        "attributes": {
                          "name": "Add",
                          "enrolmentModelName": "medicalConditionAdd",
                          "changeModelName": "medicalChangeConditionAdd",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition-type/0"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "medicalConditionType",
                        "id": "0",
                        "attributes": {
                          "name": "Add",
                          "enrolmentModelName": "medicalConditionAdd",
                          "changeModelName": "medicalChangeConditionAdd",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition-type/0"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition-type/{id}": {
    "get": {
      "operationId": "getMedicalConditionType",
      "summary": "Get Medical Condition Type",
      "description": "Retrieves a single instance of `medicalConditionType`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalConditionType' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalConditionType' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalConditionType"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalConditionType",
                      "id": "0",
                      "attributes": {
                        "name": "Add",
                        "enrolmentModelName": "medicalConditionAdd",
                        "changeModelName": "medicalChangeConditionAdd",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/enrolments/medical-condition-type/0"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition/{id}": {
    "get": {
      "operationId": "getMedicalCondition",
      "summary": "Get Medical Condition",
      "description": "Retrieves a single instance of one of the `medicalCondition*` models.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'medicalCondition*' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: medicalConditionAdd, medicalConditionAllergy, medicalConditionAsthma, medicalConditionDiabetes, medicalConditionDietary, medicalConditionEpilepsy, medicalConditionOther, medicalConditionPhobia.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/medicalConditionAdd"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionAllergy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionAsthma"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionDiabetes"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionDietary"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionEpilepsy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionOther"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionPhobia"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "oneOf": [
                      {
                        "data": {
                          "type": "medicalConditionAdd",
                          "id": "1",
                          "attributes": {
                            "name": "Add",
                            "hasCarePlanProvided": false,
                            "isInattentive": true,
                            "isHyperactive": false,
                            "isMedicationRequired": false,
                            "isDoctorsLetterProvided": false,
                            "details": null,
                            "additionalInformation": ""
                          },
                          "relationships": {
                            "person": {
                              "data": {
                                "id": "1",
                                "type": "person"
                              }
                            },
                            "carePlanFile": {
                              "links": {
                                "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/enrolments/medical-condition/1",
                            "person": "/v1/enrolments/person/1",
                            "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalConditionAllergy",
                          "id": "1",
                          "attributes": {
                            "name": "Allergy",
                            "details": null,
                            "additionalInformation": "",
                            "hasCarePlanProvided": false,
                            "allergyName": null,
                            "severity": "mild",
                            "isPrescribedAntihistamine": false,
                            "isPrescribedEpiPen": false,
                            "hasEpiPenRegistered": false
                          },
                          "relationships": {
                            "person": {
                              "data": {
                                "id": "1",
                                "type": "person"
                              }
                            },
                            "carePlanFile": {
                              "links": {
                                "related": "/v1/enrolments/medical-condition-allergy/1/care-plan-file"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/enrolments/medical-condition/1",
                            "person": "/v1/enrolments/person/1",
                            "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalConditionAsthma",
                          "id": "1",
                          "attributes": {
                            "name": "Asthma",
                            "details": "Very rare attacks",
                            "additionalInformation": "",
                            "severity": "mild",
                            "dosage": "No dosage",
                            "type": "Non-allergic asthma",
                            "hasCarePlanProvided": false,
                            "isPrescribedSalbutamol": false
                          },
                          "relationships": {
                            "person": {
                              "data": {
                                "id": "1",
                                "type": "person"
                              }
                            },
                            "carePlanFile": {
                              "links": {
                                "related": "/v1/enrolments/medical-condition-asthma/1/care-plan-file"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/enrolments/medical-condition/1",
                            "person": "/v1/enrolments/person/1",
                            "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalConditionDiabetes",
                          "id": "1",
                          "attributes": {
                            "name": "Diabetes",
                            "details": null,
                            "additionalInformation": "",
                            "hasCarePlanProvided": false,
                            "hasInsulinInjections": false,
                            "hasInsulinPump": false,
                            "hasGlucagon": false
                          },
                          "relationships": {
                            "person": {
                              "data": {
                                "id": "1",
                                "type": "person"
                              }
                            },
                            "carePlanFile": {
                              "links": {
                                "related": "/v1/enrolments/medical-condition-diabetes/1/care-plan-file"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/enrolments/medical-condition/1",
                            "person": "/v1/enrolments/person/1",
                            "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalConditionDietary",
                          "id": "1",
                          "attributes": {
                            "name": "dietary",
                            "details": null,
                            "additionalInformation": "",
                            "hasCarePlanProvided": false,
                            "dietaryName": "Lactose Intolerance"
                          },
                          "relationships": {
                            "person": {
                              "data": {
                                "id": "1",
                                "type": "person"
                              }
                            },
                            "carePlanFile": {
                              "links": {
                                "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/enrolments/medical-condition/1",
                            "person": "/v1/enrolments/person/1",
                            "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalConditionEpilepsy",
                          "id": "1",
                          "attributes": {
                            "name": "Epilepsy",
                            "details": null,
                            "additionalInformation": "",
                            "hasCarePlanProvided": false,
                            "type": "absence seizures"
                          },
                          "relationships": {
                            "person": {
                              "data": {
                                "id": "1",
                                "type": "person"
                              }
                            },
                            "carePlanFile": {
                              "links": {
                                "related": "/v1/enrolments/medical-condition-epilepsy/1/care-plan-file"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/enrolments/medical-condition/1",
                            "person": "/v1/enrolments/person/1",
                            "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalConditionOther",
                          "id": "1",
                          "attributes": {
                            "hasCarePlanProvided": false,
                            "details": null,
                            "additionalInformation": "Student suffers from chronic sneezing bouts that can last for a couple of minutes; good classroom ventiallation recommended.",
                            "name": "Chronic Sneezing"
                          },
                          "relationships": {
                            "person": {
                              "data": {
                                "id": "1",
                                "type": "person"
                              }
                            },
                            "carePlanFile": {
                              "links": {
                                "related": "/v1/enrolments/medical-condition-other/1/care-plan-file"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/enrolments/medical-condition/1",
                            "person": "/v1/enrolments/person/1",
                            "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalConditionPhobia",
                          "id": "1",
                          "attributes": {
                            "name": "dietary",
                            "details": null,
                            "additionalInformation": "",
                            "hasCarePlanProvided": false,
                            "phobiaName": "Arachnophobia"
                          },
                          "relationships": {
                            "person": {
                              "data": {
                                "id": "1",
                                "type": "person"
                              }
                            },
                            "carePlanFile": {
                              "links": {
                                "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/enrolments/medical-condition/1",
                            "person": "/v1/enrolments/person/1",
                            "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/medical-condition/{id}/care-plan-file": {
    "get": {
      "operationId": "getMedicalConditionCarePlanFile",
      "summary": "Get Medical Condition Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'medicalCondition*' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person": {
    "get": {
      "operationId": "getPersons",
      "summary": "Get Persons",
      "description": "Retrieves a page of instances of `person`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryHousehold, studentPrimaryEnrolment, staff, student, contactDetails, otherHouseholds, studentContacts, studentTenants, prescribedMedication, emails, phoneNumbers, givenConsents, givenConsentLinks, emergencyContactLinks, abilities, additionalFields. [optional] [default: null] [example: \"primaryHousehold\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of person ids by which to filter. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "refIds",
          "required": false,
          "description": "String Comma-separated list of person refIds by which to filter. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "contactCodes",
          "required": false,
          "description": "String Comma-separated list of person contactCodes by which to filter. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "externalIds",
          "required": false,
          "description": "String Comma-separated list of person externalIds by which to filter. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "firstName",
          "required": false,
          "description": "String Search for firstName. By default it looks for an exact match, but special characters `_` and `%` can be used to look for, respectively, any single character or zero or more characters.\n For example, `Test_` will match `Test1`, `TestB` but not `Test` or `TestLong`, while `Test%` will match all of them. These special characters can be escaped by prepending them with a backslach `\\`. [optional] [default: null] [example: \"Joh%\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "lastName",
          "required": false,
          "description": "String Search for lastName. By default it looks for an exact match, but special characters `_` and `%` can be used to look for, respectively, any single character or zero or more characters.\n For example, `Test_` will match `Test1`, `TestB` but not `Test` or `TestLong`, while `Test%` will match all of them. These special characters can be escaped by prepending them with a backslach `\\`. [optional] [default: null] [example: \"Doe\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "inactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'person' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/person"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "person",
                        "id": "1",
                        "attributes": {
                          "externalId": null,
                          "refId": null,
                          "contactCode": null,
                          "name": "John",
                          "surname": "Doe",
                          "firstName": "John",
                          "middleNames": "Franz Stephen",
                          "lastName": "Doe",
                          "legalLastName": null,
                          "preferredName": null,
                          "email": "john.doe@example.com",
                          "title": null,
                          "givenNames": "Franz Stephen",
                          "gender": "Other",
                          "genderCode": "Other",
                          "dateOfBirth": null,
                          "crn": null,
                          "languageSpokenAtHome": null,
                          "languageSpokenAtHomeCode": null,
                          "countryOfCitizenship": null,
                          "religion": null,
                          "residentialStatus": null,
                          "isDeceased": false,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryHousehold": {
                            "links": {
                              "related": "/v1/enrolments/person/1/primary-household"
                            }
                          },
                          "staff": {
                            "links": {
                              "related": "/v1/enrolments/person/1/staff"
                            }
                          },
                          "student": {
                            "links": {
                              "related": "/v1/enrolments/person/1/student"
                            }
                          },
                          "contactDetails": {
                            "links": {
                              "related": "/v1/enrolments/person/1/person-contact-details"
                            }
                          },
                          "otherHouseholds": {
                            "links": {
                              "related": "/v1/enrolments/person/1/other-households"
                            }
                          },
                          "studentContacts": {
                            "links": {
                              "related": "/v1/enrolments/person/1/student-contacts"
                            }
                          },
                          "medicalSummary": {
                            "links": {
                              "related": "/v1/enrolments/person/1/medical-summary"
                            }
                          },
                          "medicalConditions": {
                            "links": {
                              "related": "/v1/enrolments/person/1/medical-conditions"
                            }
                          },
                          "prescribedMedication": {
                            "links": {
                              "related": "/v1/enrolments/person/1/prescribed-medications"
                            }
                          },
                          "doctors": {
                            "links": {
                              "related": "/v1/enrolments/person/1/doctors"
                            }
                          },
                          "associatedStudents": {
                            "links": {
                              "related": "/v1/enrolments/person/1/associated-students"
                            }
                          },
                          "givenConsents": {
                            "links": {
                              "related": "/v1/enrolments/person/1/given-consents"
                            }
                          },
                          "givenConsentLinks": {
                            "links": {
                              "related": "/v1/enrolments/person/1/given-consent-links"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person/1",
                          "primaryHousehold": "/v1/enrolments/person/1/primary-household",
                          "otherHouseholds": "/v1/enrolments/person/1/other-households",
                          "staff": "/v1/enrolments/person/1/staff",
                          "student": "/v1/enrolments/person/1/student",
                          "studentContacts": "/v1/enrolments/person/1/student-contacts",
                          "associatedStudents": "/v1/enrolments/person/1/associated-students",
                          "medicalSummary": "/v1/enrolments/person/1/medical-summary",
                          "medicalConditions": "/v1/enrolments/person/1/medical-conditions",
                          "prescribedMedications": "/v1/enrolments/person/1/prescribed-medications",
                          "doctors": "/v1/enrolments/person/1/doctors"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "person",
                        "id": "1",
                        "attributes": {
                          "externalId": null,
                          "refId": null,
                          "contactCode": null,
                          "name": "John",
                          "surname": "Doe",
                          "firstName": "John",
                          "middleNames": "Franz Stephen",
                          "lastName": "Doe",
                          "legalLastName": null,
                          "preferredName": null,
                          "email": "john.doe@example.com",
                          "title": null,
                          "givenNames": "Franz Stephen",
                          "gender": "Other",
                          "genderCode": "Other",
                          "dateOfBirth": null,
                          "crn": null,
                          "languageSpokenAtHome": null,
                          "languageSpokenAtHomeCode": null,
                          "countryOfCitizenship": null,
                          "religion": null,
                          "residentialStatus": null,
                          "isDeceased": false,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryHousehold": {
                            "links": {
                              "related": "/v1/enrolments/person/1/primary-household"
                            }
                          },
                          "staff": {
                            "links": {
                              "related": "/v1/enrolments/person/1/staff"
                            }
                          },
                          "student": {
                            "links": {
                              "related": "/v1/enrolments/person/1/student"
                            }
                          },
                          "contactDetails": {
                            "links": {
                              "related": "/v1/enrolments/person/1/person-contact-details"
                            }
                          },
                          "otherHouseholds": {
                            "links": {
                              "related": "/v1/enrolments/person/1/other-households"
                            }
                          },
                          "studentContacts": {
                            "links": {
                              "related": "/v1/enrolments/person/1/student-contacts"
                            }
                          },
                          "medicalSummary": {
                            "links": {
                              "related": "/v1/enrolments/person/1/medical-summary"
                            }
                          },
                          "medicalConditions": {
                            "links": {
                              "related": "/v1/enrolments/person/1/medical-conditions"
                            }
                          },
                          "prescribedMedication": {
                            "links": {
                              "related": "/v1/enrolments/person/1/prescribed-medications"
                            }
                          },
                          "doctors": {
                            "links": {
                              "related": "/v1/enrolments/person/1/doctors"
                            }
                          },
                          "associatedStudents": {
                            "links": {
                              "related": "/v1/enrolments/person/1/associated-students"
                            }
                          },
                          "givenConsents": {
                            "links": {
                              "related": "/v1/enrolments/person/1/given-consents"
                            }
                          },
                          "givenConsentLinks": {
                            "links": {
                              "related": "/v1/enrolments/person/1/given-consent-links"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person/1",
                          "primaryHousehold": "/v1/enrolments/person/1/primary-household",
                          "otherHouseholds": "/v1/enrolments/person/1/other-households",
                          "staff": "/v1/enrolments/person/1/staff",
                          "student": "/v1/enrolments/person/1/student",
                          "studentContacts": "/v1/enrolments/person/1/student-contacts",
                          "associatedStudents": "/v1/enrolments/person/1/associated-students",
                          "medicalSummary": "/v1/enrolments/person/1/medical-summary",
                          "medicalConditions": "/v1/enrolments/person/1/medical-conditions",
                          "prescribedMedications": "/v1/enrolments/person/1/prescribed-medications",
                          "doctors": "/v1/enrolments/person/1/doctors"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "person",
                        "id": "1",
                        "attributes": {
                          "externalId": null,
                          "refId": null,
                          "contactCode": null,
                          "name": "John",
                          "surname": "Doe",
                          "firstName": "John",
                          "middleNames": "Franz Stephen",
                          "lastName": "Doe",
                          "legalLastName": null,
                          "preferredName": null,
                          "email": "john.doe@example.com",
                          "title": null,
                          "givenNames": "Franz Stephen",
                          "gender": "Other",
                          "genderCode": "Other",
                          "dateOfBirth": null,
                          "crn": null,
                          "languageSpokenAtHome": null,
                          "languageSpokenAtHomeCode": null,
                          "countryOfCitizenship": null,
                          "religion": null,
                          "residentialStatus": null,
                          "isDeceased": false,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryHousehold": {
                            "links": {
                              "related": "/v1/enrolments/person/1/primary-household"
                            }
                          },
                          "staff": {
                            "links": {
                              "related": "/v1/enrolments/person/1/staff"
                            }
                          },
                          "student": {
                            "links": {
                              "related": "/v1/enrolments/person/1/student"
                            }
                          },
                          "contactDetails": {
                            "links": {
                              "related": "/v1/enrolments/person/1/person-contact-details"
                            }
                          },
                          "otherHouseholds": {
                            "links": {
                              "related": "/v1/enrolments/person/1/other-households"
                            }
                          },
                          "studentContacts": {
                            "links": {
                              "related": "/v1/enrolments/person/1/student-contacts"
                            }
                          },
                          "medicalSummary": {
                            "links": {
                              "related": "/v1/enrolments/person/1/medical-summary"
                            }
                          },
                          "medicalConditions": {
                            "links": {
                              "related": "/v1/enrolments/person/1/medical-conditions"
                            }
                          },
                          "prescribedMedication": {
                            "links": {
                              "related": "/v1/enrolments/person/1/prescribed-medications"
                            }
                          },
                          "doctors": {
                            "links": {
                              "related": "/v1/enrolments/person/1/doctors"
                            }
                          },
                          "associatedStudents": {
                            "links": {
                              "related": "/v1/enrolments/person/1/associated-students"
                            }
                          },
                          "givenConsents": {
                            "links": {
                              "related": "/v1/enrolments/person/1/given-consents"
                            }
                          },
                          "givenConsentLinks": {
                            "links": {
                              "related": "/v1/enrolments/person/1/given-consent-links"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person/1",
                          "primaryHousehold": "/v1/enrolments/person/1/primary-household",
                          "otherHouseholds": "/v1/enrolments/person/1/other-households",
                          "staff": "/v1/enrolments/person/1/staff",
                          "student": "/v1/enrolments/person/1/student",
                          "studentContacts": "/v1/enrolments/person/1/student-contacts",
                          "associatedStudents": "/v1/enrolments/person/1/associated-students",
                          "medicalSummary": "/v1/enrolments/person/1/medical-summary",
                          "medicalConditions": "/v1/enrolments/person/1/medical-conditions",
                          "prescribedMedications": "/v1/enrolments/person/1/prescribed-medications",
                          "doctors": "/v1/enrolments/person/1/doctors"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-by-code/{id}": {
    "get": {
      "operationId": "getPersonByCode",
      "summary": "Get Person By Code",
      "description": "Retrieves a single instance of `person`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Alphanumeric string ID of the 'person' to retrieve [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryHousehold, studentPrimaryEnrolment, staff, student, contactDetails, otherHouseholds, studentContacts, studentTenants, prescribedMedication, emails, phoneNumbers, givenConsents, givenConsentLinks, emergencyContactLinks, abilities, additionalFields. [optional] [default: null] [example: \"primaryHousehold\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'person' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/person"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "person",
                      "id": "1",
                      "attributes": {
                        "externalId": null,
                        "refId": null,
                        "contactCode": null,
                        "name": "John",
                        "surname": "Doe",
                        "firstName": "John",
                        "middleNames": "Franz Stephen",
                        "lastName": "Doe",
                        "legalLastName": null,
                        "preferredName": null,
                        "email": "john.doe@example.com",
                        "title": null,
                        "givenNames": "Franz Stephen",
                        "gender": "Other",
                        "genderCode": "Other",
                        "dateOfBirth": null,
                        "crn": null,
                        "languageSpokenAtHome": null,
                        "languageSpokenAtHomeCode": null,
                        "countryOfCitizenship": null,
                        "religion": null,
                        "residentialStatus": null,
                        "isDeceased": false,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "primaryHousehold": {
                          "links": {
                            "related": "/v1/enrolments/person/1/primary-household"
                          }
                        },
                        "staff": {
                          "links": {
                            "related": "/v1/enrolments/person/1/staff"
                          }
                        },
                        "student": {
                          "links": {
                            "related": "/v1/enrolments/person/1/student"
                          }
                        },
                        "contactDetails": {
                          "links": {
                            "related": "/v1/enrolments/person/1/person-contact-details"
                          }
                        },
                        "otherHouseholds": {
                          "links": {
                            "related": "/v1/enrolments/person/1/other-households"
                          }
                        },
                        "studentContacts": {
                          "links": {
                            "related": "/v1/enrolments/person/1/student-contacts"
                          }
                        },
                        "medicalSummary": {
                          "links": {
                            "related": "/v1/enrolments/person/1/medical-summary"
                          }
                        },
                        "medicalConditions": {
                          "links": {
                            "related": "/v1/enrolments/person/1/medical-conditions"
                          }
                        },
                        "prescribedMedication": {
                          "links": {
                            "related": "/v1/enrolments/person/1/prescribed-medications"
                          }
                        },
                        "doctors": {
                          "links": {
                            "related": "/v1/enrolments/person/1/doctors"
                          }
                        },
                        "associatedStudents": {
                          "links": {
                            "related": "/v1/enrolments/person/1/associated-students"
                          }
                        },
                        "givenConsents": {
                          "links": {
                            "related": "/v1/enrolments/person/1/given-consents"
                          }
                        },
                        "givenConsentLinks": {
                          "links": {
                            "related": "/v1/enrolments/person/1/given-consent-links"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person/1",
                        "primaryHousehold": "/v1/enrolments/person/1/primary-household",
                        "otherHouseholds": "/v1/enrolments/person/1/other-households",
                        "staff": "/v1/enrolments/person/1/staff",
                        "student": "/v1/enrolments/person/1/student",
                        "studentContacts": "/v1/enrolments/person/1/student-contacts",
                        "associatedStudents": "/v1/enrolments/person/1/associated-students",
                        "medicalSummary": "/v1/enrolments/person/1/medical-summary",
                        "medicalConditions": "/v1/enrolments/person/1/medical-conditions",
                        "prescribedMedications": "/v1/enrolments/person/1/prescribed-medications",
                        "doctors": "/v1/enrolments/person/1/doctors"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-consent-link": {
    "post": {
      "operationId": "postPersonConsentLink",
      "summary": "Post Person Consent Link",
      "description": "Adds a new consent to a person.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`personConsentLink`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `consentGiven` → Boolean Whether the consent is given or not. [optional] [default: 1] [example: FALSE]\n * Relationships\n   * `consentedBy` → [required] [single] expected type is `person`. \n   * `person` → [required] [single] expected type is `person`. \n   * `consent` → [required] [single] expected type is `consent`. ",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "consentGiven": {
                              "type": "boolean",
                              "description": "Boolean Whether the consent is given or not. [default: 1] [example: FALSE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "consentedBy": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "person": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "consent": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "personConsentLink",
                    "attributes": {
                      "consentGiven": false
                    },
                    "relationships": {
                      "consentedBy": {
                        "data": {
                          "id": 1,
                          "type": "person"
                        }
                      },
                      "person": {
                        "data": {
                          "id": 1,
                          "type": "person"
                        }
                      },
                      "consent": {
                        "data": {
                          "id": 1,
                          "type": "consent"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personConsentLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personConsentLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personConsentLink",
                      "id": "1",
                      "attributes": {
                        "consentDate": "2018-06-01",
                        "consentGiven": false,
                        "createdAt": null,
                        "updatedAt": null
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        },
                        "consent": {
                          "data": {
                            "id": "1",
                            "type": "consent"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person-consent-link/1",
                        "person": "/v1/enrolments/person/1",
                        "consent": "/v1/enrolments/consent/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getPersonConsentLinks",
      "summary": "Get Person Consent Links",
      "description": "Retrieves a page of instances of `personConsentLink`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person, consent, consentedBy. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "consentIds",
          "required": false,
          "description": "String Comma-separated list of of `consent` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "personIds",
          "required": false,
          "description": "String Comma-separated list of of `person` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "consentedByIds",
          "required": false,
          "description": "String Comma-separated list of of `consentedBy` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'personConsentLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/personConsentLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "personConsentLink",
                        "id": "1",
                        "attributes": {
                          "consentDate": "2018-06-01",
                          "consentGiven": false,
                          "createdAt": null,
                          "updatedAt": null
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "consent": {
                            "data": {
                              "id": "1",
                              "type": "consent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-consent-link/1",
                          "person": "/v1/enrolments/person/1",
                          "consent": "/v1/enrolments/consent/1"
                        }
                      },
                      {
                        "type": "personConsentLink",
                        "id": "1",
                        "attributes": {
                          "consentDate": "2018-06-01",
                          "consentGiven": false,
                          "createdAt": null,
                          "updatedAt": null
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "consent": {
                            "data": {
                              "id": "1",
                              "type": "consent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-consent-link/1",
                          "person": "/v1/enrolments/person/1",
                          "consent": "/v1/enrolments/consent/1"
                        }
                      },
                      {
                        "type": "personConsentLink",
                        "id": "1",
                        "attributes": {
                          "consentDate": "2018-06-01",
                          "consentGiven": false,
                          "createdAt": null,
                          "updatedAt": null
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "consent": {
                            "data": {
                              "id": "1",
                              "type": "consent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-consent-link/1",
                          "person": "/v1/enrolments/person/1",
                          "consent": "/v1/enrolments/consent/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-consent-link/{id}": {
    "get": {
      "operationId": "getPersonConsentLink",
      "summary": "Get Person Consent Link",
      "description": "Retrieves a single instance of `personConsentLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'personConsentLink' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person, consent, consentedBy. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personConsentLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personConsentLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personConsentLink",
                      "id": "1",
                      "attributes": {
                        "consentDate": "2018-06-01",
                        "consentGiven": false,
                        "createdAt": null,
                        "updatedAt": null
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        },
                        "consent": {
                          "data": {
                            "id": "1",
                            "type": "consent"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person-consent-link/1",
                        "person": "/v1/enrolments/person/1",
                        "consent": "/v1/enrolments/consent/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchPersonConsentLink",
      "summary": "Patch Person Consent Link",
      "description": "Edits an existing consent to a person.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`personConsentLink`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `consentGiven` → Boolean Whether the consent is given or not. [optional] [default: 1] [example: FALSE]\n * Relationships\n   * `consentedBy` → [optional] [single] expected type is `person`. ",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `personConsentLinkt` to modify [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "consentGiven": {
                              "type": "boolean",
                              "description": "Boolean Whether the consent is given or not. [optional] [default: 1] [example: FALSE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "consentedBy": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "personConsentLink",
                    "id": 1,
                    "attributes": {
                      "consentGiven": false
                    },
                    "relationships": {
                      "consentedBy": {
                        "data": {
                          "id": 1,
                          "type": "person"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personConsentLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personConsentLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personConsentLink",
                      "id": "1",
                      "attributes": {
                        "consentDate": "2018-06-01",
                        "consentGiven": false,
                        "createdAt": null,
                        "updatedAt": null
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        },
                        "consent": {
                          "data": {
                            "id": "1",
                            "type": "consent"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person-consent-link/1",
                        "person": "/v1/enrolments/person/1",
                        "consent": "/v1/enrolments/consent/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deletePersonConsentLink",
      "summary": "Delete Person Consent Link",
      "description": "Deletes personConsentLink by ID",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the personConsentLink to delete. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/enrolments/person-contact-details": {
    "get": {
      "operationId": "getPersonContactDetailsMany",
      "summary": "Get Person Contact Details Many",
      "description": "Retrieves a page of instances of `personContactDetails`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "personIds",
          "required": false,
          "description": "String Comma-separated list of `person` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'personContactDetails' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/personContactDetails"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "personContactDetails",
                        "id": "",
                        "attributes": {
                          "educationLevel": 1,
                          "tertiaryEducationLevel": 5,
                          "occupation": "Carpenter",
                          "employer": "John Doe's Carpentry Shop",
                          "employmentType": 1,
                          "workplaceLocation": "Wood Street 73/2, Forestburg",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/person-contact-details/"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "personContactDetails",
                        "id": "",
                        "attributes": {
                          "educationLevel": 1,
                          "tertiaryEducationLevel": 5,
                          "occupation": "Carpenter",
                          "employer": "John Doe's Carpentry Shop",
                          "employmentType": 1,
                          "workplaceLocation": "Wood Street 73/2, Forestburg",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/person-contact-details/"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "personContactDetails",
                        "id": "",
                        "attributes": {
                          "educationLevel": 1,
                          "tertiaryEducationLevel": 5,
                          "occupation": "Carpenter",
                          "employer": "John Doe's Carpentry Shop",
                          "employmentType": 1,
                          "workplaceLocation": "Wood Street 73/2, Forestburg",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/person-contact-details/"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-contact-details/{id}": {
    "get": {
      "operationId": "getPersonContactDetailsOne",
      "summary": "Get Person Contact Details One",
      "description": "Retrieves a single instance of `personContactDetails`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'personContactDetails' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personContactDetails' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personContactDetails"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personContactDetails",
                      "id": "",
                      "attributes": {
                        "educationLevel": 1,
                        "tertiaryEducationLevel": 5,
                        "occupation": "Carpenter",
                        "employer": "John Doe's Carpentry Shop",
                        "employmentType": 1,
                        "workplaceLocation": "Wood Street 73/2, Forestburg",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/enrolments/person-contact-details/"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-email": {
    "get": {
      "operationId": "getPersonEmails",
      "summary": "Get Person Emails",
      "description": "Retrieves a page of instances of `personEmail`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'personEmail' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/personEmail"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "personEmail",
                        "id": "1",
                        "attributes": {
                          "email": "main.email@example.com",
                          "type": "01",
                          "typeName": "Primary",
                          "canContact": true
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-email/1"
                        }
                      },
                      {
                        "type": "personEmail",
                        "id": "1",
                        "attributes": {
                          "email": "main.email@example.com",
                          "type": "01",
                          "typeName": "Primary",
                          "canContact": true
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-email/1"
                        }
                      },
                      {
                        "type": "personEmail",
                        "id": "1",
                        "attributes": {
                          "email": "main.email@example.com",
                          "type": "01",
                          "typeName": "Primary",
                          "canContact": true
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-email/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postPersonEmail",
      "summary": "Post Person Email",
      "description": "Creates a new `personEmail`.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`personEmail`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `email` → String Email address [example: \"test@example.com\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `type` → String Type of this email address. It's advisable to avoid one person having multiple emails of the same type, but there is no server-side validation. [example: \"01\"] \nValue constraints:\nAllowed values: \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\"\n   * `canContact` → Boolean If the person can be contacted using this email address. [example: TRUE]\n * Relationships\n   * `owner` → [required] [single] expected type is `person`. Person whose email it is",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "email": {
                              "type": "string",
                              "description": "String Email address [example: \"test@example.com\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "type": {
                              "type": "string",
                              "description": "String Type of this email address. It's advisable to avoid one person having multiple emails of the same type, but there is no server-side validation. [example: \"01\"] \nValue constraints:\nAllowed values: \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\""
                            },
                            "canContact": {
                              "type": "boolean",
                              "description": "Boolean If the person can be contacted using this email address. [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "owner": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "personEmail",
                    "attributes": {
                      "email": "test@example.com",
                      "type": "01",
                      "canContact": true
                    },
                    "relationships": {
                      "owner": {
                        "data": {
                          "id": 1,
                          "type": "person"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personEmail' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personEmail"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personEmail",
                      "id": "1",
                      "attributes": {
                        "email": "main.email@example.com",
                        "type": "01",
                        "typeName": "Primary",
                        "canContact": true
                      },
                      "relationships": {
                        "owner": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person-email/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-email/{id}": {
    "get": {
      "operationId": "getPersonEmail",
      "summary": "Get Person Email",
      "description": "Retrieves a single instance of `personEmail`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'personEmail' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personEmail' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personEmail"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personEmail",
                      "id": "1",
                      "attributes": {
                        "email": "main.email@example.com",
                        "type": "01",
                        "typeName": "Primary",
                        "canContact": true
                      },
                      "relationships": {
                        "owner": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person-email/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchPersonEmail",
      "summary": "Patch Person Email",
      "description": "Updates an existing `personEmail`.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`personEmail`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `email` → String Email address [example: \"test@example.com\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `type` → String Type of this email address. It's advisable to avoid one person having multiple emails of the same type, but there is no server-side validation. [example: \"01\"] \nValue constraints:\nAllowed values: \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\"\n   * `canContact` → Boolean If the person can be contacted using this email address. [example: TRUE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `personEmail` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "email": {
                              "type": "string",
                              "description": "String Email address [optional] [example: \"test@example.com\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "type": {
                              "type": "string",
                              "description": "String Type of this email address. It's advisable to avoid one person having multiple emails of the same type, but there is no server-side validation. [optional] [example: \"01\"] \nValue constraints:\nAllowed values: \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\""
                            },
                            "canContact": {
                              "type": "boolean",
                              "description": "Boolean If the person can be contacted using this email address. [optional] [example: TRUE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "personEmail",
                    "id": 1,
                    "attributes": {
                      "email": "test@example.com",
                      "type": "01",
                      "canContact": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personEmail' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personEmail"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personEmail",
                      "id": "1",
                      "attributes": {
                        "email": "main.email@example.com",
                        "type": "01",
                        "typeName": "Primary",
                        "canContact": true
                      },
                      "relationships": {
                        "owner": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person-email/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deletePersonEmail",
      "summary": "Delete Person Email",
      "description": "Deletes personEmail by ID",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the personEmail to delete. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/enrolments/person-field": {
    "get": {
      "operationId": "getPersonFields",
      "summary": "Get Person Fields",
      "description": "Retrieves a page of instances of `personField`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "schoolIds",
          "required": false,
          "description": "String Comma-separated list of `school` relation IDs to filter by. Note: it will also find fields which have null relation. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'personField' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/personField"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "personField",
                        "id": "1",
                        "attributes": {
                          "name": "Web Access",
                          "type": "yes_no",
                          "valueType": null,
                          "area": null,
                          "minLength": null,
                          "maxLength": null
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-field/1"
                        }
                      },
                      {
                        "type": "personField",
                        "id": "1",
                        "attributes": {
                          "name": "Web Access",
                          "type": "yes_no",
                          "valueType": null,
                          "area": null,
                          "minLength": null,
                          "maxLength": null
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-field/1"
                        }
                      },
                      {
                        "type": "personField",
                        "id": "1",
                        "attributes": {
                          "name": "Web Access",
                          "type": "yes_no",
                          "valueType": null,
                          "area": null,
                          "minLength": null,
                          "maxLength": null
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-field/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-field-value": {
    "get": {
      "operationId": "getPersonFieldValues",
      "summary": "Get Person Field Values",
      "description": "Retrieves a page of instances of `personFieldValue`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "personIds",
          "required": false,
          "description": "String Comma-separated list of `person` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "fieldIds",
          "required": false,
          "description": "String Comma-separated list of `field` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'personFieldValue' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/personFieldValue"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "personFieldValue",
                        "id": "1",
                        "attributes": {
                          "value": "1"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          },
                          "field": {
                            "data": {
                              "id": "3",
                              "type": "personField"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-field-value/1"
                        }
                      },
                      {
                        "type": "personFieldValue",
                        "id": "1",
                        "attributes": {
                          "value": "1"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          },
                          "field": {
                            "data": {
                              "id": "3",
                              "type": "personField"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-field-value/1"
                        }
                      },
                      {
                        "type": "personFieldValue",
                        "id": "1",
                        "attributes": {
                          "value": "1"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          },
                          "field": {
                            "data": {
                              "id": "3",
                              "type": "personField"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-field-value/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-field-value/{id}": {
    "get": {
      "operationId": "getPersonFieldValue",
      "summary": "Get Person Field Value",
      "description": "Retrieves a single instance of `personFieldValue`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'personFieldValue' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personFieldValue' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personFieldValue"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personFieldValue",
                      "id": "1",
                      "attributes": {
                        "value": "1"
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "2",
                            "type": "person"
                          }
                        },
                        "field": {
                          "data": {
                            "id": "3",
                            "type": "personField"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person-field-value/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-field/{id}": {
    "get": {
      "operationId": "getPersonField",
      "summary": "Get Person Field",
      "description": "Retrieves a single instance of `personField`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'personField' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personField' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personField"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personField",
                      "id": "1",
                      "attributes": {
                        "name": "Web Access",
                        "type": "yes_no",
                        "valueType": null,
                        "area": null,
                        "minLength": null,
                        "maxLength": null
                      },
                      "relationships": {
                        "school": {
                          "data": {
                            "id": "1",
                            "type": "school"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person-field/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-medical-misc": {
    "get": {
      "operationId": "getPersonMedicalMiscs",
      "summary": "Get Person Medical Miscs",
      "description": "Retrieves a page of instances of `personMedicalMisc`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "personIds",
          "required": false,
          "description": "String Comma-separated list of `person` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'personMedicalMisc' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/personMedicalMisc"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "personMedicalMisc",
                        "id": "1",
                        "attributes": {
                          "hasLongTermMedication": true,
                          "wasMedicationAdviceFormReceived": false,
                          "lastDateOfTetanusInjection": "2018-01-01",
                          "canOverCounterMedicineSalbutamol": false,
                          "canOverCounterMedicineParacetamol": true,
                          "canOverCounterMedicineIbuprofen": false,
                          "canOverCounterMedicineAntihistamine": false,
                          "ambulanceCoverProvider": "Random Australia",
                          "medicareNumber": "4173158231/1",
                          "medicareExpiryDate": null,
                          "medicarePositionOnCard": "1",
                          "privateMedicalFund": "None",
                          "privateMedicalFundNumber": "",
                          "privateMedicalFundExpiryDate": "1970-01-01",
                          "hasParentAcknowledged": true,
                          "areVaccinationsUpToDate": true,
                          "hasMeaslesExclusion": false,
                          "hasAmbulanceCover": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-medical-misc/1"
                        }
                      },
                      {
                        "type": "personMedicalMisc",
                        "id": "1",
                        "attributes": {
                          "hasLongTermMedication": true,
                          "wasMedicationAdviceFormReceived": false,
                          "lastDateOfTetanusInjection": "2018-01-01",
                          "canOverCounterMedicineSalbutamol": false,
                          "canOverCounterMedicineParacetamol": true,
                          "canOverCounterMedicineIbuprofen": false,
                          "canOverCounterMedicineAntihistamine": false,
                          "ambulanceCoverProvider": "Random Australia",
                          "medicareNumber": "4173158231/1",
                          "medicareExpiryDate": null,
                          "medicarePositionOnCard": "1",
                          "privateMedicalFund": "None",
                          "privateMedicalFundNumber": "",
                          "privateMedicalFundExpiryDate": "1970-01-01",
                          "hasParentAcknowledged": true,
                          "areVaccinationsUpToDate": true,
                          "hasMeaslesExclusion": false,
                          "hasAmbulanceCover": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-medical-misc/1"
                        }
                      },
                      {
                        "type": "personMedicalMisc",
                        "id": "1",
                        "attributes": {
                          "hasLongTermMedication": true,
                          "wasMedicationAdviceFormReceived": false,
                          "lastDateOfTetanusInjection": "2018-01-01",
                          "canOverCounterMedicineSalbutamol": false,
                          "canOverCounterMedicineParacetamol": true,
                          "canOverCounterMedicineIbuprofen": false,
                          "canOverCounterMedicineAntihistamine": false,
                          "ambulanceCoverProvider": "Random Australia",
                          "medicareNumber": "4173158231/1",
                          "medicareExpiryDate": null,
                          "medicarePositionOnCard": "1",
                          "privateMedicalFund": "None",
                          "privateMedicalFundNumber": "",
                          "privateMedicalFundExpiryDate": "1970-01-01",
                          "hasParentAcknowledged": true,
                          "areVaccinationsUpToDate": true,
                          "hasMeaslesExclusion": false,
                          "hasAmbulanceCover": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-medical-misc/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-medical-misc/{id}": {
    "get": {
      "operationId": "getPersonMedicalMisc",
      "summary": "Get Person Medical Misc",
      "description": "Retrieves a single instance of `personMedicalMisc`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'personMedicalMisc' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personMedicalMisc' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personMedicalMisc"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personMedicalMisc",
                      "id": "1",
                      "attributes": {
                        "hasLongTermMedication": true,
                        "wasMedicationAdviceFormReceived": false,
                        "lastDateOfTetanusInjection": "2018-01-01",
                        "canOverCounterMedicineSalbutamol": false,
                        "canOverCounterMedicineParacetamol": true,
                        "canOverCounterMedicineIbuprofen": false,
                        "canOverCounterMedicineAntihistamine": false,
                        "ambulanceCoverProvider": "Random Australia",
                        "medicareNumber": "4173158231/1",
                        "medicareExpiryDate": null,
                        "medicarePositionOnCard": "1",
                        "privateMedicalFund": "None",
                        "privateMedicalFundNumber": "",
                        "privateMedicalFundExpiryDate": "1970-01-01",
                        "hasParentAcknowledged": true,
                        "areVaccinationsUpToDate": true,
                        "hasMeaslesExclusion": false,
                        "hasAmbulanceCover": false
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person-medical-misc/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-phone": {
    "get": {
      "operationId": "getPersonPhones",
      "summary": "Get Person Phones",
      "description": "Retrieves a page of instances of `personPhone`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'personPhone' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/personPhone"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "personPhone",
                        "id": "1",
                        "attributes": {
                          "number": "600 123 123",
                          "extension": 48,
                          "type": "0888",
                          "typeName": "Mobile",
                          "isListed": false,
                          "canContact": true
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-phone/1"
                        }
                      },
                      {
                        "type": "personPhone",
                        "id": "1",
                        "attributes": {
                          "number": "600 123 123",
                          "extension": 48,
                          "type": "0888",
                          "typeName": "Mobile",
                          "isListed": false,
                          "canContact": true
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-phone/1"
                        }
                      },
                      {
                        "type": "personPhone",
                        "id": "1",
                        "attributes": {
                          "number": "600 123 123",
                          "extension": 48,
                          "type": "0888",
                          "typeName": "Mobile",
                          "isListed": false,
                          "canContact": true
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-phone/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postPersonPhone",
      "summary": "Post Person Phone",
      "description": "Creates a new `personPhone`.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`personPhone`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `number` → String Phone number [example: \"12345666\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `extension` → Number The extension part of the phone number [optional] [example: 12]\n   * `type` → String Type of this phone number. It's advisable to avoid one person having multiple phone numbers of the same type, but there is no server-side validation. [example: \"0779\"] \nValue constraints:\nAllowed values: \"0350\", \"0359\", \"0400\", \"0370\", \"2364\", \"0779\", \"0777\", \"0478\", \"0096\", \"0486\", \"0888\", \"0437\", \"0426\", \"0448\", \"0889\"\n   * `isListed` → Boolean If this phone number is listed publicly [optional] [example: TRUE]\n   * `canContact` → Boolean If the person can be contacted using this phone number. [example: TRUE]\n * Relationships\n   * `owner` → [required] [single] expected type is `person`. Person whose phone number it is",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "number": {
                              "type": "string",
                              "description": "String Phone number [example: \"12345666\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "extension": {
                              "type": "number",
                              "description": "Number The extension part of the phone number [example: 12]"
                            },
                            "type": {
                              "type": "string",
                              "description": "String Type of this phone number. It's advisable to avoid one person having multiple phone numbers of the same type, but there is no server-side validation. [example: \"0779\"] \nValue constraints:\nAllowed values: \"0350\", \"0359\", \"0400\", \"0370\", \"2364\", \"0779\", \"0777\", \"0478\", \"0096\", \"0486\", \"0888\", \"0437\", \"0426\", \"0448\", \"0889\""
                            },
                            "isListed": {
                              "type": "boolean",
                              "description": "Boolean If this phone number is listed publicly [example: TRUE]"
                            },
                            "canContact": {
                              "type": "boolean",
                              "description": "Boolean If the person can be contacted using this phone number. [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "owner": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "personPhone",
                    "attributes": {
                      "number": "12345666",
                      "extension": 12,
                      "type": "0779",
                      "isListed": true,
                      "canContact": true
                    },
                    "relationships": {
                      "owner": {
                        "data": {
                          "id": 1,
                          "type": "person"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personPhone' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personPhone"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personPhone",
                      "id": "1",
                      "attributes": {
                        "number": "600 123 123",
                        "extension": 48,
                        "type": "0888",
                        "typeName": "Mobile",
                        "isListed": false,
                        "canContact": true
                      },
                      "relationships": {
                        "owner": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person-phone/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-phone/{id}": {
    "get": {
      "operationId": "getPersonPhone",
      "summary": "Get Person Phone",
      "description": "Retrieves a single instance of `personPhone`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'personPhone' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personPhone' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personPhone"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personPhone",
                      "id": "1",
                      "attributes": {
                        "number": "600 123 123",
                        "extension": 48,
                        "type": "0888",
                        "typeName": "Mobile",
                        "isListed": false,
                        "canContact": true
                      },
                      "relationships": {
                        "owner": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person-phone/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchPersonPhone",
      "summary": "Patch Person Phone",
      "description": "Updates an existing `personPhone`.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`personPhone`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `number` → String Phone number [example: \"12345666\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `extension` → Number The extension part of the phone number [optional] [example: 12]\n   * `type` → String Type of this phone number. It's advisable to avoid one person having multiple phone numbers of the same type, but there is no server-side validation. [example: \"0779\"] \nValue constraints:\nAllowed values: \"0350\", \"0359\", \"0400\", \"0370\", \"2364\", \"0779\", \"0777\", \"0478\", \"0096\", \"0486\", \"0888\", \"0437\", \"0426\", \"0448\", \"0889\"\n   * `isListed` → Boolean If this phone number is listed publicly [optional] [example: TRUE]\n   * `canContact` → Boolean If the person can be contacted using this phone number. [example: TRUE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `personPhone` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "number": {
                              "type": "string",
                              "description": "String Phone number [optional] [example: \"12345666\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "extension": {
                              "type": "number",
                              "description": "Number The extension part of the phone number [optional] [example: 12]"
                            },
                            "type": {
                              "type": "string",
                              "description": "String Type of this phone number. It's advisable to avoid one person having multiple phone numbers of the same type, but there is no server-side validation. [optional] [example: \"0779\"] \nValue constraints:\nAllowed values: \"0350\", \"0359\", \"0400\", \"0370\", \"2364\", \"0779\", \"0777\", \"0478\", \"0096\", \"0486\", \"0888\", \"0437\", \"0426\", \"0448\", \"0889\""
                            },
                            "isListed": {
                              "type": "boolean",
                              "description": "Boolean If this phone number is listed publicly [optional] [example: TRUE]"
                            },
                            "canContact": {
                              "type": "boolean",
                              "description": "Boolean If the person can be contacted using this phone number. [optional] [example: TRUE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "personPhone",
                    "id": 1,
                    "attributes": {
                      "number": "12345666",
                      "extension": 12,
                      "type": "0779",
                      "isListed": true,
                      "canContact": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personPhone' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personPhone"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personPhone",
                      "id": "1",
                      "attributes": {
                        "number": "600 123 123",
                        "extension": 48,
                        "type": "0888",
                        "typeName": "Mobile",
                        "isListed": false,
                        "canContact": true
                      },
                      "relationships": {
                        "owner": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person-phone/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person-phones/{id}": {
    "delete": {
      "operationId": "deletePersonPhone",
      "summary": "Delete Person Phone",
      "description": "Deletes personPhone by ID",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the personPhone to delete. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/enrolments/person/{id}": {
    "get": {
      "operationId": "getPerson",
      "summary": "Get Person",
      "description": "Retrieves a single instance of `person`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'person' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryHousehold, studentPrimaryEnrolment, staff, student, contactDetails, otherHouseholds, studentContacts, studentTenants, prescribedMedication, emails, phoneNumbers, givenConsents, givenConsentLinks, emergencyContactLinks, abilities, additionalFields. [optional] [default: null] [example: \"primaryHousehold\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'person' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/person"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "person",
                      "id": "1",
                      "attributes": {
                        "externalId": null,
                        "refId": null,
                        "contactCode": null,
                        "name": "John",
                        "surname": "Doe",
                        "firstName": "John",
                        "middleNames": "Franz Stephen",
                        "lastName": "Doe",
                        "legalLastName": null,
                        "preferredName": null,
                        "email": "john.doe@example.com",
                        "title": null,
                        "givenNames": "Franz Stephen",
                        "gender": "Other",
                        "genderCode": "Other",
                        "dateOfBirth": null,
                        "crn": null,
                        "languageSpokenAtHome": null,
                        "languageSpokenAtHomeCode": null,
                        "countryOfCitizenship": null,
                        "religion": null,
                        "residentialStatus": null,
                        "isDeceased": false,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "primaryHousehold": {
                          "links": {
                            "related": "/v1/enrolments/person/1/primary-household"
                          }
                        },
                        "staff": {
                          "links": {
                            "related": "/v1/enrolments/person/1/staff"
                          }
                        },
                        "student": {
                          "links": {
                            "related": "/v1/enrolments/person/1/student"
                          }
                        },
                        "contactDetails": {
                          "links": {
                            "related": "/v1/enrolments/person/1/person-contact-details"
                          }
                        },
                        "otherHouseholds": {
                          "links": {
                            "related": "/v1/enrolments/person/1/other-households"
                          }
                        },
                        "studentContacts": {
                          "links": {
                            "related": "/v1/enrolments/person/1/student-contacts"
                          }
                        },
                        "medicalSummary": {
                          "links": {
                            "related": "/v1/enrolments/person/1/medical-summary"
                          }
                        },
                        "medicalConditions": {
                          "links": {
                            "related": "/v1/enrolments/person/1/medical-conditions"
                          }
                        },
                        "prescribedMedication": {
                          "links": {
                            "related": "/v1/enrolments/person/1/prescribed-medications"
                          }
                        },
                        "doctors": {
                          "links": {
                            "related": "/v1/enrolments/person/1/doctors"
                          }
                        },
                        "associatedStudents": {
                          "links": {
                            "related": "/v1/enrolments/person/1/associated-students"
                          }
                        },
                        "givenConsents": {
                          "links": {
                            "related": "/v1/enrolments/person/1/given-consents"
                          }
                        },
                        "givenConsentLinks": {
                          "links": {
                            "related": "/v1/enrolments/person/1/given-consent-links"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person/1",
                        "primaryHousehold": "/v1/enrolments/person/1/primary-household",
                        "otherHouseholds": "/v1/enrolments/person/1/other-households",
                        "staff": "/v1/enrolments/person/1/staff",
                        "student": "/v1/enrolments/person/1/student",
                        "studentContacts": "/v1/enrolments/person/1/student-contacts",
                        "associatedStudents": "/v1/enrolments/person/1/associated-students",
                        "medicalSummary": "/v1/enrolments/person/1/medical-summary",
                        "medicalConditions": "/v1/enrolments/person/1/medical-conditions",
                        "prescribedMedications": "/v1/enrolments/person/1/prescribed-medications",
                        "doctors": "/v1/enrolments/person/1/doctors"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchPerson",
      "summary": "Patch Person",
      "description": "Updates an existing person\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`person`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `contactCode` → String Person's `contactCode` [optional] [example: \"c4ca4238a0b923820dcc509a6f75849b\"]\n   * `firstName` → String Person's first name. [optional] [example: \"Jane\"]\n   * `middleNames` → String Person's space-separated list of middle names. [optional] [example: \"Sam Amanda\"]\n   * `lastName` → String Person's family name. [optional] [example: \"Doe\"]\n   * `legalLastName` → String Person's legal family name [optional] [example: \"Doe-Tchaikovsky\"]\n   * `preferredName` → String Person's preferred name [optional] [example: \"Janie\"]\n   * `title` → String Person's title. [optional] [example: \"Ms\"]\n   * `genderCode` → String Person's gender, must be one of SIF Sex Codes (http://specification.sifassociation.org/Implementation/AU/3.4.5/CodeSets.html#AUCodeSetsSexCodeType) [optional] [example: \"1\"] \nValue constraints:\nAllowed values: \"1\", \"2\", \"3\", \"9\", null\n   * `crn` → String Person's CRN [optional] [example: \"c8370653bf584bd7644ccb2ba1f39e78\"]\n   * `languageSpokenAtHomeCode` → String Person's language spoken at home, must be one of SIF Australian Standard Classification of Languages (http://specification.sifassociation.org/Implementation/AU/3.4.5/CodeSets.html#AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType) [optional] [example: \"1201\"]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `person` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "contactCode": {
                              "type": "string",
                              "description": "String Person's `contactCode` [optional] [example: \"c4ca4238a0b923820dcc509a6f75849b\"]"
                            },
                            "firstName": {
                              "type": "string",
                              "description": "String Person's first name. [optional] [example: \"Jane\"]"
                            },
                            "middleNames": {
                              "type": "string",
                              "description": "String Person's space-separated list of middle names. [optional] [example: \"Sam Amanda\"]"
                            },
                            "lastName": {
                              "type": "string",
                              "description": "String Person's family name. [optional] [example: \"Doe\"]"
                            },
                            "legalLastName": {
                              "type": "string",
                              "description": "String Person's legal family name [optional] [example: \"Doe-Tchaikovsky\"]"
                            },
                            "preferredName": {
                              "type": "string",
                              "description": "String Person's preferred name [optional] [example: \"Janie\"]"
                            },
                            "title": {
                              "type": "string",
                              "description": "String Person's title. [optional] [example: \"Ms\"]"
                            },
                            "genderCode": {
                              "type": "string",
                              "description": "String Person's gender, must be one of SIF Sex Codes (http://specification.sifassociation.org/Implementation/AU/3.4.5/CodeSets.html#AUCodeSetsSexCodeType) [optional] [example: \"1\"] \nValue constraints:\nAllowed values: \"1\", \"2\", \"3\", \"9\", null"
                            },
                            "crn": {
                              "type": "string",
                              "description": "String Person's CRN [optional] [example: \"c8370653bf584bd7644ccb2ba1f39e78\"]"
                            },
                            "languageSpokenAtHomeCode": {
                              "type": "string",
                              "description": "String Person's language spoken at home, must be one of SIF Australian Standard Classification of Languages (http://specification.sifassociation.org/Implementation/AU/3.4.5/CodeSets.html#AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType) [optional] [example: \"1201\"]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "person",
                    "id": 1,
                    "attributes": {
                      "contactCode": "c4ca4238a0b923820dcc509a6f75849b",
                      "firstName": "Jane",
                      "middleNames": "Sam Amanda",
                      "lastName": "Doe",
                      "legalLastName": "Doe-Tchaikovsky",
                      "preferredName": "Janie",
                      "title": "Ms",
                      "genderCode": "1",
                      "crn": "c8370653bf584bd7644ccb2ba1f39e78",
                      "languageSpokenAtHomeCode": "1201"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'person' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/person"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "person",
                      "id": "1",
                      "attributes": {
                        "externalId": null,
                        "refId": null,
                        "contactCode": null,
                        "name": "John",
                        "surname": "Doe",
                        "firstName": "John",
                        "middleNames": "Franz Stephen",
                        "lastName": "Doe",
                        "legalLastName": null,
                        "preferredName": null,
                        "email": "john.doe@example.com",
                        "title": null,
                        "givenNames": "Franz Stephen",
                        "gender": "Other",
                        "genderCode": "Other",
                        "dateOfBirth": null,
                        "crn": null,
                        "languageSpokenAtHome": null,
                        "languageSpokenAtHomeCode": null,
                        "countryOfCitizenship": null,
                        "religion": null,
                        "residentialStatus": null,
                        "isDeceased": false,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "primaryHousehold": {
                          "links": {
                            "related": "/v1/enrolments/person/1/primary-household"
                          }
                        },
                        "staff": {
                          "links": {
                            "related": "/v1/enrolments/person/1/staff"
                          }
                        },
                        "student": {
                          "links": {
                            "related": "/v1/enrolments/person/1/student"
                          }
                        },
                        "contactDetails": {
                          "links": {
                            "related": "/v1/enrolments/person/1/person-contact-details"
                          }
                        },
                        "otherHouseholds": {
                          "links": {
                            "related": "/v1/enrolments/person/1/other-households"
                          }
                        },
                        "studentContacts": {
                          "links": {
                            "related": "/v1/enrolments/person/1/student-contacts"
                          }
                        },
                        "medicalSummary": {
                          "links": {
                            "related": "/v1/enrolments/person/1/medical-summary"
                          }
                        },
                        "medicalConditions": {
                          "links": {
                            "related": "/v1/enrolments/person/1/medical-conditions"
                          }
                        },
                        "prescribedMedication": {
                          "links": {
                            "related": "/v1/enrolments/person/1/prescribed-medications"
                          }
                        },
                        "doctors": {
                          "links": {
                            "related": "/v1/enrolments/person/1/doctors"
                          }
                        },
                        "associatedStudents": {
                          "links": {
                            "related": "/v1/enrolments/person/1/associated-students"
                          }
                        },
                        "givenConsents": {
                          "links": {
                            "related": "/v1/enrolments/person/1/given-consents"
                          }
                        },
                        "givenConsentLinks": {
                          "links": {
                            "related": "/v1/enrolments/person/1/given-consent-links"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person/1",
                        "primaryHousehold": "/v1/enrolments/person/1/primary-household",
                        "otherHouseholds": "/v1/enrolments/person/1/other-households",
                        "staff": "/v1/enrolments/person/1/staff",
                        "student": "/v1/enrolments/person/1/student",
                        "studentContacts": "/v1/enrolments/person/1/student-contacts",
                        "associatedStudents": "/v1/enrolments/person/1/associated-students",
                        "medicalSummary": "/v1/enrolments/person/1/medical-summary",
                        "medicalConditions": "/v1/enrolments/person/1/medical-conditions",
                        "prescribedMedications": "/v1/enrolments/person/1/prescribed-medications",
                        "doctors": "/v1/enrolments/person/1/doctors"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/associated-students": {
    "get": {
      "operationId": "getPersonAssociatedStudents",
      "summary": "Get Person Associated Students",
      "description": "Retrieves all of the instances of ``, the relation `associatedStudents` of `studentPersonRelation`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentPersonRelation' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, studentPerson, person. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "hasPortalAccess",
          "required": false,
          "description": "Boolean Filter the list of relations by students which this person can access in the portal. [optional] [default: null] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "in": "query",
          "name": "withPastEnrolment",
          "required": false,
          "description": "Boolean Include students who have an enrolment with a type of: alumni, withdrawn, expelled, transferred [optional] [default: false] [example: FALSE]",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "in": "query",
          "name": "withCurrentEnrolment",
          "required": false,
          "description": "Boolean Include students who have an enrolment with a type of: active_pending, external_pending, active, external, active_leaving [optional] [default: 1] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "in": "query",
          "name": "withFutureEnrolment",
          "required": false,
          "description": "Boolean Include students who have an enrolment with a type of: accepted, confirmed [optional] [default: false] [example: FALSE]",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "in": "query",
          "name": "withOtherEnrolment",
          "required": false,
          "description": "Boolean Include students who have an enrolment with a type of: enquired, applied, interview_review, interview_required, tested_successful, tested_unsuccessful, offered, waitlist_offered, waitlist_offered_rejected, waitlist_offered_to_send, waitlisted, offered_to_send, offered_rejected, not_approved, never_attended, draft, transitioning_students, under_appeal, leave_of_absence [optional] [default: false] [example: FALSE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentPersonRelation' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentPersonRelation"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "studentId": 2,
                          "personId": 3,
                          "priority": 2,
                          "isAuthorisedPickup": false,
                          "isEmergencyContact": false,
                          "isFinanciallyResponsible": false,
                          "isFinanciallyResponsibleForActivities": false,
                          "isPrimaryContact": false,
                          "livesWith": false,
                          "relationType": 10,
                          "relationName": "Sibling",
                          "receivesMail": false,
                          "receivesReports": false,
                          "receivesPortalAccess": false,
                          "receivesCorrespondence": false,
                          "receivesAbsences": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student"
                            }
                          },
                          "studentPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student-person"
                            }
                          },
                          "person": {
                            "data": {
                              "id": "3",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-contact/1",
                          "student": "/v1/enrolments/student-contact/1/student"
                        }
                      },
                      {
                        "type": "studentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "studentId": 2,
                          "personId": 3,
                          "priority": 2,
                          "isAuthorisedPickup": false,
                          "isEmergencyContact": false,
                          "isFinanciallyResponsible": false,
                          "isFinanciallyResponsibleForActivities": false,
                          "isPrimaryContact": false,
                          "livesWith": false,
                          "relationType": 10,
                          "relationName": "Sibling",
                          "receivesMail": false,
                          "receivesReports": false,
                          "receivesPortalAccess": false,
                          "receivesCorrespondence": false,
                          "receivesAbsences": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student"
                            }
                          },
                          "studentPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student-person"
                            }
                          },
                          "person": {
                            "data": {
                              "id": "3",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-contact/1",
                          "student": "/v1/enrolments/student-contact/1/student"
                        }
                      },
                      {
                        "type": "studentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "studentId": 2,
                          "personId": 3,
                          "priority": 2,
                          "isAuthorisedPickup": false,
                          "isEmergencyContact": false,
                          "isFinanciallyResponsible": false,
                          "isFinanciallyResponsibleForActivities": false,
                          "isPrimaryContact": false,
                          "livesWith": false,
                          "relationType": 10,
                          "relationName": "Sibling",
                          "receivesMail": false,
                          "receivesReports": false,
                          "receivesPortalAccess": false,
                          "receivesCorrespondence": false,
                          "receivesAbsences": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student"
                            }
                          },
                          "studentPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student-person"
                            }
                          },
                          "person": {
                            "data": {
                              "id": "3",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-contact/1",
                          "student": "/v1/enrolments/student-contact/1/student"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/disabilities": {
    "get": {
      "operationId": "getPersonDisabilities",
      "summary": "Get Person Disabilities",
      "description": "Returns all disabilities of a specific person",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of 'person' whose `disability*` models to retrieve. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: disabilityOther.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/disabilityOther"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "disabilityOther",
                        "id": "1",
                        "attributes": {
                          "name": "Missing Limb",
                          "details": "Missing left leg from the knee down.",
                          "receivesFunding": false,
                          "hasCarePlanProvided": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/disability-other/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/doctors": {
    "get": {
      "operationId": "getPersonDoctors",
      "summary": "Get Person Doctors",
      "description": "Retrieves all of the instances of ``, the relation `doctors` of `doctor`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'doctor' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: patient. [optional] [default: null] [example: \"patient\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'doctor' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/doctor"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "doctor",
                        "id": "1",
                        "attributes": {
                          "type": "gp",
                          "name": "Gloria McDoe",
                          "practiceName": "McPractice",
                          "address": "6 Bayley Street TANTARABOO",
                          "phone": "(03) 8070 5665",
                          "consentToContact": false
                        },
                        "relationships": {
                          "patient": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/doctor/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/doctor/1",
                          "patient": "/v1/enrolments/doctor/1/person"
                        }
                      },
                      {
                        "type": "doctor",
                        "id": "1",
                        "attributes": {
                          "type": "gp",
                          "name": "Gloria McDoe",
                          "practiceName": "McPractice",
                          "address": "6 Bayley Street TANTARABOO",
                          "phone": "(03) 8070 5665",
                          "consentToContact": false
                        },
                        "relationships": {
                          "patient": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/doctor/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/doctor/1",
                          "patient": "/v1/enrolments/doctor/1/person"
                        }
                      },
                      {
                        "type": "doctor",
                        "id": "1",
                        "attributes": {
                          "type": "gp",
                          "name": "Gloria McDoe",
                          "practiceName": "McPractice",
                          "address": "6 Bayley Street TANTARABOO",
                          "phone": "(03) 8070 5665",
                          "consentToContact": false
                        },
                        "relationships": {
                          "patient": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/doctor/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/doctor/1",
                          "patient": "/v1/enrolments/doctor/1/person"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/given-consent-links": {
    "get": {
      "operationId": "getPersonGivenConsentLinks",
      "summary": "Get Person Given Consent Links",
      "description": "Retrieves a page of the instances of ``, the relation `givenConsentLinks` of `personConsentLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'personConsentLink' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person, consent, consentedBy. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'personConsentLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/personConsentLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "personConsentLink",
                        "id": "1",
                        "attributes": {
                          "consentDate": "2018-06-01",
                          "consentGiven": false,
                          "createdAt": null,
                          "updatedAt": null
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "consent": {
                            "data": {
                              "id": "1",
                              "type": "consent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-consent-link/1",
                          "person": "/v1/enrolments/person/1",
                          "consent": "/v1/enrolments/consent/1"
                        }
                      },
                      {
                        "type": "personConsentLink",
                        "id": "1",
                        "attributes": {
                          "consentDate": "2018-06-01",
                          "consentGiven": false,
                          "createdAt": null,
                          "updatedAt": null
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "consent": {
                            "data": {
                              "id": "1",
                              "type": "consent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-consent-link/1",
                          "person": "/v1/enrolments/person/1",
                          "consent": "/v1/enrolments/consent/1"
                        }
                      },
                      {
                        "type": "personConsentLink",
                        "id": "1",
                        "attributes": {
                          "consentDate": "2018-06-01",
                          "consentGiven": false,
                          "createdAt": null,
                          "updatedAt": null
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "consent": {
                            "data": {
                              "id": "1",
                              "type": "consent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/person-consent-link/1",
                          "person": "/v1/enrolments/person/1",
                          "consent": "/v1/enrolments/consent/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/given-consents": {
    "get": {
      "operationId": "getPersonGivenConsents",
      "summary": "Get Person Given Consents",
      "description": "Retrieves a page of the instances of ``, the relation `givenConsents` of `consent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'consent' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'consent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/consent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "consent",
                        "id": "1",
                        "attributes": {
                          "type": "General Consent",
                          "details": "Consent to use school resources",
                          "isInactive": false
                        },
                        "links": {
                          "self": "/v1/enrolments/consent/1"
                        }
                      },
                      {
                        "type": "consent",
                        "id": "1",
                        "attributes": {
                          "type": "General Consent",
                          "details": "Consent to use school resources",
                          "isInactive": false
                        },
                        "links": {
                          "self": "/v1/enrolments/consent/1"
                        }
                      },
                      {
                        "type": "consent",
                        "id": "1",
                        "attributes": {
                          "type": "General Consent",
                          "details": "Consent to use school resources",
                          "isInactive": false
                        },
                        "links": {
                          "self": "/v1/enrolments/consent/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/medical-conditions": {
    "get": {
      "operationId": "getPersonMedicalConditions",
      "summary": "Get Person Medical Conditions",
      "description": "Returns all medical conditions of a specific person",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "name",
          "required": false,
          "description": "String Search for condition name. By default it looks for an exact match, but special characters `_` and `%` can be used to look for, respectively, any single character or zero or more characters.\n For example, `Test_` will match `Test1`, `TestB` but not `Test` or `TestLong`, while `Test%` will match all of them. These special characters can be escaped by prepending them with a backslach `\\`. [optional] [default: null] [example: \"Diabe*\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: medicalConditionAdd, medicalConditionAllergy, medicalConditionAsthma, medicalConditionDiabetes, medicalConditionDietary, medicalConditionEpilepsy, medicalConditionOther.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/medicalConditionAdd"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionAllergy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionAsthma"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionDiabetes"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionDietary"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionEpilepsy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionOther"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalConditionAdd",
                        "id": "1",
                        "attributes": {
                          "name": "Add",
                          "hasCarePlanProvided": false,
                          "isInattentive": true,
                          "isHyperactive": false,
                          "isMedicationRequired": false,
                          "isDoctorsLetterProvided": false,
                          "details": null,
                          "additionalInformation": ""
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionAllergy",
                        "id": "1",
                        "attributes": {
                          "name": "Allergy",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "allergyName": null,
                          "severity": "mild",
                          "isPrescribedAntihistamine": false,
                          "isPrescribedEpiPen": false,
                          "hasEpiPenRegistered": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-allergy/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionAsthma",
                        "id": "1",
                        "attributes": {
                          "name": "Asthma",
                          "details": "Very rare attacks",
                          "additionalInformation": "",
                          "severity": "mild",
                          "dosage": "No dosage",
                          "type": "Non-allergic asthma",
                          "hasCarePlanProvided": false,
                          "isPrescribedSalbutamol": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-asthma/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionDiabetes",
                        "id": "1",
                        "attributes": {
                          "name": "Diabetes",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "hasInsulinInjections": false,
                          "hasInsulinPump": false,
                          "hasGlucagon": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-diabetes/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionDietary",
                        "id": "1",
                        "attributes": {
                          "name": "dietary",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "dietaryName": "Lactose Intolerance"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionEpilepsy",
                        "id": "1",
                        "attributes": {
                          "name": "Epilepsy",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "type": "absence seizures"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-epilepsy/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionOther",
                        "id": "1",
                        "attributes": {
                          "hasCarePlanProvided": false,
                          "details": null,
                          "additionalInformation": "Student suffers from chronic sneezing bouts that can last for a couple of minutes; good classroom ventiallation recommended.",
                          "name": "Chronic Sneezing"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-other/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/medical-summary": {
    "get": {
      "operationId": "getPersonMedicalSummary",
      "summary": "Get Person Medical Summary",
      "description": "Returns summary of medical information for a person (Return description pending)",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: vaccination, doctor, medicalConditionAdd, medicalConditionAllergy, medicalConditionAsthma, medicalConditionDiabetes, medicalConditionDietary, medicalConditionEpilepsy, medicalConditionOther, prescribedMedication.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/vaccination"
                        },
                        {
                          "$ref": "#/components/schemas/doctor"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionAdd"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionAllergy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionAsthma"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionDiabetes"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionDietary"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionEpilepsy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalConditionOther"
                        },
                        {
                          "$ref": "#/components/schemas/prescribedMedication"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "vaccination",
                        "id": "1",
                        "attributes": {
                          "name": "Polio Vaccination",
                          "dateOfVaccination": "2017-01-01",
                          "comment": "This is a comment"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/vaccination/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/vaccination/1"
                        }
                      },
                      {
                        "type": "doctor",
                        "id": "1",
                        "attributes": {
                          "type": "gp",
                          "name": "Gloria McDoe",
                          "practiceName": "McPractice",
                          "address": "6 Bayley Street TANTARABOO",
                          "phone": "(03) 8070 5665",
                          "consentToContact": false
                        },
                        "relationships": {
                          "patient": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/doctor/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/doctor/1",
                          "patient": "/v1/enrolments/doctor/1/person"
                        }
                      },
                      {
                        "type": "medicalConditionAdd",
                        "id": "1",
                        "attributes": {
                          "name": "Add",
                          "hasCarePlanProvided": false,
                          "isInattentive": true,
                          "isHyperactive": false,
                          "isMedicationRequired": false,
                          "isDoctorsLetterProvided": false,
                          "details": null,
                          "additionalInformation": ""
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionAllergy",
                        "id": "1",
                        "attributes": {
                          "name": "Allergy",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "allergyName": null,
                          "severity": "mild",
                          "isPrescribedAntihistamine": false,
                          "isPrescribedEpiPen": false,
                          "hasEpiPenRegistered": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-allergy/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionAsthma",
                        "id": "1",
                        "attributes": {
                          "name": "Asthma",
                          "details": "Very rare attacks",
                          "additionalInformation": "",
                          "severity": "mild",
                          "dosage": "No dosage",
                          "type": "Non-allergic asthma",
                          "hasCarePlanProvided": false,
                          "isPrescribedSalbutamol": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-asthma/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionDiabetes",
                        "id": "1",
                        "attributes": {
                          "name": "Diabetes",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "hasInsulinInjections": false,
                          "hasInsulinPump": false,
                          "hasGlucagon": false
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-diabetes/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionDietary",
                        "id": "1",
                        "attributes": {
                          "name": "dietary",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "dietaryName": "Lactose Intolerance"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionEpilepsy",
                        "id": "1",
                        "attributes": {
                          "name": "Epilepsy",
                          "details": null,
                          "additionalInformation": "",
                          "hasCarePlanProvided": false,
                          "type": "absence seizures"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-epilepsy/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalConditionOther",
                        "id": "1",
                        "attributes": {
                          "hasCarePlanProvided": false,
                          "details": null,
                          "additionalInformation": "Student suffers from chronic sneezing bouts that can last for a couple of minutes; good classroom ventiallation recommended.",
                          "name": "Chronic Sneezing"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "carePlanFile": {
                            "links": {
                              "related": "/v1/enrolments/medical-condition-other/1/care-plan-file"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/medical-condition/1",
                          "person": "/v1/enrolments/person/1",
                          "carePlanFile": "/v1/enrolments/medical-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "prescribedMedication",
                        "id": "1",
                        "attributes": {
                          "name": "Aspirin",
                          "dosage": "Once a day, at 12AM",
                          "type": null,
                          "details": null,
                          "isPrescribed": false,
                          "isTakenAtSchool": false,
                          "isLongTerm": false,
                          "anticipatedStopDate": null
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/prescribed-medication/1",
                          "person": "/v1/enrolments/person/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/other-households": {
    "get": {
      "operationId": "getPersonOtherHouseholds",
      "summary": "Get Person Other Households",
      "description": "Retrieves all of the instances of ``, the relation `otherHouseholds` of `household`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'household' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: addresses. [optional] [default: null] [example: \"addresses\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'household' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/household"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "household",
                        "id": "1",
                        "attributes": {
                          "address": null,
                          "mailingTitle": ""
                        },
                        "links": {
                          "self": "/v1/enrolments/household/1",
                          "addresses": "/v1/enrolments/household/1/addresses"
                        }
                      },
                      {
                        "type": "household",
                        "id": "1",
                        "attributes": {
                          "address": null,
                          "mailingTitle": ""
                        },
                        "links": {
                          "self": "/v1/enrolments/household/1",
                          "addresses": "/v1/enrolments/household/1/addresses"
                        }
                      },
                      {
                        "type": "household",
                        "id": "1",
                        "attributes": {
                          "address": null,
                          "mailingTitle": ""
                        },
                        "links": {
                          "self": "/v1/enrolments/household/1",
                          "addresses": "/v1/enrolments/household/1/addresses"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/person-contact-details": {
    "get": {
      "operationId": "getPersonRelatedPersonContactDetails",
      "summary": "Get Person Related Person Contact Details",
      "description": "Retrieves a single instance of ``, the relation `staff` of `personContactDetails`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'personContactDetails' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'personContactDetails' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/personContactDetails"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "personContactDetails",
                      "id": "",
                      "attributes": {
                        "educationLevel": 1,
                        "tertiaryEducationLevel": 5,
                        "occupation": "Carpenter",
                        "employer": "John Doe's Carpentry Shop",
                        "employmentType": 1,
                        "workplaceLocation": "Wood Street 73/2, Forestburg",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/enrolments/person-contact-details/"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/prescribed-medications": {
    "get": {
      "operationId": "getPersonPrescribedMedications",
      "summary": "Get Person Prescribed Medications",
      "description": "Retrieves all of the instances of ``, the relation `prescribedMedications` of `prescribedMedication`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'prescribedMedication' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'prescribedMedication' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/prescribedMedication"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "prescribedMedication",
                        "id": "1",
                        "attributes": {
                          "name": "Aspirin",
                          "dosage": "Once a day, at 12AM",
                          "type": null,
                          "details": null,
                          "isPrescribed": false,
                          "isTakenAtSchool": false,
                          "isLongTerm": false,
                          "anticipatedStopDate": null
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/prescribed-medication/1",
                          "person": "/v1/enrolments/person/1"
                        }
                      },
                      {
                        "type": "prescribedMedication",
                        "id": "1",
                        "attributes": {
                          "name": "Aspirin",
                          "dosage": "Once a day, at 12AM",
                          "type": null,
                          "details": null,
                          "isPrescribed": false,
                          "isTakenAtSchool": false,
                          "isLongTerm": false,
                          "anticipatedStopDate": null
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/prescribed-medication/1",
                          "person": "/v1/enrolments/person/1"
                        }
                      },
                      {
                        "type": "prescribedMedication",
                        "id": "1",
                        "attributes": {
                          "name": "Aspirin",
                          "dosage": "Once a day, at 12AM",
                          "type": null,
                          "details": null,
                          "isPrescribed": false,
                          "isTakenAtSchool": false,
                          "isLongTerm": false,
                          "anticipatedStopDate": null
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/prescribed-medication/1",
                          "person": "/v1/enrolments/person/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/primary-household": {
    "get": {
      "operationId": "getPersonPrimaryHousehold",
      "summary": "Get Person Primary Household",
      "description": "Retrieves a single instance of ``, the relation `primaryHousehold` of `household`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'household' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: addresses. [optional] [default: null] [example: \"addresses\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'household' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/household"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "household",
                      "id": "1",
                      "attributes": {
                        "address": null,
                        "mailingTitle": ""
                      },
                      "links": {
                        "self": "/v1/enrolments/household/1",
                        "addresses": "/v1/enrolments/household/1/addresses"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/staff": {
    "get": {
      "operationId": "getPersonStaff",
      "summary": "Get Person Staff",
      "description": "Retrieves a single instance of ``, the relation `staff` of `staff`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'staff' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person, qualifications, employments. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'staff' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/staff"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "staff",
                      "id": "1",
                      "attributes": {
                        "staffCode": "978020137962",
                        "timetableCode": "978020137962",
                        "barcode": "9031101",
                        "emergencyContactName": "John",
                        "emergencyContactPhone": "(03) 8070 5665",
                        "emergencyContactMobile": "(03) 8070 5665",
                        "employmentStatus": 2,
                        "employmentClassification": "teaching",
                        "jobTitle": "Teacher",
                        "contractCommencementDate": "2018-10-01",
                        "contractExpiryDate": "2018-10-01",
                        "wWCCNumber": "9031101",
                        "wWCCStatus": null,
                        "wWCCExpiryDate": "2018-10-01",
                        "codeOfConductDateSigned": "2018-10-01",
                        "socialNetworkingPolicyDateSigned": "2018-10-01",
                        "childProtectionPolicyDateSigned": "2018-10-01",
                        "iCTPolicyDateSigned": "2018-10-01",
                        "firstAidExpiryDate": "2018-10-01",
                        "resuscitationExpiryDate": "2018-10-01",
                        "publicLiabilityExpiryDate": "2018-10-01",
                        "aGSNumber": "978020137962",
                        "positionNumber": null,
                        "payRate": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "person": {
                          "links": {
                            "related": "/v1/enrolments/staff/1/person"
                          }
                        },
                        "absences": {
                          "links": {
                            "related": "/v1/enrolments/staff/1/absences"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/staff/1",
                        "person": "/v1/enrolments/staff/1/person",
                        "absences": "/v1/enrolments/staff/1/absences"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/student": {
    "get": {
      "operationId": "getPersonStudent",
      "summary": "Get Person Student",
      "description": "Retrieves a single instance of ``, the relation `student` of `student`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'student' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'student' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/student"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "student",
                      "id": "1",
                      "attributes": {
                        "studentCode": null,
                        "barcode": null,
                        "permissionToPhotograph": true,
                        "examNumber": null,
                        "usiId": null,
                        "isEligibleForDiscount": false,
                        "acaraId": null,
                        "systemStudentId": null,
                        "refId": null,
                        "ealStage": null,
                        "ealIsReceivingSupport": null,
                        "ealLastAssessmentAt": null,
                        "isSubjectToCourtOrders": false,
                        "courtOrderInformation": null,
                        "studentFirstLanguage": null,
                        "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                        "languageOtherThanEnglishSpokenAtHome": false,
                        "studentMainlySpeaksEnglishAtHome": false,
                        "loteBackground": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "primaryEnrolment": {
                          "links": {
                            "related": "/v1/enrolments/student/1/primaryEnrolment"
                          }
                        },
                        "person": {
                          "links": {
                            "related": "/v1/enrolments/student/1/person"
                          }
                        },
                        "activities": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activities"
                          }
                        },
                        "activityLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activity-links"
                          }
                        },
                        "photo": {
                          "links": {
                            "related": "/v1/enrolments/student/1/photo"
                          }
                        },
                        "documents": {
                          "links": {
                            "related": "/v1/enrolments/student/1/documents"
                          }
                        },
                        "tenants": {
                          "links": {
                            "related": "/v1/enrolments/student/1/tenants"
                          }
                        },
                        "flags": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flags"
                          }
                        },
                        "flagLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flagLinks"
                          }
                        },
                        "awards": {
                          "links": {
                            "related": "/v1/enrolments/student/1/awards"
                          }
                        },
                        "awardLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/award-links"
                          }
                        },
                        "households": {
                          "links": {
                            "related": "/v1/enrolments/student/1/households"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/student/1",
                        "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                        "person": "/v1/enrolments/student/1/person",
                        "activities": "/v1/enrolments/student/1/activities",
                        "activityLinks": "/v1/enrolments/student/1/activity-links",
                        "photo": "/v1/enrolments/student/1/photo",
                        "documents": "/v1/enrolments/student/1/documents",
                        "tenants": "/v1/enrolments/student/1/tenants",
                        "flags": "/v1/enrolments/student/1/flags",
                        "flagLinks": "/v1/enrolments/student/1/flag-links"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/student-contacts": {
    "get": {
      "operationId": "getPersonStudentContacts",
      "summary": "Get Person Student Contacts",
      "description": "Retrieves all instances of studentPersonRelation.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the person whose contacts should be retrieved.",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, studentPerson, person. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentPersonRelation' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentPersonRelation"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "studentId": 2,
                          "personId": 3,
                          "priority": 2,
                          "isAuthorisedPickup": false,
                          "isEmergencyContact": false,
                          "isFinanciallyResponsible": false,
                          "isFinanciallyResponsibleForActivities": false,
                          "isPrimaryContact": false,
                          "livesWith": false,
                          "relationType": 10,
                          "relationName": "Sibling",
                          "receivesMail": false,
                          "receivesReports": false,
                          "receivesPortalAccess": false,
                          "receivesCorrespondence": false,
                          "receivesAbsences": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student"
                            }
                          },
                          "studentPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student-person"
                            }
                          },
                          "person": {
                            "data": {
                              "id": "3",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-contact/1",
                          "student": "/v1/enrolments/student-contact/1/student"
                        }
                      },
                      {
                        "type": "studentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "studentId": 2,
                          "personId": 3,
                          "priority": 2,
                          "isAuthorisedPickup": false,
                          "isEmergencyContact": false,
                          "isFinanciallyResponsible": false,
                          "isFinanciallyResponsibleForActivities": false,
                          "isPrimaryContact": false,
                          "livesWith": false,
                          "relationType": 10,
                          "relationName": "Sibling",
                          "receivesMail": false,
                          "receivesReports": false,
                          "receivesPortalAccess": false,
                          "receivesCorrespondence": false,
                          "receivesAbsences": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student"
                            }
                          },
                          "studentPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student-person"
                            }
                          },
                          "person": {
                            "data": {
                              "id": "3",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-contact/1",
                          "student": "/v1/enrolments/student-contact/1/student"
                        }
                      },
                      {
                        "type": "studentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "studentId": 2,
                          "personId": 3,
                          "priority": 2,
                          "isAuthorisedPickup": false,
                          "isEmergencyContact": false,
                          "isFinanciallyResponsible": false,
                          "isFinanciallyResponsibleForActivities": false,
                          "isPrimaryContact": false,
                          "livesWith": false,
                          "relationType": 10,
                          "relationName": "Sibling",
                          "receivesMail": false,
                          "receivesReports": false,
                          "receivesPortalAccess": false,
                          "receivesCorrespondence": false,
                          "receivesAbsences": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student"
                            }
                          },
                          "studentPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student-person"
                            }
                          },
                          "person": {
                            "data": {
                              "id": "3",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-contact/1",
                          "student": "/v1/enrolments/student-contact/1/student"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/person/{id}/vaccinations": {
    "get": {
      "operationId": "getPersonVaccinations",
      "summary": "Get Person Vaccinations",
      "description": "Retrieves all of the instances of ``, the relation `vaccinations` of `vaccination`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'vaccination' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'vaccination' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/vaccination"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "vaccination",
                        "id": "1",
                        "attributes": {
                          "name": "Polio Vaccination",
                          "dateOfVaccination": "2017-01-01",
                          "comment": "This is a comment"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/vaccination/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/vaccination/1"
                        }
                      },
                      {
                        "type": "vaccination",
                        "id": "1",
                        "attributes": {
                          "name": "Polio Vaccination",
                          "dateOfVaccination": "2017-01-01",
                          "comment": "This is a comment"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/vaccination/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/vaccination/1"
                        }
                      },
                      {
                        "type": "vaccination",
                        "id": "1",
                        "attributes": {
                          "name": "Polio Vaccination",
                          "dateOfVaccination": "2017-01-01",
                          "comment": "This is a comment"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/vaccination/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/vaccination/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/prescribed-medication": {
    "get": {
      "operationId": "getPrescribedMedications",
      "summary": "Get Prescribed Medications",
      "description": "Retrieves a page of instances of `prescribedMedication`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'prescribedMedication' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/prescribedMedication"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "prescribedMedication",
                        "id": "1",
                        "attributes": {
                          "name": "Aspirin",
                          "dosage": "Once a day, at 12AM",
                          "type": null,
                          "details": null,
                          "isPrescribed": false,
                          "isTakenAtSchool": false,
                          "isLongTerm": false,
                          "anticipatedStopDate": null
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/prescribed-medication/1",
                          "person": "/v1/enrolments/person/1"
                        }
                      },
                      {
                        "type": "prescribedMedication",
                        "id": "1",
                        "attributes": {
                          "name": "Aspirin",
                          "dosage": "Once a day, at 12AM",
                          "type": null,
                          "details": null,
                          "isPrescribed": false,
                          "isTakenAtSchool": false,
                          "isLongTerm": false,
                          "anticipatedStopDate": null
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/prescribed-medication/1",
                          "person": "/v1/enrolments/person/1"
                        }
                      },
                      {
                        "type": "prescribedMedication",
                        "id": "1",
                        "attributes": {
                          "name": "Aspirin",
                          "dosage": "Once a day, at 12AM",
                          "type": null,
                          "details": null,
                          "isPrescribed": false,
                          "isTakenAtSchool": false,
                          "isLongTerm": false,
                          "anticipatedStopDate": null
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/prescribed-medication/1",
                          "person": "/v1/enrolments/person/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/prescribed-medication/{id}": {
    "get": {
      "operationId": "getPrescribedMedication",
      "summary": "Get Prescribed Medication",
      "description": "Retrieves a single instance of `prescribedMedication`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'prescribedMedication' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'prescribedMedication' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/prescribedMedication"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "prescribedMedication",
                      "id": "1",
                      "attributes": {
                        "name": "Aspirin",
                        "dosage": "Once a day, at 12AM",
                        "type": null,
                        "details": null,
                        "isPrescribed": false,
                        "isTakenAtSchool": false,
                        "isLongTerm": false,
                        "anticipatedStopDate": null
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/prescribed-medication/1",
                        "person": "/v1/enrolments/person/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/rollclass": {
    "get": {
      "operationId": "getRollclasses",
      "summary": "Get Rollclasses",
      "description": "Retrieves a page of instances of `rollclass`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "schoolIds",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'rollclass' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/rollclass"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "rollclass",
                        "id": "1",
                        "attributes": {
                          "name": "1A",
                          "isPastoralCare": false,
                          "pastoral_care": false,
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/rollclass/1",
                          "teacher": "/v1/enrolments/staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "rollclass",
                        "id": "1",
                        "attributes": {
                          "name": "1A",
                          "isPastoralCare": false,
                          "pastoral_care": false,
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/rollclass/1",
                          "teacher": "/v1/enrolments/staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "rollclass",
                        "id": "1",
                        "attributes": {
                          "name": "1A",
                          "isPastoralCare": false,
                          "pastoral_care": false,
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/rollclass/1",
                          "teacher": "/v1/enrolments/staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/rollclass/{id}": {
    "get": {
      "operationId": "getRollclass",
      "summary": "Get Rollclass",
      "description": "Retrieves a single instance of `rollclass`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'rollclass' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'rollclass' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/rollclass"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "rollclass",
                      "id": "1",
                      "attributes": {
                        "name": "1A",
                        "isPastoralCare": false,
                        "pastoral_care": false,
                        "refId": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "teacher": {
                          "data": {
                            "id": "1",
                            "type": "staff"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/rollclass/1",
                        "teacher": "/v1/enrolments/staff/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/rollclass/{id}/students": {
    "get": {
      "operationId": "getRollclassStudents",
      "summary": "Get Rollclass Students",
      "description": "Retrieves a page of the instances of ``, the relation `students` of `student`. Only active students with active enrollment will be included in the results.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'student' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'student' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/student"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/school": {
    "get": {
      "operationId": "getSchools",
      "summary": "Get Schools",
      "description": "Retrieves a page of instances of `school`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: tenant. [optional] [default: null] [example: \"tenant\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'school' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/school"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "school",
                        "id": "1",
                        "attributes": {
                          "name": "School 1",
                          "schoolCode": "a7bd8e",
                          "sequence": 1,
                          "isActive": true
                        },
                        "relationships": {
                          "tenant": {
                            "data": {
                              "id": "1",
                              "type": "tenant"
                            },
                            "links": {
                              "related": "/v1/enrolments/school/1/tenant"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/school/1",
                          "tenant": "/v1/enrolments/school/1/tenant"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "school",
                        "id": "1",
                        "attributes": {
                          "name": "School 1",
                          "schoolCode": "a7bd8e",
                          "sequence": 1,
                          "isActive": true
                        },
                        "relationships": {
                          "tenant": {
                            "data": {
                              "id": "1",
                              "type": "tenant"
                            },
                            "links": {
                              "related": "/v1/enrolments/school/1/tenant"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/school/1",
                          "tenant": "/v1/enrolments/school/1/tenant"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "school",
                        "id": "1",
                        "attributes": {
                          "name": "School 1",
                          "schoolCode": "a7bd8e",
                          "sequence": 1,
                          "isActive": true
                        },
                        "relationships": {
                          "tenant": {
                            "data": {
                              "id": "1",
                              "type": "tenant"
                            },
                            "links": {
                              "related": "/v1/enrolments/school/1/tenant"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/school/1",
                          "tenant": "/v1/enrolments/school/1/tenant"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/school/{id}": {
    "get": {
      "operationId": "getSchool",
      "summary": "Get School",
      "description": "Retrieves a single instance of `school`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'school' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: tenant. [optional] [default: null] [example: \"tenant\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'school' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/school"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "school",
                      "id": "1",
                      "attributes": {
                        "name": "School 1",
                        "schoolCode": "a7bd8e",
                        "sequence": 1,
                        "isActive": true
                      },
                      "relationships": {
                        "tenant": {
                          "data": {
                            "id": "1",
                            "type": "tenant"
                          },
                          "links": {
                            "related": "/v1/enrolments/school/1/tenant"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/school/1",
                        "tenant": "/v1/enrolments/school/1/tenant"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/school/{id}/tenant": {
    "get": {
      "operationId": "getSchoolTenant",
      "summary": "Get School Tenant",
      "description": "Retrieves a single instance of ``, the relation `tenant` of `tenant`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'tenant' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: schools. [optional] [default: null] [example: \"schools\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'tenant' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/tenant"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "tenant",
                      "id": "1",
                      "attributes": {
                        "name": "School 1 Tenant",
                        "code": "a7bd8e",
                        "region": "SA",
                        "key": "14738a",
                        "timezone": "Australia/Sydney",
                        "isActive": true
                      },
                      "relationships": {
                        "schools": {
                          "links": {
                            "related": "/v1/enterprise/tenant/1/schools"
                          }
                        },
                        "termDates": {
                          "links": {
                            "related": "/v1/enterprise/tenant/1/term-dates"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enterprise/tenant/1",
                        "schools": "/v1/enterprise/tenant/1/schools"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/special-needs-program": {
    "get": {
      "operationId": "getSpecialNeedsPrograms",
      "summary": "Get Special Needs Programs",
      "description": "Retrieves a page of instances of `specialNeedsProgram`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: students. [optional] [default: null] [example: \"students\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "studentIds",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'specialNeedsProgram' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/specialNeedsProgram"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "specialNeedsProgram",
                        "id": "1",
                        "attributes": {
                          "name": "Attendance Improvement"
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/special-needs-program/1"
                        }
                      },
                      {
                        "type": "specialNeedsProgram",
                        "id": "1",
                        "attributes": {
                          "name": "Attendance Improvement"
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/special-needs-program/1"
                        }
                      },
                      {
                        "type": "specialNeedsProgram",
                        "id": "1",
                        "attributes": {
                          "name": "Attendance Improvement"
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/special-needs-program/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/special-needs-program/{id}": {
    "get": {
      "operationId": "getSpecialNeedsProgram",
      "summary": "Get Special Needs Program",
      "description": "Retrieves a single instance of `specialNeedsProgram`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'specialNeedsProgram' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: students. [optional] [default: null] [example: \"students\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'specialNeedsProgram' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/specialNeedsProgram"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "specialNeedsProgram",
                      "id": "1",
                      "attributes": {
                        "name": "Attendance Improvement"
                      },
                      "relationships": {
                        "school": {
                          "data": {
                            "id": "1",
                            "type": "school"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/special-needs-program/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/staff": {
    "get": {
      "operationId": "getStaffs",
      "summary": "Get Staffs",
      "description": "Retrieves a page of instances of `staff`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person, qualifications, employments. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "barcodes",
          "required": false,
          "description": "String Comma-separated list of barcodes to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "staffCodes",
          "required": false,
          "description": "String Comma-separated list of staffCodes to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "refIds",
          "required": false,
          "description": "String Comma-separated list of refIds to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "contactCodes",
          "required": false,
          "description": "String Comma-separated list of contactCodes to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "externalIds",
          "required": false,
          "description": "String Comma-separated list of externalIds to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'staff' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/staff"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "staff",
                        "id": "1",
                        "attributes": {
                          "staffCode": "978020137962",
                          "timetableCode": "978020137962",
                          "barcode": "9031101",
                          "emergencyContactName": "John",
                          "emergencyContactPhone": "(03) 8070 5665",
                          "emergencyContactMobile": "(03) 8070 5665",
                          "employmentStatus": 2,
                          "employmentClassification": "teaching",
                          "jobTitle": "Teacher",
                          "contractCommencementDate": "2018-10-01",
                          "contractExpiryDate": "2018-10-01",
                          "wWCCNumber": "9031101",
                          "wWCCStatus": null,
                          "wWCCExpiryDate": "2018-10-01",
                          "codeOfConductDateSigned": "2018-10-01",
                          "socialNetworkingPolicyDateSigned": "2018-10-01",
                          "childProtectionPolicyDateSigned": "2018-10-01",
                          "iCTPolicyDateSigned": "2018-10-01",
                          "firstAidExpiryDate": "2018-10-01",
                          "resuscitationExpiryDate": "2018-10-01",
                          "publicLiabilityExpiryDate": "2018-10-01",
                          "aGSNumber": "978020137962",
                          "positionNumber": null,
                          "payRate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/person"
                            }
                          },
                          "absences": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/absences"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/staff/1",
                          "person": "/v1/enrolments/staff/1/person",
                          "absences": "/v1/enrolments/staff/1/absences"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "staff",
                        "id": "1",
                        "attributes": {
                          "staffCode": "978020137962",
                          "timetableCode": "978020137962",
                          "barcode": "9031101",
                          "emergencyContactName": "John",
                          "emergencyContactPhone": "(03) 8070 5665",
                          "emergencyContactMobile": "(03) 8070 5665",
                          "employmentStatus": 2,
                          "employmentClassification": "teaching",
                          "jobTitle": "Teacher",
                          "contractCommencementDate": "2018-10-01",
                          "contractExpiryDate": "2018-10-01",
                          "wWCCNumber": "9031101",
                          "wWCCStatus": null,
                          "wWCCExpiryDate": "2018-10-01",
                          "codeOfConductDateSigned": "2018-10-01",
                          "socialNetworkingPolicyDateSigned": "2018-10-01",
                          "childProtectionPolicyDateSigned": "2018-10-01",
                          "iCTPolicyDateSigned": "2018-10-01",
                          "firstAidExpiryDate": "2018-10-01",
                          "resuscitationExpiryDate": "2018-10-01",
                          "publicLiabilityExpiryDate": "2018-10-01",
                          "aGSNumber": "978020137962",
                          "positionNumber": null,
                          "payRate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/person"
                            }
                          },
                          "absences": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/absences"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/staff/1",
                          "person": "/v1/enrolments/staff/1/person",
                          "absences": "/v1/enrolments/staff/1/absences"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "staff",
                        "id": "1",
                        "attributes": {
                          "staffCode": "978020137962",
                          "timetableCode": "978020137962",
                          "barcode": "9031101",
                          "emergencyContactName": "John",
                          "emergencyContactPhone": "(03) 8070 5665",
                          "emergencyContactMobile": "(03) 8070 5665",
                          "employmentStatus": 2,
                          "employmentClassification": "teaching",
                          "jobTitle": "Teacher",
                          "contractCommencementDate": "2018-10-01",
                          "contractExpiryDate": "2018-10-01",
                          "wWCCNumber": "9031101",
                          "wWCCStatus": null,
                          "wWCCExpiryDate": "2018-10-01",
                          "codeOfConductDateSigned": "2018-10-01",
                          "socialNetworkingPolicyDateSigned": "2018-10-01",
                          "childProtectionPolicyDateSigned": "2018-10-01",
                          "iCTPolicyDateSigned": "2018-10-01",
                          "firstAidExpiryDate": "2018-10-01",
                          "resuscitationExpiryDate": "2018-10-01",
                          "publicLiabilityExpiryDate": "2018-10-01",
                          "aGSNumber": "978020137962",
                          "positionNumber": null,
                          "payRate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/person"
                            }
                          },
                          "absences": {
                            "links": {
                              "related": "/v1/enrolments/staff/1/absences"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/staff/1",
                          "person": "/v1/enrolments/staff/1/person",
                          "absences": "/v1/enrolments/staff/1/absences"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/staff-employment": {
    "get": {
      "operationId": "getStaffEmployments",
      "summary": "Get Staff Employments",
      "description": "Retrieves a page of instances of `staffEmployment`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "staffIds",
          "required": false,
          "description": "String Comma-separated list of `staff` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "schoolIds",
          "required": false,
          "description": "String Comma-separated list of `school` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'staffEmployment' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/staffEmployment"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "staffEmployment",
                        "id": "1",
                        "attributes": {
                          "role": "Teacher",
                          "employmentStatus": "Permanent",
                          "startDate": null,
                          "endDate": null,
                          "isMainSchool": true
                        },
                        "relationships": {
                          "staff": {
                            "data": {
                              "id": "3",
                              "type": "staff"
                            }
                          },
                          "school": {
                            "data": {
                              "id": "2",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/staff-employment/1"
                        }
                      },
                      {
                        "type": "staffEmployment",
                        "id": "1",
                        "attributes": {
                          "role": "Teacher",
                          "employmentStatus": "Permanent",
                          "startDate": null,
                          "endDate": null,
                          "isMainSchool": true
                        },
                        "relationships": {
                          "staff": {
                            "data": {
                              "id": "3",
                              "type": "staff"
                            }
                          },
                          "school": {
                            "data": {
                              "id": "2",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/staff-employment/1"
                        }
                      },
                      {
                        "type": "staffEmployment",
                        "id": "1",
                        "attributes": {
                          "role": "Teacher",
                          "employmentStatus": "Permanent",
                          "startDate": null,
                          "endDate": null,
                          "isMainSchool": true
                        },
                        "relationships": {
                          "staff": {
                            "data": {
                              "id": "3",
                              "type": "staff"
                            }
                          },
                          "school": {
                            "data": {
                              "id": "2",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/staff-employment/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/staff-employment/{id}": {
    "get": {
      "operationId": "getStaffEmployment",
      "summary": "Get Staff Employment",
      "description": "Retrieves a single instance of `staffEmployment`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'staffEmployment' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'staffEmployment' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/staffEmployment"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "staffEmployment",
                      "id": "1",
                      "attributes": {
                        "role": "Teacher",
                        "employmentStatus": "Permanent",
                        "startDate": null,
                        "endDate": null,
                        "isMainSchool": true
                      },
                      "relationships": {
                        "staff": {
                          "data": {
                            "id": "3",
                            "type": "staff"
                          }
                        },
                        "school": {
                          "data": {
                            "id": "2",
                            "type": "school"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/staff-employment/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/staff-qualification": {
    "get": {
      "operationId": "getStaffQualifications",
      "summary": "Get Staff Qualifications",
      "description": "Retrieves a page of instances of `staffQualification`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'staffQualification' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/staffQualification"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "staffQualification",
                        "id": "0",
                        "attributes": {
                          "qualification": null,
                          "type": null,
                          "from": null,
                          "aitslTeacherAccreditationLevel": null,
                          "nextAitslTeacherAccreditationLevel": null,
                          "dateAchieved": "2018-01-01",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/staff-qualification/0"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "staffQualification",
                        "id": "0",
                        "attributes": {
                          "qualification": null,
                          "type": null,
                          "from": null,
                          "aitslTeacherAccreditationLevel": null,
                          "nextAitslTeacherAccreditationLevel": null,
                          "dateAchieved": "2018-01-01",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/staff-qualification/0"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "staffQualification",
                        "id": "0",
                        "attributes": {
                          "qualification": null,
                          "type": null,
                          "from": null,
                          "aitslTeacherAccreditationLevel": null,
                          "nextAitslTeacherAccreditationLevel": null,
                          "dateAchieved": "2018-01-01",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/staff-qualification/0"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postStaffQualification",
      "summary": "Post Staff Qualification",
      "description": "Creates a new staffQualification record\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`staffQualification`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `qualification` → String {DESCRIPTION-MISSING} [example: \"Master's Degree\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `type` → String Type of the qualification [optional] [example: \"bachelors_degree\"] \nValue constraints:\nAllowed values: \"doctoral_degree\", \"masters_degree\", \"bachelors_degree\", \"tafe_certificate\", \"certificate\"\nLength must be between 0 and 255 characters, inclusive\n   * `from` → String {DESCRIPTION-MISSING} [optional] [example: \"Master's Degree\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\nLength must be between 0 and 255 characters, inclusive\n   * `aitslTeacherAccreditationLevel` → String {DESCRIPTION-MISSING} [optional] [example: NULL] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\nLength must be between 0 and 255 characters, inclusive\n   * `nextAitslTeacherAccreditationLevel` → String {DESCRIPTION-MISSING} [optional] [example: NULL] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\nLength must be between 0 and 255 characters, inclusive\n   * `dateAchieved` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2019-01-01\"]\n * Relationships\n   * `staff` → [required] [single] expected type is `staff`. Staff memberwho has the qualification.",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "qualification": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"Master's Degree\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "type": {
                              "type": "string",
                              "description": "String Type of the qualification [example: \"bachelors_degree\"] \nValue constraints:\nAllowed values: \"doctoral_degree\", \"masters_degree\", \"bachelors_degree\", \"tafe_certificate\", \"certificate\"\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "from": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"Master's Degree\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "aitslTeacherAccreditationLevel": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: NULL] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "nextAitslTeacherAccreditationLevel": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: NULL] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "dateAchieved": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [example: \"2019-01-01\"]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "staff": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "staffQualification",
                    "attributes": {
                      "qualification": "Master's Degree",
                      "type": "bachelors_degree",
                      "from": "Master's Degree",
                      "aitslTeacherAccreditationLevel": null,
                      "nextAitslTeacherAccreditationLevel": null,
                      "dateAchieved": "2019-01-01"
                    },
                    "relationships": {
                      "staff": {
                        "data": {
                          "id": 1,
                          "type": "staff"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'staffQualification' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/staffQualification"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "staffQualification",
                      "id": "0",
                      "attributes": {
                        "qualification": null,
                        "type": null,
                        "from": null,
                        "aitslTeacherAccreditationLevel": null,
                        "nextAitslTeacherAccreditationLevel": null,
                        "dateAchieved": "2018-01-01",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/enrolments/staff-qualification/0"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/staff-qualification/{id}": {
    "get": {
      "operationId": "getStaffQualification",
      "summary": "Get Staff Qualification",
      "description": "Retrieves a single instance of `staffQualification`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'staffQualification' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'staffQualification' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/staffQualification"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "staffQualification",
                      "id": "0",
                      "attributes": {
                        "qualification": null,
                        "type": null,
                        "from": null,
                        "aitslTeacherAccreditationLevel": null,
                        "nextAitslTeacherAccreditationLevel": null,
                        "dateAchieved": "2018-01-01",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/enrolments/staff-qualification/0"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteStaffQualification",
      "summary": "Delete Staff Qualification",
      "description": "Deletes staff qualification by ID",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `staffQualification` to delete. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    },
    "patch": {
      "operationId": "patchStaffQualification",
      "summary": "Patch Staff Qualification",
      "description": "Updates an existing staffQualification record\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`staffQualification`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `qualification` → String {DESCRIPTION-MISSING} [example: \"Master's Degree\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `type` → String Type of the qualification [optional] [example: \"bachelors_degree\"] \nValue constraints:\nAllowed values: \"doctoral_degree\", \"masters_degree\", \"bachelors_degree\", \"tafe_certificate\", \"certificate\"\nLength must be between 0 and 255 characters, inclusive\n   * `from` → String {DESCRIPTION-MISSING} [optional] [example: \"Master's Degree\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\nLength must be between 0 and 255 characters, inclusive\n   * `aitslTeacherAccreditationLevel` → String {DESCRIPTION-MISSING} [optional] [example: NULL] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\nLength must be between 0 and 255 characters, inclusive\n   * `nextAitslTeacherAccreditationLevel` → String {DESCRIPTION-MISSING} [optional] [example: NULL] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\nLength must be between 0 and 255 characters, inclusive\n   * `dateAchieved` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2019-01-01\"]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `staffQualification` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "qualification": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"Master's Degree\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "type": {
                              "type": "string",
                              "description": "String Type of the qualification [optional] [example: \"bachelors_degree\"] \nValue constraints:\nAllowed values: \"doctoral_degree\", \"masters_degree\", \"bachelors_degree\", \"tafe_certificate\", \"certificate\"\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "from": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"Master's Degree\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "aitslTeacherAccreditationLevel": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: NULL] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "nextAitslTeacherAccreditationLevel": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: NULL] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "dateAchieved": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2019-01-01\"]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "staffQualification",
                    "id": 1,
                    "attributes": {
                      "qualification": "Master's Degree",
                      "type": "bachelors_degree",
                      "from": "Master's Degree",
                      "aitslTeacherAccreditationLevel": null,
                      "nextAitslTeacherAccreditationLevel": null,
                      "dateAchieved": "2019-01-01"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'staffQualification' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/staffQualification"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "staffQualification",
                      "id": "0",
                      "attributes": {
                        "qualification": null,
                        "type": null,
                        "from": null,
                        "aitslTeacherAccreditationLevel": null,
                        "nextAitslTeacherAccreditationLevel": null,
                        "dateAchieved": "2018-01-01",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/enrolments/staff-qualification/0"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/staff/{id}": {
    "get": {
      "operationId": "getStaff",
      "summary": "Get Staff",
      "description": "Retrieves a single instance of `staff`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'staff' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person, qualifications, employments. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'staff' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/staff"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "staff",
                      "id": "1",
                      "attributes": {
                        "staffCode": "978020137962",
                        "timetableCode": "978020137962",
                        "barcode": "9031101",
                        "emergencyContactName": "John",
                        "emergencyContactPhone": "(03) 8070 5665",
                        "emergencyContactMobile": "(03) 8070 5665",
                        "employmentStatus": 2,
                        "employmentClassification": "teaching",
                        "jobTitle": "Teacher",
                        "contractCommencementDate": "2018-10-01",
                        "contractExpiryDate": "2018-10-01",
                        "wWCCNumber": "9031101",
                        "wWCCStatus": null,
                        "wWCCExpiryDate": "2018-10-01",
                        "codeOfConductDateSigned": "2018-10-01",
                        "socialNetworkingPolicyDateSigned": "2018-10-01",
                        "childProtectionPolicyDateSigned": "2018-10-01",
                        "iCTPolicyDateSigned": "2018-10-01",
                        "firstAidExpiryDate": "2018-10-01",
                        "resuscitationExpiryDate": "2018-10-01",
                        "publicLiabilityExpiryDate": "2018-10-01",
                        "aGSNumber": "978020137962",
                        "positionNumber": null,
                        "payRate": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "person": {
                          "links": {
                            "related": "/v1/enrolments/staff/1/person"
                          }
                        },
                        "absences": {
                          "links": {
                            "related": "/v1/enrolments/staff/1/absences"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/staff/1",
                        "person": "/v1/enrolments/staff/1/person",
                        "absences": "/v1/enrolments/staff/1/absences"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchStaff",
      "summary": "Patch Staff",
      "description": "Updates an existing staff record\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`staff`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `staffCode` → String {DESCRIPTION-MISSING} [optional] [example: \"2UMMO\"]\n   * `timetableCode` → String {DESCRIPTION-MISSING} [optional] [example: \"2UMMO\"]\n   * `barcode` → String {DESCRIPTION-MISSING} [optional] [example: \"ABC-abc-1234\"]\n   * `emergencyContactName` → String Name of the person who should be contacted in case of an emergency. [optional] [example: \"John Smith\"]\n   * `emergencyContactPhone` → String Phone number of the person who should be contacted in case of an emergency. [optional] [example: \"+61 7 7010 4537\"]\n   * `emergencyContactMobile` → String Mobile Phone number of the person who should be contacted in case of an emergency. [optional] [example: \"0491 570 156\"]\n   * `employmentStatus` → String Employment status of the staff member [optional] [example: \"permanent\"] \nValue constraints:\nAllowed values: \"casual\", \"future\", \"left\", \"long_service_leave\", \"parental_leave\", \"pending\", \"permanent\", \"permanent_part_time\", \"temporary_full_time\", \"temporary_part_time\", \"volunteer\", \"contractor\"\n   * `employmentClassification` → String Employment classification of the staff member [optional] [example: \"teaching\"] \nValue constraints:\nAllowed values: \"teaching\", \"non_teaching\"\n   * `jobTitle` → String Staff member's job title [optional] [example: \"Biology Teacher\"]\n   * `contractCommencementDate` → Date (, eg. 20190102) Date when the staff's contract was started [optional] [example: \"2019-01-01\"]\n   * `contractExpiryDate` → Date (, eg. 20190102) Date when the staff's contract will end [optional] [example: \"2024-12-31\"]\n   * `wWCCNumber` → String Working With Children Check cleareance number. [optional] [example: \"WWC0000000E\"]\n   * `wWCCStatus` → String Working With Children Check cleareance status. [optional] [example: NULL]\n   * `wWCCExpiryDate` → Date (, eg. 20190102) Working With Children Check cleareance expiry date. [optional] [example: \"2024-01-01\"]\n   * `codeOfConductDateSigned` → Date (, eg. 20190102) Date when Code of Conduct was signed. [optional] [example: \"2019-02-14\"]\n   * `socialNetworkingPolicyDateSigned` → Date (, eg. 20190102) Date when Social Networking Policy was signed. [optional] [example: \"2019-03-02\"]\n   * `childProtectionPolicyDateSigned` → Date (, eg. 20190102) Date when Child Protection Policy was signed. [optional] [example: \"2019-04-30\"]\n   * `iCTPolicyDateSigned` → Date (, eg. 20190102) Date when ICT Policy was signed. [optional] [example: \"2019-05-22\"]\n   * `firstAidExpiryDate` → Date (, eg. 20190102) Date when First Aid certificate expires. [optional] [example: \"2023-07-05\"]\n   * `resuscitationExpiryDate` → Date (, eg. 20190102) Date when Resiscitate certificate expires. [optional] [example: \"2025-08-17\"]\n   * `publicLiabilityExpiryDate` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2028-09-22\"]\n   * `aGSNumber` → String {DESCRIPTION-MISSING} [optional] [example: NULL]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `staff` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "staffCode": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"2UMMO\"]"
                            },
                            "timetableCode": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"2UMMO\"]"
                            },
                            "barcode": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"ABC-abc-1234\"]"
                            },
                            "emergencyContactName": {
                              "type": "string",
                              "description": "String Name of the person who should be contacted in case of an emergency. [optional] [example: \"John Smith\"]"
                            },
                            "emergencyContactPhone": {
                              "type": "string",
                              "description": "String Phone number of the person who should be contacted in case of an emergency. [optional] [example: \"+61 7 7010 4537\"]"
                            },
                            "emergencyContactMobile": {
                              "type": "string",
                              "description": "String Mobile Phone number of the person who should be contacted in case of an emergency. [optional] [example: \"0491 570 156\"]"
                            },
                            "employmentStatus": {
                              "type": "string",
                              "description": "String Employment status of the staff member [optional] [example: \"permanent\"] \nValue constraints:\nAllowed values: \"casual\", \"future\", \"left\", \"long_service_leave\", \"parental_leave\", \"pending\", \"permanent\", \"permanent_part_time\", \"temporary_full_time\", \"temporary_part_time\", \"volunteer\", \"contractor\""
                            },
                            "employmentClassification": {
                              "type": "string",
                              "description": "String Employment classification of the staff member [optional] [example: \"teaching\"] \nValue constraints:\nAllowed values: \"teaching\", \"non_teaching\""
                            },
                            "jobTitle": {
                              "type": "string",
                              "description": "String Staff member's job title [optional] [example: \"Biology Teacher\"]"
                            },
                            "contractCommencementDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date when the staff's contract was started [optional] [example: \"2019-01-01\"]"
                            },
                            "contractExpiryDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date when the staff's contract will end [optional] [example: \"2024-12-31\"]"
                            },
                            "wWCCNumber": {
                              "type": "string",
                              "description": "String Working With Children Check cleareance number. [optional] [example: \"WWC0000000E\"]"
                            },
                            "wWCCStatus": {
                              "type": "string",
                              "description": "String Working With Children Check cleareance status. [optional] [example: NULL]"
                            },
                            "wWCCExpiryDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Working With Children Check cleareance expiry date. [optional] [example: \"2024-01-01\"]"
                            },
                            "codeOfConductDateSigned": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date when Code of Conduct was signed. [optional] [example: \"2019-02-14\"]"
                            },
                            "socialNetworkingPolicyDateSigned": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date when Social Networking Policy was signed. [optional] [example: \"2019-03-02\"]"
                            },
                            "childProtectionPolicyDateSigned": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date when Child Protection Policy was signed. [optional] [example: \"2019-04-30\"]"
                            },
                            "iCTPolicyDateSigned": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date when ICT Policy was signed. [optional] [example: \"2019-05-22\"]"
                            },
                            "firstAidExpiryDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date when First Aid certificate expires. [optional] [example: \"2023-07-05\"]"
                            },
                            "resuscitationExpiryDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date when Resiscitate certificate expires. [optional] [example: \"2025-08-17\"]"
                            },
                            "publicLiabilityExpiryDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2028-09-22\"]"
                            },
                            "aGSNumber": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: NULL]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "staff",
                    "id": 1,
                    "attributes": {
                      "staffCode": "2UMMO",
                      "timetableCode": "2UMMO",
                      "barcode": "ABC-abc-1234",
                      "emergencyContactName": "John Smith",
                      "emergencyContactPhone": "+61 7 7010 4537",
                      "emergencyContactMobile": "0491 570 156",
                      "employmentStatus": "permanent",
                      "employmentClassification": "teaching",
                      "jobTitle": "Biology Teacher",
                      "contractCommencementDate": "2019-01-01",
                      "contractExpiryDate": "2024-12-31",
                      "wWCCNumber": "WWC0000000E",
                      "wWCCStatus": null,
                      "wWCCExpiryDate": "2024-01-01",
                      "codeOfConductDateSigned": "2019-02-14",
                      "socialNetworkingPolicyDateSigned": "2019-03-02",
                      "childProtectionPolicyDateSigned": "2019-04-30",
                      "iCTPolicyDateSigned": "2019-05-22",
                      "firstAidExpiryDate": "2023-07-05",
                      "resuscitationExpiryDate": "2025-08-17",
                      "publicLiabilityExpiryDate": "2028-09-22",
                      "aGSNumber": null
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'staff' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/staff"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "staff",
                      "id": "1",
                      "attributes": {
                        "staffCode": "978020137962",
                        "timetableCode": "978020137962",
                        "barcode": "9031101",
                        "emergencyContactName": "John",
                        "emergencyContactPhone": "(03) 8070 5665",
                        "emergencyContactMobile": "(03) 8070 5665",
                        "employmentStatus": 2,
                        "employmentClassification": "teaching",
                        "jobTitle": "Teacher",
                        "contractCommencementDate": "2018-10-01",
                        "contractExpiryDate": "2018-10-01",
                        "wWCCNumber": "9031101",
                        "wWCCStatus": null,
                        "wWCCExpiryDate": "2018-10-01",
                        "codeOfConductDateSigned": "2018-10-01",
                        "socialNetworkingPolicyDateSigned": "2018-10-01",
                        "childProtectionPolicyDateSigned": "2018-10-01",
                        "iCTPolicyDateSigned": "2018-10-01",
                        "firstAidExpiryDate": "2018-10-01",
                        "resuscitationExpiryDate": "2018-10-01",
                        "publicLiabilityExpiryDate": "2018-10-01",
                        "aGSNumber": "978020137962",
                        "positionNumber": null,
                        "payRate": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "person": {
                          "links": {
                            "related": "/v1/enrolments/staff/1/person"
                          }
                        },
                        "absences": {
                          "links": {
                            "related": "/v1/enrolments/staff/1/absences"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/staff/1",
                        "person": "/v1/enrolments/staff/1/person",
                        "absences": "/v1/enrolments/staff/1/absences"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/staff/{id}/absences": {
    "get": {
      "operationId": "getStaffStaffAbsences",
      "summary": "Get Staff Staff Absences",
      "description": "Retrieves a page of the instances of ``, the relation `absences` of `staffAbsence`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'staffAbsence' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'staffAbsence' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/staffAbsence"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "staffAbsence",
                        "id": "1",
                        "attributes": {
                          "type": "whole",
                          "startDate": "2018-02-01",
                          "endDate": "2021-04-21",
                          "startTime": "08:00:00",
                          "endTime": null,
                          "leaveType": "Sickness",
                          "reason": null,
                          "notes": null,
                          "hasReceivedMedicalCertificate": false,
                          "externalSource": null,
                          "externalId": null,
                          "isApproved": true
                        },
                        "relationships": {
                          "staff": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          },
                          "leaveType": {
                            "data": {
                              "id": "1",
                              "type": "staffAbsenceLeaveType"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/staff/absence/1"
                        }
                      },
                      {
                        "type": "staffAbsence",
                        "id": "1",
                        "attributes": {
                          "type": "whole",
                          "startDate": "2018-02-01",
                          "endDate": "2021-04-21",
                          "startTime": "08:00:00",
                          "endTime": null,
                          "leaveType": "Sickness",
                          "reason": null,
                          "notes": null,
                          "hasReceivedMedicalCertificate": false,
                          "externalSource": null,
                          "externalId": null,
                          "isApproved": true
                        },
                        "relationships": {
                          "staff": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          },
                          "leaveType": {
                            "data": {
                              "id": "1",
                              "type": "staffAbsenceLeaveType"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/staff/absence/1"
                        }
                      },
                      {
                        "type": "staffAbsence",
                        "id": "1",
                        "attributes": {
                          "type": "whole",
                          "startDate": "2018-02-01",
                          "endDate": "2021-04-21",
                          "startTime": "08:00:00",
                          "endTime": null,
                          "leaveType": "Sickness",
                          "reason": null,
                          "notes": null,
                          "hasReceivedMedicalCertificate": false,
                          "externalSource": null,
                          "externalId": null,
                          "isApproved": true
                        },
                        "relationships": {
                          "staff": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          },
                          "leaveType": {
                            "data": {
                              "id": "1",
                              "type": "staffAbsenceLeaveType"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/staff/absence/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/staff/{id}/person": {
    "get": {
      "operationId": "getStaffPerson",
      "summary": "Get Staff Person",
      "description": "Retrieves a single instance of ``, the relation `relatedPerson` of `person`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'person' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryHousehold, studentPrimaryEnrolment, staff, student, contactDetails, otherHouseholds, studentContacts, studentTenants, prescribedMedication, emails, phoneNumbers, givenConsents, givenConsentLinks, emergencyContactLinks, abilities, additionalFields. [optional] [default: null] [example: \"primaryHousehold\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'person' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/person"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "person",
                      "id": "1",
                      "attributes": {
                        "externalId": null,
                        "refId": null,
                        "contactCode": null,
                        "name": "John",
                        "surname": "Doe",
                        "firstName": "John",
                        "middleNames": "Franz Stephen",
                        "lastName": "Doe",
                        "legalLastName": null,
                        "preferredName": null,
                        "email": "john.doe@example.com",
                        "title": null,
                        "givenNames": "Franz Stephen",
                        "gender": "Other",
                        "genderCode": "Other",
                        "dateOfBirth": null,
                        "crn": null,
                        "languageSpokenAtHome": null,
                        "languageSpokenAtHomeCode": null,
                        "countryOfCitizenship": null,
                        "religion": null,
                        "residentialStatus": null,
                        "isDeceased": false,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "primaryHousehold": {
                          "links": {
                            "related": "/v1/enrolments/person/1/primary-household"
                          }
                        },
                        "staff": {
                          "links": {
                            "related": "/v1/enrolments/person/1/staff"
                          }
                        },
                        "student": {
                          "links": {
                            "related": "/v1/enrolments/person/1/student"
                          }
                        },
                        "contactDetails": {
                          "links": {
                            "related": "/v1/enrolments/person/1/person-contact-details"
                          }
                        },
                        "otherHouseholds": {
                          "links": {
                            "related": "/v1/enrolments/person/1/other-households"
                          }
                        },
                        "studentContacts": {
                          "links": {
                            "related": "/v1/enrolments/person/1/student-contacts"
                          }
                        },
                        "medicalSummary": {
                          "links": {
                            "related": "/v1/enrolments/person/1/medical-summary"
                          }
                        },
                        "medicalConditions": {
                          "links": {
                            "related": "/v1/enrolments/person/1/medical-conditions"
                          }
                        },
                        "prescribedMedication": {
                          "links": {
                            "related": "/v1/enrolments/person/1/prescribed-medications"
                          }
                        },
                        "doctors": {
                          "links": {
                            "related": "/v1/enrolments/person/1/doctors"
                          }
                        },
                        "associatedStudents": {
                          "links": {
                            "related": "/v1/enrolments/person/1/associated-students"
                          }
                        },
                        "givenConsents": {
                          "links": {
                            "related": "/v1/enrolments/person/1/given-consents"
                          }
                        },
                        "givenConsentLinks": {
                          "links": {
                            "related": "/v1/enrolments/person/1/given-consent-links"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person/1",
                        "primaryHousehold": "/v1/enrolments/person/1/primary-household",
                        "otherHouseholds": "/v1/enrolments/person/1/other-households",
                        "staff": "/v1/enrolments/person/1/staff",
                        "student": "/v1/enrolments/person/1/student",
                        "studentContacts": "/v1/enrolments/person/1/student-contacts",
                        "associatedStudents": "/v1/enrolments/person/1/associated-students",
                        "medicalSummary": "/v1/enrolments/person/1/medical-summary",
                        "medicalConditions": "/v1/enrolments/person/1/medical-conditions",
                        "prescribedMedications": "/v1/enrolments/person/1/prescribed-medications",
                        "doctors": "/v1/enrolments/person/1/doctors"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/staff/{id}/qualifications": {
    "get": {
      "operationId": "getStaffRelatedQualifications",
      "summary": "Get Staff Related Qualifications",
      "description": "Retrieves all of the instances of ``, the relation `qualifications` of `staffQualification`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'staffQualification' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'staffQualification' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/staffQualification"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "staffQualification",
                        "id": "0",
                        "attributes": {
                          "qualification": null,
                          "type": null,
                          "from": null,
                          "aitslTeacherAccreditationLevel": null,
                          "nextAitslTeacherAccreditationLevel": null,
                          "dateAchieved": "2018-01-01",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/staff-qualification/0"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "staffQualification",
                        "id": "0",
                        "attributes": {
                          "qualification": null,
                          "type": null,
                          "from": null,
                          "aitslTeacherAccreditationLevel": null,
                          "nextAitslTeacherAccreditationLevel": null,
                          "dateAchieved": "2018-01-01",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/staff-qualification/0"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "staffQualification",
                        "id": "0",
                        "attributes": {
                          "qualification": null,
                          "type": null,
                          "from": null,
                          "aitslTeacherAccreditationLevel": null,
                          "nextAitslTeacherAccreditationLevel": null,
                          "dateAchieved": "2018-01-01",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/staff-qualification/0"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student": {
    "get": {
      "operationId": "getStudents",
      "summary": "Get Students",
      "description": "Retrieves a page of instances of `student`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "tenant",
          "required": false,
          "description": "String Only return students who belong to the specified tenant. [optional] [default: \"\"] [example: \"aSd2rs\"] \nValue constraints:\nLength must be between 0 and 256 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "studentCodes",
          "required": false,
          "description": "String Comma-separated list of studentCodes to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "examNumbers",
          "required": false,
          "description": "String Comma-separated list of examNumbers to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "refIds",
          "required": false,
          "description": "String Comma-separated list of refIds to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "contactCodes",
          "required": false,
          "description": "String Comma-separated list of contactCodes to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "externalIds",
          "required": false,
          "description": "String Comma-separated list of externalIds to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "academicPeriodIds",
          "required": false,
          "description": "String Comma-separated list of academicPeriodIds to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'student' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/student"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-contact": {
    "get": {
      "operationId": "getStudentContacts",
      "summary": "Get Student Contacts",
      "description": "Retrieves a page of instances of `studentPersonRelation`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, studentPerson, person. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "studentIds",
          "required": false,
          "description": "String Comma-separated list of `student` IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentPersonRelation' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentPersonRelation"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "studentId": 2,
                          "personId": 3,
                          "priority": 2,
                          "isAuthorisedPickup": false,
                          "isEmergencyContact": false,
                          "isFinanciallyResponsible": false,
                          "isFinanciallyResponsibleForActivities": false,
                          "isPrimaryContact": false,
                          "livesWith": false,
                          "relationType": 10,
                          "relationName": "Sibling",
                          "receivesMail": false,
                          "receivesReports": false,
                          "receivesPortalAccess": false,
                          "receivesCorrespondence": false,
                          "receivesAbsences": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student"
                            }
                          },
                          "studentPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student-person"
                            }
                          },
                          "person": {
                            "data": {
                              "id": "3",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-contact/1",
                          "student": "/v1/enrolments/student-contact/1/student"
                        }
                      },
                      {
                        "type": "studentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "studentId": 2,
                          "personId": 3,
                          "priority": 2,
                          "isAuthorisedPickup": false,
                          "isEmergencyContact": false,
                          "isFinanciallyResponsible": false,
                          "isFinanciallyResponsibleForActivities": false,
                          "isPrimaryContact": false,
                          "livesWith": false,
                          "relationType": 10,
                          "relationName": "Sibling",
                          "receivesMail": false,
                          "receivesReports": false,
                          "receivesPortalAccess": false,
                          "receivesCorrespondence": false,
                          "receivesAbsences": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student"
                            }
                          },
                          "studentPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student-person"
                            }
                          },
                          "person": {
                            "data": {
                              "id": "3",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-contact/1",
                          "student": "/v1/enrolments/student-contact/1/student"
                        }
                      },
                      {
                        "type": "studentPersonRelation",
                        "id": "1",
                        "attributes": {
                          "studentId": 2,
                          "personId": 3,
                          "priority": 2,
                          "isAuthorisedPickup": false,
                          "isEmergencyContact": false,
                          "isFinanciallyResponsible": false,
                          "isFinanciallyResponsibleForActivities": false,
                          "isPrimaryContact": false,
                          "livesWith": false,
                          "relationType": 10,
                          "relationName": "Sibling",
                          "receivesMail": false,
                          "receivesReports": false,
                          "receivesPortalAccess": false,
                          "receivesCorrespondence": false,
                          "receivesAbsences": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student"
                            }
                          },
                          "studentPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/student-person"
                            }
                          },
                          "person": {
                            "data": {
                              "id": "3",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-contact/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-contact/1",
                          "student": "/v1/enrolments/student-contact/1/student"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-contact/{id}": {
    "get": {
      "operationId": "getStudentContact",
      "summary": "Get Student Contact",
      "description": "Retrieves a single instance of `studentPersonRelation`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String matching regular expression: ~^(\\d+|derived-\\d+-\\d+)$~ ID of the 'studentPersonRelation' to retrieve [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, studentPerson, person. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentPersonRelation' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentPersonRelation"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentPersonRelation",
                      "id": "1",
                      "attributes": {
                        "studentId": 2,
                        "personId": 3,
                        "priority": 2,
                        "isAuthorisedPickup": false,
                        "isEmergencyContact": false,
                        "isFinanciallyResponsible": false,
                        "isFinanciallyResponsibleForActivities": false,
                        "isPrimaryContact": false,
                        "livesWith": false,
                        "relationType": 10,
                        "relationName": "Sibling",
                        "receivesMail": false,
                        "receivesReports": false,
                        "receivesPortalAccess": false,
                        "receivesCorrespondence": false,
                        "receivesAbsences": false
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "2",
                            "type": "student"
                          },
                          "links": {
                            "related": "/v1/enrolments/student-contact/1/student"
                          }
                        },
                        "studentPerson": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          },
                          "links": {
                            "related": "/v1/enrolments/student-contact/1/student-person"
                          }
                        },
                        "person": {
                          "data": {
                            "id": "3",
                            "type": "person"
                          },
                          "links": {
                            "related": "/v1/enrolments/student-contact/1/person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/student-contact/1",
                        "student": "/v1/enrolments/student-contact/1/student"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-contact/{id}/student": {
    "get": {
      "operationId": "getStudentContactStudent",
      "summary": "Get Student Contact Student",
      "description": "Retrieves a single instance of ``, the relation `relatedStudent` of `student`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String matching regular expression: ~^(\\d+|derived-\\d+-\\d+)$~ ID of the 'student' which relation to retrieve [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'student' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/student"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "student",
                      "id": "1",
                      "attributes": {
                        "studentCode": null,
                        "barcode": null,
                        "permissionToPhotograph": true,
                        "examNumber": null,
                        "usiId": null,
                        "isEligibleForDiscount": false,
                        "acaraId": null,
                        "systemStudentId": null,
                        "refId": null,
                        "ealStage": null,
                        "ealIsReceivingSupport": null,
                        "ealLastAssessmentAt": null,
                        "isSubjectToCourtOrders": false,
                        "courtOrderInformation": null,
                        "studentFirstLanguage": null,
                        "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                        "languageOtherThanEnglishSpokenAtHome": false,
                        "studentMainlySpeaksEnglishAtHome": false,
                        "loteBackground": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "primaryEnrolment": {
                          "links": {
                            "related": "/v1/enrolments/student/1/primaryEnrolment"
                          }
                        },
                        "person": {
                          "links": {
                            "related": "/v1/enrolments/student/1/person"
                          }
                        },
                        "activities": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activities"
                          }
                        },
                        "activityLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activity-links"
                          }
                        },
                        "photo": {
                          "links": {
                            "related": "/v1/enrolments/student/1/photo"
                          }
                        },
                        "documents": {
                          "links": {
                            "related": "/v1/enrolments/student/1/documents"
                          }
                        },
                        "tenants": {
                          "links": {
                            "related": "/v1/enrolments/student/1/tenants"
                          }
                        },
                        "flags": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flags"
                          }
                        },
                        "flagLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flagLinks"
                          }
                        },
                        "awards": {
                          "links": {
                            "related": "/v1/enrolments/student/1/awards"
                          }
                        },
                        "awardLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/award-links"
                          }
                        },
                        "households": {
                          "links": {
                            "related": "/v1/enrolments/student/1/households"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/student/1",
                        "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                        "person": "/v1/enrolments/student/1/person",
                        "activities": "/v1/enrolments/student/1/activities",
                        "activityLinks": "/v1/enrolments/student/1/activity-links",
                        "photo": "/v1/enrolments/student/1/photo",
                        "documents": "/v1/enrolments/student/1/documents",
                        "tenants": "/v1/enrolments/student/1/tenants",
                        "flags": "/v1/enrolments/student/1/flags",
                        "flagLinks": "/v1/enrolments/student/1/flag-links"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-document": {
    "get": {
      "operationId": "getStudentDocuments",
      "summary": "Get Student Documents",
      "description": "Retrieves a page of instances of `studentDocument`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentDocument' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentDocument"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentDocument",
                        "id": "1",
                        "attributes": {
                          "fileName": null,
                          "isConfidential": true
                        },
                        "links": {
                          "self": "/v1/enrolments/student-document/1",
                          "file": "/v1/enrolments/student-document/1/file"
                        }
                      },
                      {
                        "type": "studentDocument",
                        "id": "1",
                        "attributes": {
                          "fileName": null,
                          "isConfidential": true
                        },
                        "links": {
                          "self": "/v1/enrolments/student-document/1",
                          "file": "/v1/enrolments/student-document/1/file"
                        }
                      },
                      {
                        "type": "studentDocument",
                        "id": "1",
                        "attributes": {
                          "fileName": null,
                          "isConfidential": true
                        },
                        "links": {
                          "self": "/v1/enrolments/student-document/1",
                          "file": "/v1/enrolments/student-document/1/file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-document-category": {
    "get": {
      "operationId": "getStudentDocumentCategories",
      "summary": "Get Student Document Categories",
      "description": "Retrieves a page of instances of `studentDocumentCategory`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentDocumentCategory' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentDocumentCategory"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentDocumentCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Misc documents"
                        },
                        "links": {
                          "self": "/v1/enrolments/student-document-category/1"
                        }
                      },
                      {
                        "type": "studentDocumentCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Misc documents"
                        },
                        "links": {
                          "self": "/v1/enrolments/student-document-category/1"
                        }
                      },
                      {
                        "type": "studentDocumentCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Misc documents"
                        },
                        "links": {
                          "self": "/v1/enrolments/student-document-category/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-document-category/{id}": {
    "get": {
      "operationId": "getStudentDocumentCategory",
      "summary": "Get Student Document Category",
      "description": "Retrieves a single instance of `studentDocumentCategory`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentDocumentCategory' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentDocumentCategory' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentDocumentCategory"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentDocumentCategory",
                      "id": "1",
                      "attributes": {
                        "name": "Misc documents"
                      },
                      "links": {
                        "self": "/v1/enrolments/student-document-category/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-document/{id}": {
    "get": {
      "operationId": "getStudentDocument",
      "summary": "Get Student Document",
      "description": "Retrieves a single instance of `studentDocument`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentDocument' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentDocument' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentDocument"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentDocument",
                      "id": "1",
                      "attributes": {
                        "fileName": null,
                        "isConfidential": true
                      },
                      "links": {
                        "self": "/v1/enrolments/student-document/1",
                        "file": "/v1/enrolments/student-document/1/file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteStudentDocument",
      "summary": "Delete Student Document",
      "description": "Deletes studentDocument of given id",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the studentDocument to delete.",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/enrolments/student-document/{id}/file": {
    "get": {
      "operationId": "getStudentDocumentFile",
      "summary": "Get Student Document File",
      "description": "Returns the actual file of the given student document",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the studentDocument which file to retrieve",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the document requested",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-flag-links": {
    "post": {
      "operationId": "postStudentFlagLink",
      "summary": "Post Student Flag Link",
      "description": "Adds a new flag to a student.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`studentFlagLink`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `comment` → String Additional comment about the context for why the flag was added. [example: \"Has insulted a classmate.\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive\n   * `expiryDate` → Date (, eg. 20190102) Date after which the flag will expire. [optional] [example: \"2019-01-01\"]\n * Relationships\n   * `student` → [required] [single] expected type is `student`. \n   * `flag` → [required] [single] expected type is `flag`. ",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "comment": {
                              "type": "string",
                              "description": "String Additional comment about the context for why the flag was added. [example: \"Has insulted a classmate.\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive"
                            },
                            "expiryDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date after which the flag will expire. [example: \"2019-01-01\"]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "student": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "flag": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "studentFlagLink",
                    "attributes": {
                      "comment": "Has insulted a classmate.",
                      "expiryDate": "2019-01-01"
                    },
                    "relationships": {
                      "student": {
                        "data": {
                          "id": 1,
                          "type": "student"
                        }
                      },
                      "flag": {
                        "data": {
                          "id": 1,
                          "type": "flag"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentFlagLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentFlagLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentFlagLink",
                      "id": "1",
                      "attributes": {
                        "comment": "Has failed every Math exam so far",
                        "expiryDate": "2018-06-01"
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        },
                        "flag": {
                          "data": {
                            "id": "1",
                            "type": "flag"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/house/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getStudentFlagLinks",
      "summary": "Get Student Flag Links",
      "description": "Retrieves a page of instances of `studentFlagLink`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, flag. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentFlagLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentFlagLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentFlagLink",
                        "id": "1",
                        "attributes": {
                          "comment": "Has failed every Math exam so far",
                          "expiryDate": "2018-06-01"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "flag": {
                            "data": {
                              "id": "1",
                              "type": "flag"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/house/1"
                        }
                      },
                      {
                        "type": "studentFlagLink",
                        "id": "1",
                        "attributes": {
                          "comment": "Has failed every Math exam so far",
                          "expiryDate": "2018-06-01"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "flag": {
                            "data": {
                              "id": "1",
                              "type": "flag"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/house/1"
                        }
                      },
                      {
                        "type": "studentFlagLink",
                        "id": "1",
                        "attributes": {
                          "comment": "Has failed every Math exam so far",
                          "expiryDate": "2018-06-01"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "flag": {
                            "data": {
                              "id": "1",
                              "type": "flag"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/house/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-flag-links/{id}": {
    "get": {
      "operationId": "getStudentFlagLink",
      "summary": "Get Student Flag Link",
      "description": "Retrieves a single instance of `studentFlagLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentFlagLink' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, flag. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentFlagLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentFlagLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentFlagLink",
                      "id": "1",
                      "attributes": {
                        "comment": "Has failed every Math exam so far",
                        "expiryDate": "2018-06-01"
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        },
                        "flag": {
                          "data": {
                            "id": "1",
                            "type": "flag"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/house/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchStudentFlagLink",
      "summary": "Patch Student Flag Link",
      "description": "Adds a new flag to a student.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`studentFlagLink`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `comment` → String Additional comment about the context for why the flag was added. [example: \"Has insulted a classmate.\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive\n   * `expiryDate` → Date (, eg. 20190102) Date after which the flag will expire. [optional] [example: \"2019-01-01\"]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `studentFlagLink` to modify [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "comment": {
                              "type": "string",
                              "description": "String Additional comment about the context for why the flag was added. [optional] [example: \"Has insulted a classmate.\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive"
                            },
                            "expiryDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date after which the flag will expire. [optional] [example: \"2019-01-01\"]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "studentFlagLink",
                    "id": 1,
                    "attributes": {
                      "comment": "Has insulted a classmate.",
                      "expiryDate": "2019-01-01"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentFlagLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentFlagLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentFlagLink",
                      "id": "1",
                      "attributes": {
                        "comment": "Has failed every Math exam so far",
                        "expiryDate": "2018-06-01"
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        },
                        "flag": {
                          "data": {
                            "id": "1",
                            "type": "flag"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/house/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-household": {
    "get": {
      "operationId": "getStudentHouseholds",
      "summary": "Get Student Households",
      "description": "Retrieves a page of instances of `studentHouseholdRelation`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, household. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "studentIds",
          "required": false,
          "description": "String Comma-separated list of `student` IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentHouseholdRelation' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentHouseholdRelation"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentHouseholdRelation",
                        "id": "derived-1-3",
                        "attributes": {
                          "studentId": 1,
                          "householdId": 3,
                          "residentialHousehold": "yes"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-household/derived-1-3/student"
                            }
                          },
                          "household": {
                            "data": {
                              "id": "3",
                              "type": "household"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-household/derived-1-3/household"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-household/derived-1-3",
                          "student": "/v1/enrolments/student-household/derived-1-3/student",
                          "household": "/v1/enrolments/student-household/derived-1-3/household"
                        }
                      },
                      {
                        "type": "studentHouseholdRelation",
                        "id": "derived-1-3",
                        "attributes": {
                          "studentId": 1,
                          "householdId": 3,
                          "residentialHousehold": "yes"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-household/derived-1-3/student"
                            }
                          },
                          "household": {
                            "data": {
                              "id": "3",
                              "type": "household"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-household/derived-1-3/household"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-household/derived-1-3",
                          "student": "/v1/enrolments/student-household/derived-1-3/student",
                          "household": "/v1/enrolments/student-household/derived-1-3/household"
                        }
                      },
                      {
                        "type": "studentHouseholdRelation",
                        "id": "derived-1-3",
                        "attributes": {
                          "studentId": 1,
                          "householdId": 3,
                          "residentialHousehold": "yes"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-household/derived-1-3/student"
                            }
                          },
                          "household": {
                            "data": {
                              "id": "3",
                              "type": "household"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-household/derived-1-3/household"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-household/derived-1-3",
                          "student": "/v1/enrolments/student-household/derived-1-3/student",
                          "household": "/v1/enrolments/student-household/derived-1-3/household"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-household/{id}": {
    "get": {
      "operationId": "getStudentHousehold",
      "summary": "Get Student Household",
      "description": "Retrieves a single instance of `studentHouseholdRelation`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String matching regular expression: ~^(\\d+|derived-\\d+-\\d+)$~ ID of the 'studentHouseholdRelation' to retrieve [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, household. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentHouseholdRelation' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentHouseholdRelation"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentHouseholdRelation",
                      "id": "derived-1-3",
                      "attributes": {
                        "studentId": 1,
                        "householdId": 3,
                        "residentialHousehold": "yes"
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          },
                          "links": {
                            "related": "/v1/enrolments/student-household/derived-1-3/student"
                          }
                        },
                        "household": {
                          "data": {
                            "id": "3",
                            "type": "household"
                          },
                          "links": {
                            "related": "/v1/enrolments/student-household/derived-1-3/household"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/student-household/derived-1-3",
                        "student": "/v1/enrolments/student-household/derived-1-3/student",
                        "household": "/v1/enrolments/student-household/derived-1-3/household"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-household/{id}/household": {
    "get": {
      "operationId": "getStudentHouseholdHousehold",
      "summary": "Get Student Household Household",
      "description": "Retrieves a single instance of ``, the relation `relatedHousehold` of `household`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String matching regular expression: ~^(\\d+|derived-\\d+-\\d+)$~ ID of the 'household' which relation to retrieve [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: addresses. [optional] [default: null] [example: \"addresses\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'household' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/household"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "household",
                      "id": "1",
                      "attributes": {
                        "address": null,
                        "mailingTitle": ""
                      },
                      "links": {
                        "self": "/v1/enrolments/household/1",
                        "addresses": "/v1/enrolments/household/1/addresses"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-household/{id}/student": {
    "get": {
      "operationId": "getStudentHouseholdStudent",
      "summary": "Get Student Household Student",
      "description": "Retrieves a single instance of ``, the relation `relatedStudent` of `student`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String matching regular expression: ~^(\\d+|derived-\\d+-\\d+)$~ ID of the 'student' which relation to retrieve [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'student' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/student"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "student",
                      "id": "1",
                      "attributes": {
                        "studentCode": null,
                        "barcode": null,
                        "permissionToPhotograph": true,
                        "examNumber": null,
                        "usiId": null,
                        "isEligibleForDiscount": false,
                        "acaraId": null,
                        "systemStudentId": null,
                        "refId": null,
                        "ealStage": null,
                        "ealIsReceivingSupport": null,
                        "ealLastAssessmentAt": null,
                        "isSubjectToCourtOrders": false,
                        "courtOrderInformation": null,
                        "studentFirstLanguage": null,
                        "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                        "languageOtherThanEnglishSpokenAtHome": false,
                        "studentMainlySpeaksEnglishAtHome": false,
                        "loteBackground": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "primaryEnrolment": {
                          "links": {
                            "related": "/v1/enrolments/student/1/primaryEnrolment"
                          }
                        },
                        "person": {
                          "links": {
                            "related": "/v1/enrolments/student/1/person"
                          }
                        },
                        "activities": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activities"
                          }
                        },
                        "activityLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activity-links"
                          }
                        },
                        "photo": {
                          "links": {
                            "related": "/v1/enrolments/student/1/photo"
                          }
                        },
                        "documents": {
                          "links": {
                            "related": "/v1/enrolments/student/1/documents"
                          }
                        },
                        "tenants": {
                          "links": {
                            "related": "/v1/enrolments/student/1/tenants"
                          }
                        },
                        "flags": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flags"
                          }
                        },
                        "flagLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flagLinks"
                          }
                        },
                        "awards": {
                          "links": {
                            "related": "/v1/enrolments/student/1/awards"
                          }
                        },
                        "awardLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/award-links"
                          }
                        },
                        "households": {
                          "links": {
                            "related": "/v1/enrolments/student/1/households"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/student/1",
                        "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                        "person": "/v1/enrolments/student/1/person",
                        "activities": "/v1/enrolments/student/1/activities",
                        "activityLinks": "/v1/enrolments/student/1/activity-links",
                        "photo": "/v1/enrolments/student/1/photo",
                        "documents": "/v1/enrolments/student/1/documents",
                        "tenants": "/v1/enrolments/student/1/tenants",
                        "flags": "/v1/enrolments/student/1/flags",
                        "flagLinks": "/v1/enrolments/student/1/flag-links"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-school-history": {
    "get": {
      "operationId": "getStudentClassHistories",
      "summary": "Get Student Class Histories",
      "description": "Retrieves a page of instances of `studentSchoolHistory`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "studentIds",
          "required": false,
          "description": "String Comma-separated list of `student` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentSchoolHistory' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentSchoolHistory"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentSchoolHistory",
                        "id": "1",
                        "attributes": {
                          "previousSchool": "Primary School no 1",
                          "destinationSchool": "Primary School no 2",
                          "startDate": "2014-09-01",
                          "endDate": "2017-02-01",
                          "country": "Poland",
                          "reasonForChange": "Parents moved",
                          "areRecordsReceived": true,
                          "isExpelledOrSuspended": false,
                          "hasLearningDisability": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-school-history/1"
                        }
                      },
                      {
                        "type": "studentSchoolHistory",
                        "id": "1",
                        "attributes": {
                          "previousSchool": "Primary School no 1",
                          "destinationSchool": "Primary School no 2",
                          "startDate": "2014-09-01",
                          "endDate": "2017-02-01",
                          "country": "Poland",
                          "reasonForChange": "Parents moved",
                          "areRecordsReceived": true,
                          "isExpelledOrSuspended": false,
                          "hasLearningDisability": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-school-history/1"
                        }
                      },
                      {
                        "type": "studentSchoolHistory",
                        "id": "1",
                        "attributes": {
                          "previousSchool": "Primary School no 1",
                          "destinationSchool": "Primary School no 2",
                          "startDate": "2014-09-01",
                          "endDate": "2017-02-01",
                          "country": "Poland",
                          "reasonForChange": "Parents moved",
                          "areRecordsReceived": true,
                          "isExpelledOrSuspended": false,
                          "hasLearningDisability": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-school-history/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student-school-history/{id}": {
    "get": {
      "operationId": "getStudentSchoolHistory",
      "summary": "Get Student School History",
      "description": "Retrieves a single instance of `studentSchoolHistory`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentSchoolHistory' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentSchoolHistory' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentSchoolHistory"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentSchoolHistory",
                      "id": "1",
                      "attributes": {
                        "previousSchool": "Primary School no 1",
                        "destinationSchool": "Primary School no 2",
                        "startDate": "2014-09-01",
                        "endDate": "2017-02-01",
                        "country": "Poland",
                        "reasonForChange": "Parents moved",
                        "areRecordsReceived": true,
                        "isExpelledOrSuspended": false,
                        "hasLearningDisability": false
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "2",
                            "type": "student"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/student-school-history/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}": {
    "patch": {
      "operationId": "patchStudent",
      "summary": "Patch Student",
      "description": "Updates an existing student\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`student`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `permissionToPhotograph` → Boolean This field cannot be modified once it's not null. [example: TRUE]\n   * `usiId` → String Updates the unique user identifier. [optional] [example: \"c8370653bf584bd7644ccb2ba1f39e78\"]\n   * `barcode` → String Updates the barcode field. [optional] [example: \"B000012680\"]\n   * `examNumber` → String Updates the examNumber field. [optional] [example: \"Value123\"]\n   * `studentCode` → String Updates the studentCode field. [optional] [example: \"40045\"]\n   * `systemStudentId` → String Updates the systemStudentId field. [optional] [example: \"Value123\"]\n   * `acaraId` → Number Updates the acaraId field. [optional] [example: \"Value234\"]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `student` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "permissionToPhotograph": {
                              "type": "boolean",
                              "description": "Boolean This field cannot be modified once it's not null. [optional] [example: TRUE]"
                            },
                            "usiId": {
                              "type": "string",
                              "description": "String Updates the unique user identifier. [optional] [example: \"c8370653bf584bd7644ccb2ba1f39e78\"]"
                            },
                            "barcode": {
                              "type": "string",
                              "description": "String Updates the barcode field. [optional] [example: \"B000012680\"]"
                            },
                            "examNumber": {
                              "type": "string",
                              "description": "String Updates the examNumber field. [optional] [example: \"Value123\"]"
                            },
                            "studentCode": {
                              "type": "string",
                              "description": "String Updates the studentCode field. [optional] [example: \"40045\"]"
                            },
                            "systemStudentId": {
                              "type": "string",
                              "description": "String Updates the systemStudentId field. [optional] [example: \"Value123\"]"
                            },
                            "acaraId": {
                              "type": "number",
                              "description": "Number Updates the acaraId field. [optional] [example: \"Value234\"]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "student",
                    "id": 1,
                    "attributes": {
                      "permissionToPhotograph": true,
                      "usiId": "c8370653bf584bd7644ccb2ba1f39e78",
                      "barcode": "B000012680",
                      "examNumber": "Value123",
                      "studentCode": "40045",
                      "systemStudentId": "Value123",
                      "acaraId": "Value234"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'student' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/student"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "student",
                      "id": "1",
                      "attributes": {
                        "studentCode": null,
                        "barcode": null,
                        "permissionToPhotograph": true,
                        "examNumber": null,
                        "usiId": null,
                        "isEligibleForDiscount": false,
                        "acaraId": null,
                        "systemStudentId": null,
                        "refId": null,
                        "ealStage": null,
                        "ealIsReceivingSupport": null,
                        "ealLastAssessmentAt": null,
                        "isSubjectToCourtOrders": false,
                        "courtOrderInformation": null,
                        "studentFirstLanguage": null,
                        "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                        "languageOtherThanEnglishSpokenAtHome": false,
                        "studentMainlySpeaksEnglishAtHome": false,
                        "loteBackground": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "primaryEnrolment": {
                          "links": {
                            "related": "/v1/enrolments/student/1/primaryEnrolment"
                          }
                        },
                        "person": {
                          "links": {
                            "related": "/v1/enrolments/student/1/person"
                          }
                        },
                        "activities": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activities"
                          }
                        },
                        "activityLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activity-links"
                          }
                        },
                        "photo": {
                          "links": {
                            "related": "/v1/enrolments/student/1/photo"
                          }
                        },
                        "documents": {
                          "links": {
                            "related": "/v1/enrolments/student/1/documents"
                          }
                        },
                        "tenants": {
                          "links": {
                            "related": "/v1/enrolments/student/1/tenants"
                          }
                        },
                        "flags": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flags"
                          }
                        },
                        "flagLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flagLinks"
                          }
                        },
                        "awards": {
                          "links": {
                            "related": "/v1/enrolments/student/1/awards"
                          }
                        },
                        "awardLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/award-links"
                          }
                        },
                        "households": {
                          "links": {
                            "related": "/v1/enrolments/student/1/households"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/student/1",
                        "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                        "person": "/v1/enrolments/student/1/person",
                        "activities": "/v1/enrolments/student/1/activities",
                        "activityLinks": "/v1/enrolments/student/1/activity-links",
                        "photo": "/v1/enrolments/student/1/photo",
                        "documents": "/v1/enrolments/student/1/documents",
                        "tenants": "/v1/enrolments/student/1/tenants",
                        "flags": "/v1/enrolments/student/1/flags",
                        "flagLinks": "/v1/enrolments/student/1/flag-links"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getStudent",
      "summary": "Get Student",
      "description": "Retrieves a single instance of `student`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'student' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'student' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/student"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "student",
                      "id": "1",
                      "attributes": {
                        "studentCode": null,
                        "barcode": null,
                        "permissionToPhotograph": true,
                        "examNumber": null,
                        "usiId": null,
                        "isEligibleForDiscount": false,
                        "acaraId": null,
                        "systemStudentId": null,
                        "refId": null,
                        "ealStage": null,
                        "ealIsReceivingSupport": null,
                        "ealLastAssessmentAt": null,
                        "isSubjectToCourtOrders": false,
                        "courtOrderInformation": null,
                        "studentFirstLanguage": null,
                        "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                        "languageOtherThanEnglishSpokenAtHome": false,
                        "studentMainlySpeaksEnglishAtHome": false,
                        "loteBackground": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "primaryEnrolment": {
                          "links": {
                            "related": "/v1/enrolments/student/1/primaryEnrolment"
                          }
                        },
                        "person": {
                          "links": {
                            "related": "/v1/enrolments/student/1/person"
                          }
                        },
                        "activities": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activities"
                          }
                        },
                        "activityLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activity-links"
                          }
                        },
                        "photo": {
                          "links": {
                            "related": "/v1/enrolments/student/1/photo"
                          }
                        },
                        "documents": {
                          "links": {
                            "related": "/v1/enrolments/student/1/documents"
                          }
                        },
                        "tenants": {
                          "links": {
                            "related": "/v1/enrolments/student/1/tenants"
                          }
                        },
                        "flags": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flags"
                          }
                        },
                        "flagLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flagLinks"
                          }
                        },
                        "awards": {
                          "links": {
                            "related": "/v1/enrolments/student/1/awards"
                          }
                        },
                        "awardLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/award-links"
                          }
                        },
                        "households": {
                          "links": {
                            "related": "/v1/enrolments/student/1/households"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/student/1",
                        "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                        "person": "/v1/enrolments/student/1/person",
                        "activities": "/v1/enrolments/student/1/activities",
                        "activityLinks": "/v1/enrolments/student/1/activity-links",
                        "photo": "/v1/enrolments/student/1/photo",
                        "documents": "/v1/enrolments/student/1/documents",
                        "tenants": "/v1/enrolments/student/1/tenants",
                        "flags": "/v1/enrolments/student/1/flags",
                        "flagLinks": "/v1/enrolments/student/1/flag-links"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/absences": {
    "get": {
      "operationId": "getStudentAbsences",
      "summary": "Get Student Absences",
      "description": "Retrieves a page of the instances of ``, the relation `absences` of `absence`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'absence' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'absence' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/absence"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "absence",
                        "id": "1",
                        "attributes": {
                          "type": "timed",
                          "date": "2018-10-01",
                          "start": null,
                          "end": null,
                          "comment": "",
                          "explainer": "",
                          "explainerSource": "",
                          "letterSent": false,
                          "submitted": false
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "3",
                              "type": "student"
                            }
                          },
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          },
                          "matchingFutureAbsence": {
                            "data": {
                              "id": "4",
                              "type": "futureAbsence"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/attendance/absence/1",
                          "student": "/v1/enrolments/student/3"
                        }
                      },
                      {
                        "type": "absence",
                        "id": "1",
                        "attributes": {
                          "type": "timed",
                          "date": "2018-10-01",
                          "start": null,
                          "end": null,
                          "comment": "",
                          "explainer": "",
                          "explainerSource": "",
                          "letterSent": false,
                          "submitted": false
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "3",
                              "type": "student"
                            }
                          },
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          },
                          "matchingFutureAbsence": {
                            "data": {
                              "id": "4",
                              "type": "futureAbsence"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/attendance/absence/1",
                          "student": "/v1/enrolments/student/3"
                        }
                      },
                      {
                        "type": "absence",
                        "id": "1",
                        "attributes": {
                          "type": "timed",
                          "date": "2018-10-01",
                          "start": null,
                          "end": null,
                          "comment": "",
                          "explainer": "",
                          "explainerSource": "",
                          "letterSent": false,
                          "submitted": false
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "3",
                              "type": "student"
                            }
                          },
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          },
                          "matchingFutureAbsence": {
                            "data": {
                              "id": "4",
                              "type": "futureAbsence"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/attendance/absence/1",
                          "student": "/v1/enrolments/student/3"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/academic-reports": {
    "get": {
      "operationId": "getStudentRelatedAcademicReports",
      "summary": "Get Student Related Academic Reports",
      "description": "Retrieves a page of the instances of ``, the relation `academicReports` of `studentAcademicReport`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentAcademicReport' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: period. [optional] [default: null] [example: \"period\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentAcademicReport' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentAcademicReport"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentAcademicReport",
                        "id": "1",
                        "attributes": {
                          "publishedDateTime": null,
                          "year": "2018",
                          "semester": "1",
                          "reportingPeriod": "First semester 2018",
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/reports/student-academic-report/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "studentAcademicReport",
                        "id": "1",
                        "attributes": {
                          "publishedDateTime": null,
                          "year": "2018",
                          "semester": "1",
                          "reportingPeriod": "First semester 2018",
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/reports/student-academic-report/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "studentAcademicReport",
                        "id": "1",
                        "attributes": {
                          "publishedDateTime": null,
                          "year": "2018",
                          "semester": "1",
                          "reportingPeriod": "First semester 2018",
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/reports/student-academic-report/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/activities": {
    "get": {
      "operationId": "getStudentActivities",
      "summary": "Get Student Activities",
      "description": "Retrieves a page of the instances of ``, the relation `activities` of `activity`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activity' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: venue. [optional] [default: null] [example: \"venue\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "fromDate",
          "required": false,
          "description": "Date (Y-m-d, eg. 20190102) Return only activities that end after this date. [optional] [default: null]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "toDate",
          "required": false,
          "description": "Date (Y-m-d, eg. 20190102) Return only activities that start before this date. [optional] [default: null]",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'activity' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/activity"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "activity",
                        "id": "1",
                        "attributes": {
                          "name": "Basketball Match",
                          "reportName": "Basketball Match Report",
                          "description": "A basketball match between two classes.",
                          "startDate": "2018-10-01",
                          "endDate": "2018-10-01",
                          "startTime": "10:00:00",
                          "endTime": "12:00:00",
                          "permissionFormDueDate": null,
                          "isRestrictedByTerm": false,
                          "isRestrictedByYear": false,
                          "showReports": false,
                          "showAttendance": false,
                          "showPortal": false,
                          "selfRegistration": false,
                          "approvalRequired": false,
                          "maximumPlaces": 128,
                          "waitingListPlaces": 30,
                          "archived": null,
                          "riskAssessment": false,
                          "registrationType": "ACTIVITY",
                          "portalDescription": "A match (remember to call parents).",
                          "availableTerms": [],
                          "availableYears": null,
                          "isActive": true
                        },
                        "relationships": {
                          "cycles": {
                            "links": {
                              "related": "/v1/activities/activity/1/cycles"
                            }
                          },
                          "instances": {
                            "links": {
                              "related": "/v1/activities/activity/1/instances"
                            }
                          },
                          "organisers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity/1",
                          "cycles": "/v1/activities/activity/1/cycles",
                          "instances": "/v1/activities/activity/1/instances"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "activity",
                        "id": "1",
                        "attributes": {
                          "name": "Basketball Match",
                          "reportName": "Basketball Match Report",
                          "description": "A basketball match between two classes.",
                          "startDate": "2018-10-01",
                          "endDate": "2018-10-01",
                          "startTime": "10:00:00",
                          "endTime": "12:00:00",
                          "permissionFormDueDate": null,
                          "isRestrictedByTerm": false,
                          "isRestrictedByYear": false,
                          "showReports": false,
                          "showAttendance": false,
                          "showPortal": false,
                          "selfRegistration": false,
                          "approvalRequired": false,
                          "maximumPlaces": 128,
                          "waitingListPlaces": 30,
                          "archived": null,
                          "riskAssessment": false,
                          "registrationType": "ACTIVITY",
                          "portalDescription": "A match (remember to call parents).",
                          "availableTerms": [],
                          "availableYears": null,
                          "isActive": true
                        },
                        "relationships": {
                          "cycles": {
                            "links": {
                              "related": "/v1/activities/activity/1/cycles"
                            }
                          },
                          "instances": {
                            "links": {
                              "related": "/v1/activities/activity/1/instances"
                            }
                          },
                          "organisers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity/1",
                          "cycles": "/v1/activities/activity/1/cycles",
                          "instances": "/v1/activities/activity/1/instances"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "activity",
                        "id": "1",
                        "attributes": {
                          "name": "Basketball Match",
                          "reportName": "Basketball Match Report",
                          "description": "A basketball match between two classes.",
                          "startDate": "2018-10-01",
                          "endDate": "2018-10-01",
                          "startTime": "10:00:00",
                          "endTime": "12:00:00",
                          "permissionFormDueDate": null,
                          "isRestrictedByTerm": false,
                          "isRestrictedByYear": false,
                          "showReports": false,
                          "showAttendance": false,
                          "showPortal": false,
                          "selfRegistration": false,
                          "approvalRequired": false,
                          "maximumPlaces": 128,
                          "waitingListPlaces": 30,
                          "archived": null,
                          "riskAssessment": false,
                          "registrationType": "ACTIVITY",
                          "portalDescription": "A match (remember to call parents).",
                          "availableTerms": [],
                          "availableYears": null,
                          "isActive": true
                        },
                        "relationships": {
                          "cycles": {
                            "links": {
                              "related": "/v1/activities/activity/1/cycles"
                            }
                          },
                          "instances": {
                            "links": {
                              "related": "/v1/activities/activity/1/instances"
                            }
                          },
                          "organisers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              }
                            ]
                          }
                        },
                        "links": {
                          "self": "/v1/activities/activity/1",
                          "cycles": "/v1/activities/activity/1/cycles",
                          "instances": "/v1/activities/activity/1/instances"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/activity-links": {
    "get": {
      "operationId": "getStudentActivityLinks",
      "summary": "Get Student Activity Links",
      "description": "Retrieves a page of the instances of ``, the relation `activityLink` of `attendeeLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'attendeeLink' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'attendeeLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/attendeeLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "attendeeLink",
                        "id": "1",
                        "attributes": {
                          "attendeeType": "Family Member",
                          "showInReports": null,
                          "points": null,
                          "permissionGiven": "Unknown",
                          "paid": false,
                          "paidAmount": null
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "1",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/attendee-link/1",
                          "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                        }
                      },
                      {
                        "type": "attendeeLink",
                        "id": "1",
                        "attributes": {
                          "attendeeType": "Family Member",
                          "showInReports": null,
                          "points": null,
                          "permissionGiven": "Unknown",
                          "paid": false,
                          "paidAmount": null
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "1",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/attendee-link/1",
                          "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                        }
                      },
                      {
                        "type": "attendeeLink",
                        "id": "1",
                        "attributes": {
                          "attendeeType": "Family Member",
                          "showInReports": null,
                          "points": null,
                          "permissionGiven": "Unknown",
                          "paid": false,
                          "paidAmount": null
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "activityInstance": {
                            "data": {
                              "id": "1",
                              "type": "activityInstance"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/activities/attendee-link/1",
                          "enrolmentAttendee": "/v1/activities/attendee-link/1/student"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/award-links": {
    "get": {
      "operationId": "getStudentRelatedAwardLinks",
      "summary": "Get Student Related Award Links",
      "description": "Retrieves a page of the instances of ``, the relation `awardLinks` of `studentAwardLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentAwardLink' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentAwardLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentAwardLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentAwardLink",
                        "id": "1",
                        "attributes": {
                          "date": "2018-01-01"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/award/1"
                        }
                      },
                      {
                        "type": "studentAwardLink",
                        "id": "1",
                        "attributes": {
                          "date": "2018-01-01"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/award/1"
                        }
                      },
                      {
                        "type": "studentAwardLink",
                        "id": "1",
                        "attributes": {
                          "date": "2018-01-01"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/award/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/awards": {
    "get": {
      "operationId": "getStudentAwards",
      "summary": "Get Student Awards",
      "description": "Retrieves a page of the instances of ``, the relation `awards` of `award`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'award' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'award' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/award"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "award",
                        "id": "1",
                        "attributes": {
                          "name": "International Spelling Bee Championship 2019",
                          "value": 5,
                          "pointValue": 3,
                          "sequence": 1
                        },
                        "relationships": {
                          "category": {
                            "data": {
                              "id": "2",
                              "type": "awardCategory"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/award/1"
                        }
                      },
                      {
                        "type": "award",
                        "id": "1",
                        "attributes": {
                          "name": "International Spelling Bee Championship 2019",
                          "value": 5,
                          "pointValue": 3,
                          "sequence": 1
                        },
                        "relationships": {
                          "category": {
                            "data": {
                              "id": "2",
                              "type": "awardCategory"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/award/1"
                        }
                      },
                      {
                        "type": "award",
                        "id": "1",
                        "attributes": {
                          "name": "International Spelling Bee Championship 2019",
                          "value": 5,
                          "pointValue": 3,
                          "sequence": 1
                        },
                        "relationships": {
                          "category": {
                            "data": {
                              "id": "2",
                              "type": "awardCategory"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/award/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/document": {
    "post": {
      "operationId": "postStudentRelatedStudentDocument",
      "summary": "Post Student Related Student Document",
      "description": "Adds a new 'studentDocument' to a 'studentEnrolmentDraft'. The file should be uploaded via 'multipart/form-data' and should be sent under key 'document'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'STUDENT' to which the document should be added. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "isConfidential",
          "required": false,
          "description": "Boolean Controls whether the newly created file should be confidential or not. [optional] [default: false]",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "in": "query",
          "name": "studentEnrolmentDraftId",
          "required": false,
          "description": "Number ID of the `studentEnrolmentDraft` to which this document should be additionally attached. The draft must be related through `student` relation to the student to which the document is added. [optional] [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "categoryId",
          "required": false,
          "description": "Number ID of the `category` relation to which this document should belong. [optional] [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentDocument' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentDocument"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentDocument",
                      "id": "1",
                      "attributes": {
                        "fileName": null,
                        "isConfidential": true
                      },
                      "links": {
                        "self": "/v1/enrolments/student-document/1",
                        "file": "/v1/enrolments/student-document/1/file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/documents": {
    "get": {
      "operationId": "getStudentStudentDocuments",
      "summary": "Get Student Student Documents",
      "description": "Retrieves all of the instances of ``, the relation `documents` of `studentDocument`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentDocument' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentDocument' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentDocument"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentDocument",
                        "id": "1",
                        "attributes": {
                          "fileName": null,
                          "isConfidential": true
                        },
                        "links": {
                          "self": "/v1/enrolments/student-document/1",
                          "file": "/v1/enrolments/student-document/1/file"
                        }
                      },
                      {
                        "type": "studentDocument",
                        "id": "1",
                        "attributes": {
                          "fileName": null,
                          "isConfidential": true
                        },
                        "links": {
                          "self": "/v1/enrolments/student-document/1",
                          "file": "/v1/enrolments/student-document/1/file"
                        }
                      },
                      {
                        "type": "studentDocument",
                        "id": "1",
                        "attributes": {
                          "fileName": null,
                          "isConfidential": true
                        },
                        "links": {
                          "self": "/v1/enrolments/student-document/1",
                          "file": "/v1/enrolments/student-document/1/file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/edupro-academic-reports": {
    "get": {
      "operationId": "getStudentRelatedEduProAcademicReports",
      "summary": "Get Student Related Edu Pro Academic Reports",
      "description": "Retrieves a page of the instances of ``, the relation `eduProAcademicReports` of `studentAcademicReportEduPro`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentAcademicReportEduPro' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentAcademicReportEduPro' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentAcademicReportEduPro"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentAcademicReportEduPro",
                        "id": "1",
                        "attributes": {
                          "year": "2018",
                          "semester": 1,
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/edupro/student-academic-report/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "studentAcademicReportEduPro",
                        "id": "1",
                        "attributes": {
                          "year": "2018",
                          "semester": 1,
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/edupro/student-academic-report/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "studentAcademicReportEduPro",
                        "id": "1",
                        "attributes": {
                          "year": "2018",
                          "semester": 1,
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/edupro/student-academic-report/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/enrolments": {
    "get": {
      "operationId": "getStudentEnrolments",
      "summary": "Get Student Enrolments",
      "description": "Retrieves all of the instances of ``, the relation `enrolments` of `enrolment`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'enrolment' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, house, rollclass, classes, campus. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "statuses",
          "required": false,
          "description": "String Comma-separated list of enrolment types to filter by. Reference the model `enrolment` for the list of all supported types.. [optional] [default: active,active_pending,active_leaving] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'enrolment' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/enrolment"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "enrolment",
                        "id": "1",
                        "attributes": {
                          "startDate": "2018-09-01T00:00:00+00:00",
                          "endDate": null,
                          "status": "active",
                          "school": null,
                          "schoolYear": null,
                          "rollClass": null,
                          "isBoarding": false,
                          "boardingHouse": null,
                          "tutorGroup": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "house": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/house"
                            }
                          },
                          "rollclass": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/rollclass"
                            }
                          },
                          "classes": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/classes"
                            }
                          },
                          "academicPeriod": {
                            "data": {
                              "id": "1",
                              "type": "academicPeriod"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1",
                          "house": "/v1/enrolments/enrolment/1/house",
                          "classes": "/v1/enrolments/enrolment/1/classes",
                          "rollclass": "/v1/enrolments/enrolment/1/rollclass"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "enrolment",
                        "id": "1",
                        "attributes": {
                          "startDate": "2018-09-01T00:00:00+00:00",
                          "endDate": null,
                          "status": "active",
                          "school": null,
                          "schoolYear": null,
                          "rollClass": null,
                          "isBoarding": false,
                          "boardingHouse": null,
                          "tutorGroup": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "house": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/house"
                            }
                          },
                          "rollclass": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/rollclass"
                            }
                          },
                          "classes": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/classes"
                            }
                          },
                          "academicPeriod": {
                            "data": {
                              "id": "1",
                              "type": "academicPeriod"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1",
                          "house": "/v1/enrolments/enrolment/1/house",
                          "classes": "/v1/enrolments/enrolment/1/classes",
                          "rollclass": "/v1/enrolments/enrolment/1/rollclass"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "enrolment",
                        "id": "1",
                        "attributes": {
                          "startDate": "2018-09-01T00:00:00+00:00",
                          "endDate": null,
                          "status": "active",
                          "school": null,
                          "schoolYear": null,
                          "rollClass": null,
                          "isBoarding": false,
                          "boardingHouse": null,
                          "tutorGroup": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "house": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/house"
                            }
                          },
                          "rollclass": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/rollclass"
                            }
                          },
                          "classes": {
                            "links": {
                              "related": "/v1/enrolments/enrolment/1/classes"
                            }
                          },
                          "academicPeriod": {
                            "data": {
                              "id": "1",
                              "type": "academicPeriod"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1",
                          "house": "/v1/enrolments/enrolment/1/house",
                          "classes": "/v1/enrolments/enrolment/1/classes",
                          "rollclass": "/v1/enrolments/enrolment/1/rollclass"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/flag-links": {
    "get": {
      "operationId": "getStudentStudentFlagLinks",
      "summary": "Get Student Student Flag Links",
      "description": "Retrieves all of the instances of ``, the relation `flagLinks` of `studentFlagLink`. Results will include `studentFlagLinks` that link to inactive `flags`, but deleted `studentFlagLinks` will not appear in the results.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentFlagLink' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, flag. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentFlagLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentFlagLink"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentFlagLink",
                        "id": "1",
                        "attributes": {
                          "comment": "Has failed every Math exam so far",
                          "expiryDate": "2018-06-01"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "flag": {
                            "data": {
                              "id": "1",
                              "type": "flag"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/house/1"
                        }
                      },
                      {
                        "type": "studentFlagLink",
                        "id": "1",
                        "attributes": {
                          "comment": "Has failed every Math exam so far",
                          "expiryDate": "2018-06-01"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "flag": {
                            "data": {
                              "id": "1",
                              "type": "flag"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/house/1"
                        }
                      },
                      {
                        "type": "studentFlagLink",
                        "id": "1",
                        "attributes": {
                          "comment": "Has failed every Math exam so far",
                          "expiryDate": "2018-06-01"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "flag": {
                            "data": {
                              "id": "1",
                              "type": "flag"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/house/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/flags": {
    "get": {
      "operationId": "getStudentFlags",
      "summary": "Get Student Flags",
      "description": "Retrieves all of the instances of ``, the relation `flags` of `flag`. Results will include inactive `flags`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'flag' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: school. [optional] [default: null] [example: \"school\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'flag' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/flag"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "flag",
                        "id": "1",
                        "attributes": {
                          "internalName": "hasSchoolProblems",
                          "name": "Has school problems",
                          "color": "FF8888",
                          "showInSentral": true,
                          "showInFees": true,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/flag/1",
                          "school": "/v1/enrolments/flag/1/school"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "flag",
                        "id": "1",
                        "attributes": {
                          "internalName": "hasSchoolProblems",
                          "name": "Has school problems",
                          "color": "FF8888",
                          "showInSentral": true,
                          "showInFees": true,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/flag/1",
                          "school": "/v1/enrolments/flag/1/school"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "flag",
                        "id": "1",
                        "attributes": {
                          "internalName": "hasSchoolProblems",
                          "name": "Has school problems",
                          "color": "FF8888",
                          "showInSentral": true,
                          "showInFees": true,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enrolments/flag/1",
                          "school": "/v1/enrolments/flag/1/school"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/households": {
    "get": {
      "operationId": "getStudentHouseholdRelations",
      "summary": "Get Student Household Relations",
      "description": "Retrieves all of the instances of ``, the relation `households` of `studentHouseholdRelation`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentHouseholdRelation' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, household. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "residentialHouseholdTypes",
          "required": false,
          "description": "String Comma-separated list of Residential household types to filter by. Reference the model `HouseholdStudentRelations` for the list of all supported types.. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentHouseholdRelation' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentHouseholdRelation"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentHouseholdRelation",
                        "id": "derived-1-3",
                        "attributes": {
                          "studentId": 1,
                          "householdId": 3,
                          "residentialHousehold": "yes"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-household/derived-1-3/student"
                            }
                          },
                          "household": {
                            "data": {
                              "id": "3",
                              "type": "household"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-household/derived-1-3/household"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-household/derived-1-3",
                          "student": "/v1/enrolments/student-household/derived-1-3/student",
                          "household": "/v1/enrolments/student-household/derived-1-3/household"
                        }
                      },
                      {
                        "type": "studentHouseholdRelation",
                        "id": "derived-1-3",
                        "attributes": {
                          "studentId": 1,
                          "householdId": 3,
                          "residentialHousehold": "yes"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-household/derived-1-3/student"
                            }
                          },
                          "household": {
                            "data": {
                              "id": "3",
                              "type": "household"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-household/derived-1-3/household"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-household/derived-1-3",
                          "student": "/v1/enrolments/student-household/derived-1-3/student",
                          "household": "/v1/enrolments/student-household/derived-1-3/household"
                        }
                      },
                      {
                        "type": "studentHouseholdRelation",
                        "id": "derived-1-3",
                        "attributes": {
                          "studentId": 1,
                          "householdId": 3,
                          "residentialHousehold": "yes"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-household/derived-1-3/student"
                            }
                          },
                          "household": {
                            "data": {
                              "id": "3",
                              "type": "household"
                            },
                            "links": {
                              "related": "/v1/enrolments/student-household/derived-1-3/household"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student-household/derived-1-3",
                          "student": "/v1/enrolments/student-household/derived-1-3/student",
                          "household": "/v1/enrolments/student-household/derived-1-3/household"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/person": {
    "get": {
      "operationId": "getStudentPerson",
      "summary": "Get Student Person",
      "description": "Retrieves a single instances of person based on the specified ID.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the student whose person details should be retrieved.",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryHousehold, studentPrimaryEnrolment, staff, student, contactDetails, otherHouseholds, studentContacts, studentTenants, prescribedMedication, emails, phoneNumbers, givenConsents, givenConsentLinks, emergencyContactLinks, abilities, additionalFields. [optional] [default: null] [example: \"primaryHousehold\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'person' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/person"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "person",
                      "id": "1",
                      "attributes": {
                        "externalId": null,
                        "refId": null,
                        "contactCode": null,
                        "name": "John",
                        "surname": "Doe",
                        "firstName": "John",
                        "middleNames": "Franz Stephen",
                        "lastName": "Doe",
                        "legalLastName": null,
                        "preferredName": null,
                        "email": "john.doe@example.com",
                        "title": null,
                        "givenNames": "Franz Stephen",
                        "gender": "Other",
                        "genderCode": "Other",
                        "dateOfBirth": null,
                        "crn": null,
                        "languageSpokenAtHome": null,
                        "languageSpokenAtHomeCode": null,
                        "countryOfCitizenship": null,
                        "religion": null,
                        "residentialStatus": null,
                        "isDeceased": false,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "primaryHousehold": {
                          "links": {
                            "related": "/v1/enrolments/person/1/primary-household"
                          }
                        },
                        "staff": {
                          "links": {
                            "related": "/v1/enrolments/person/1/staff"
                          }
                        },
                        "student": {
                          "links": {
                            "related": "/v1/enrolments/person/1/student"
                          }
                        },
                        "contactDetails": {
                          "links": {
                            "related": "/v1/enrolments/person/1/person-contact-details"
                          }
                        },
                        "otherHouseholds": {
                          "links": {
                            "related": "/v1/enrolments/person/1/other-households"
                          }
                        },
                        "studentContacts": {
                          "links": {
                            "related": "/v1/enrolments/person/1/student-contacts"
                          }
                        },
                        "medicalSummary": {
                          "links": {
                            "related": "/v1/enrolments/person/1/medical-summary"
                          }
                        },
                        "medicalConditions": {
                          "links": {
                            "related": "/v1/enrolments/person/1/medical-conditions"
                          }
                        },
                        "prescribedMedication": {
                          "links": {
                            "related": "/v1/enrolments/person/1/prescribed-medications"
                          }
                        },
                        "doctors": {
                          "links": {
                            "related": "/v1/enrolments/person/1/doctors"
                          }
                        },
                        "associatedStudents": {
                          "links": {
                            "related": "/v1/enrolments/person/1/associated-students"
                          }
                        },
                        "givenConsents": {
                          "links": {
                            "related": "/v1/enrolments/person/1/given-consents"
                          }
                        },
                        "givenConsentLinks": {
                          "links": {
                            "related": "/v1/enrolments/person/1/given-consent-links"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/person/1",
                        "primaryHousehold": "/v1/enrolments/person/1/primary-household",
                        "otherHouseholds": "/v1/enrolments/person/1/other-households",
                        "staff": "/v1/enrolments/person/1/staff",
                        "student": "/v1/enrolments/person/1/student",
                        "studentContacts": "/v1/enrolments/person/1/student-contacts",
                        "associatedStudents": "/v1/enrolments/person/1/associated-students",
                        "medicalSummary": "/v1/enrolments/person/1/medical-summary",
                        "medicalConditions": "/v1/enrolments/person/1/medical-conditions",
                        "prescribedMedications": "/v1/enrolments/person/1/prescribed-medications",
                        "doctors": "/v1/enrolments/person/1/doctors"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/photo": {
    "get": {
      "operationId": "getStudentPhoto",
      "summary": "Get Student Photo",
      "description": "Returns the photo of a given student",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String ID of the student whose photo to retrieve. Also supports `externalId` for backwards compatibility.",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "width",
          "required": false,
          "description": "Number Width of the returned photo, must be between 16 and 1024, defaults to 256. [optional] [default: 256] \nValue constraints:\nMimimum value: 16 [inclusive]\nMaximum value: 1024 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "height",
          "required": false,
          "description": "Number Height of the returned photo, must be between 16 and 1024, defaults to 256. [optional] [default: 256] \nValue constraints:\nMimimum value: 16 [inclusive]\nMaximum value: 1024 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the image requested",
          "content": {
            "image/jpeg": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/primary-enrolment": {
    "get": {
      "operationId": "getStudentPrimaryEnrolment",
      "summary": "Get Student Primary Enrolment",
      "description": "Retrieves a single instance of ``, the relation `primaryEnrolment` of `enrolment`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'enrolment' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: student, house, rollclass, classes, campus. [optional] [default: null] [example: \"student\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'enrolment' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/enrolment"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "enrolment",
                      "id": "1",
                      "attributes": {
                        "startDate": "2018-09-01T00:00:00+00:00",
                        "endDate": null,
                        "status": "active",
                        "school": null,
                        "schoolYear": null,
                        "rollClass": null,
                        "isBoarding": false,
                        "boardingHouse": null,
                        "tutorGroup": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        },
                        "house": {
                          "links": {
                            "related": "/v1/enrolments/enrolment/1/house"
                          }
                        },
                        "rollclass": {
                          "links": {
                            "related": "/v1/enrolments/enrolment/1/rollclass"
                          }
                        },
                        "classes": {
                          "links": {
                            "related": "/v1/enrolments/enrolment/1/classes"
                          }
                        },
                        "academicPeriod": {
                          "data": {
                            "id": "1",
                            "type": "academicPeriod"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/enrolment/1",
                        "house": "/v1/enrolments/enrolment/1/house",
                        "classes": "/v1/enrolments/enrolment/1/classes",
                        "rollclass": "/v1/enrolments/enrolment/1/rollclass"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/special-needs-programs": {
    "get": {
      "operationId": "getStudentSpecialNeedsPrograms",
      "summary": "Get Student Special Needs Programs",
      "description": "Retrieves all of the instances of ``, the relation `specialNeedsPrograms` of `specialNeedsProgram`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'specialNeedsProgram' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: students. [optional] [default: null] [example: \"students\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'specialNeedsProgram' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/specialNeedsProgram"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "specialNeedsProgram",
                        "id": "1",
                        "attributes": {
                          "name": "Attendance Improvement"
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/special-needs-program/1"
                        }
                      },
                      {
                        "type": "specialNeedsProgram",
                        "id": "1",
                        "attributes": {
                          "name": "Attendance Improvement"
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/special-needs-program/1"
                        }
                      },
                      {
                        "type": "specialNeedsProgram",
                        "id": "1",
                        "attributes": {
                          "name": "Attendance Improvement"
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/special-needs-program/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/student/{id}/tenants": {
    "get": {
      "operationId": "getStudentTenants",
      "summary": "Get Student Tenants",
      "description": "Retrieves all of the instances of ``, the relation `tenants` of `tenant`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'tenant' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: schools. [optional] [default: null] [example: \"schools\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'tenant' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/tenant"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "tenant",
                        "id": "1",
                        "attributes": {
                          "name": "School 1 Tenant",
                          "code": "a7bd8e",
                          "region": "SA",
                          "key": "14738a",
                          "timezone": "Australia/Sydney",
                          "isActive": true
                        },
                        "relationships": {
                          "schools": {
                            "links": {
                              "related": "/v1/enterprise/tenant/1/schools"
                            }
                          },
                          "termDates": {
                            "links": {
                              "related": "/v1/enterprise/tenant/1/term-dates"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enterprise/tenant/1",
                          "schools": "/v1/enterprise/tenant/1/schools"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "tenant",
                        "id": "1",
                        "attributes": {
                          "name": "School 1 Tenant",
                          "code": "a7bd8e",
                          "region": "SA",
                          "key": "14738a",
                          "timezone": "Australia/Sydney",
                          "isActive": true
                        },
                        "relationships": {
                          "schools": {
                            "links": {
                              "related": "/v1/enterprise/tenant/1/schools"
                            }
                          },
                          "termDates": {
                            "links": {
                              "related": "/v1/enterprise/tenant/1/term-dates"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enterprise/tenant/1",
                          "schools": "/v1/enterprise/tenant/1/schools"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "tenant",
                        "id": "1",
                        "attributes": {
                          "name": "School 1 Tenant",
                          "code": "a7bd8e",
                          "region": "SA",
                          "key": "14738a",
                          "timezone": "Australia/Sydney",
                          "isActive": true
                        },
                        "relationships": {
                          "schools": {
                            "links": {
                              "related": "/v1/enterprise/tenant/1/schools"
                            }
                          },
                          "termDates": {
                            "links": {
                              "related": "/v1/enterprise/tenant/1/term-dates"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enterprise/tenant/1",
                          "schools": "/v1/enterprise/tenant/1/schools"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/vaccination": {
    "get": {
      "operationId": "getVaccinations",
      "summary": "Get Vaccinations",
      "description": "Retrieves a page of instances of `vaccination`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'vaccination' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/vaccination"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "vaccination",
                        "id": "1",
                        "attributes": {
                          "name": "Polio Vaccination",
                          "dateOfVaccination": "2017-01-01",
                          "comment": "This is a comment"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/vaccination/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/vaccination/1"
                        }
                      },
                      {
                        "type": "vaccination",
                        "id": "1",
                        "attributes": {
                          "name": "Polio Vaccination",
                          "dateOfVaccination": "2017-01-01",
                          "comment": "This is a comment"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/vaccination/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/vaccination/1"
                        }
                      },
                      {
                        "type": "vaccination",
                        "id": "1",
                        "attributes": {
                          "name": "Polio Vaccination",
                          "dateOfVaccination": "2017-01-01",
                          "comment": "This is a comment"
                        },
                        "relationships": {
                          "person": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            },
                            "links": {
                              "related": "/v1/enrolments/vaccination/1/person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/vaccination/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/vaccination/{id}": {
    "get": {
      "operationId": "getVaccination",
      "summary": "Get Vaccination",
      "description": "Retrieves a single instance of `vaccination`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'vaccination' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: person. [optional] [default: null] [example: \"person\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'vaccination' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/vaccination"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "vaccination",
                      "id": "1",
                      "attributes": {
                        "name": "Polio Vaccination",
                        "dateOfVaccination": "2017-01-01",
                        "comment": "This is a comment"
                      },
                      "relationships": {
                        "person": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          },
                          "links": {
                            "related": "/v1/enrolments/vaccination/1/person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/vaccination/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/year-level": {
    "get": {
      "operationId": "getYearLevels",
      "summary": "Get Year Levels",
      "description": "Retrieves a page of instances of `yearLevel`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "schoolIds",
          "required": false,
          "description": "String Comma-separated list of `school` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'yearLevel' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/yearLevel"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "yearLevel",
                        "id": "1",
                        "attributes": {
                          "name": "11",
                          "code": "11",
                          "isActive": true
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/year-level/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "yearLevel",
                        "id": "1",
                        "attributes": {
                          "name": "11",
                          "code": "11",
                          "isActive": true
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/year-level/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "yearLevel",
                        "id": "1",
                        "attributes": {
                          "name": "11",
                          "code": "11",
                          "isActive": true
                        },
                        "relationships": {
                          "school": {
                            "data": {
                              "id": "1",
                              "type": "school"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/year-level/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enrolments/year-level/{id}": {
    "get": {
      "operationId": "getYearLevel",
      "summary": "Get Year Level",
      "description": "Retrieves a single instance of `yearLevel`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'yearLevel' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'yearLevel' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/yearLevel"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "yearLevel",
                      "id": "1",
                      "attributes": {
                        "name": "11",
                        "code": "11",
                        "isActive": true
                      },
                      "relationships": {
                        "school": {
                          "data": {
                            "id": "1",
                            "type": "school"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/year-level/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/administrative-user": {
    "get": {
      "operationId": "getAdministrativeUsers",
      "summary": "Get Administrative Users",
      "description": "Retrieves a page of instances of `administrativeUser`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs by which to filter. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "in": "query",
          "name": "firstNameSearch",
          "required": false,
          "description": "String Search for `firstName`. By default it looks for an exact match, but special characters `_` and `%` can be used to look for, respectively, any single character or zero or more characters.\n For example, `Test_` will match `Test1`, `TestB` but not `Test` or `TestLong`, while `Test%` will match all of them. These special characters can be escaped by prepending them with a backslach `\\`. [optional] [default: null] [example: \"John%\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "lastNameSearch",
          "required": false,
          "description": "String Search for `lastName`. By default it looks for an exact match, but special characters `_` and `%` can be used to look for, respectively, any single character or zero or more characters.\n For example, `Test_` will match `Test1`, `TestB` but not `Test` or `TestLong`, while `Test%` will match all of them. These special characters can be escaped by prepending them with a backslach `\\`. [optional] [default: null] [example: \"Doe\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "usernameSearch",
          "required": false,
          "description": "String Search for `username`. By default it looks for an exact match, but special characters `_` and `%` can be used to look for, respectively, any single character or zero or more characters.\n For example, `Test_` will match `Test1`, `TestB` but not `Test` or `TestLong`, while `Test%` will match all of them. These special characters can be escaped by prepending them with a backslach `\\`. [optional] [default: null] [example: \"admin_\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "emailSearch",
          "required": false,
          "description": "String Search for `email`. By default it looks for an exact match, but special characters `_` and `%` can be used to look for, respectively, any single character or zero or more characters.\n For example, `Test_` will match `Test1`, `TestB` but not `Test` or `TestLong`, while `Test%` will match all of them. These special characters can be escaped by prepending them with a backslach `\\`. [optional] [default: null] [example: \"%@gmail.com\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'administrativeUser' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/administrativeUser"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "administrativeUser",
                        "id": "1",
                        "attributes": {
                          "provider": "au.com.sentral.enterprise",
                          "providerId": "04e34506-9262-4edf-a34d-a4b0adbc11a7",
                          "externalId": "8E33AF9B642347AB162536C35DB716E8",
                          "username": null,
                          "guid": null,
                          "title": "Mr.",
                          "firstName": "John",
                          "lastName": "Doe",
                          "email": "john.doe@example.com",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enterprise/administrative-user/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "administrativeUser",
                        "id": "1",
                        "attributes": {
                          "provider": "au.com.sentral.enterprise",
                          "providerId": "04e34506-9262-4edf-a34d-a4b0adbc11a7",
                          "externalId": "8E33AF9B642347AB162536C35DB716E8",
                          "username": null,
                          "guid": null,
                          "title": "Mr.",
                          "firstName": "John",
                          "lastName": "Doe",
                          "email": "john.doe@example.com",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enterprise/administrative-user/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "administrativeUser",
                        "id": "1",
                        "attributes": {
                          "provider": "au.com.sentral.enterprise",
                          "providerId": "04e34506-9262-4edf-a34d-a4b0adbc11a7",
                          "externalId": "8E33AF9B642347AB162536C35DB716E8",
                          "username": null,
                          "guid": null,
                          "title": "Mr.",
                          "firstName": "John",
                          "lastName": "Doe",
                          "email": "john.doe@example.com",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enterprise/administrative-user/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/administrative-user/{id}": {
    "get": {
      "operationId": "getAdministrativeUser",
      "summary": "Get Administrative User",
      "description": "Retrieves a single instance of `administrativeUser`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'administrativeUser' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'administrativeUser' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/administrativeUser"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "administrativeUser",
                      "id": "1",
                      "attributes": {
                        "provider": "au.com.sentral.enterprise",
                        "providerId": "04e34506-9262-4edf-a34d-a4b0adbc11a7",
                        "externalId": "8E33AF9B642347AB162536C35DB716E8",
                        "username": null,
                        "guid": null,
                        "title": "Mr.",
                        "firstName": "John",
                        "lastName": "Doe",
                        "email": "john.doe@example.com",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/enterprise/administrative-user/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/calendar": {
    "get": {
      "operationId": "getCalendars",
      "summary": "Get Calendars",
      "description": "This endpoint is deprecated. Please use endpoints for `userCalendar` (CM-) or `webcalCalendar` (SM-) instead. Retrieves a page of instances of `calendar`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "type",
          "required": true,
          "description": "String Type of the calendars to return \nValue constraints:\nAllowed values: \"CM\", \"SM\"",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'calendar' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/calendar"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "calendar",
                        "id": "CM-1",
                        "attributes": {
                          "calendarName": "John Doe's personal calendar",
                          "externalSource": "com.example.calendars",
                          "externalId": "ec4e0cc6"
                        },
                        "links": {
                          "self": "/v1/enterprise/calendar/CM-1"
                        }
                      },
                      {
                        "type": "calendar",
                        "id": "CM-1",
                        "attributes": {
                          "calendarName": "John Doe's personal calendar",
                          "externalSource": "com.example.calendars",
                          "externalId": "ec4e0cc6"
                        },
                        "links": {
                          "self": "/v1/enterprise/calendar/CM-1"
                        }
                      },
                      {
                        "type": "calendar",
                        "id": "CM-1",
                        "attributes": {
                          "calendarName": "John Doe's personal calendar",
                          "externalSource": "com.example.calendars",
                          "externalId": "ec4e0cc6"
                        },
                        "links": {
                          "self": "/v1/enterprise/calendar/CM-1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/calendar-event": {
    "get": {
      "operationId": "getCalendarEvents",
      "summary": "Get Calendar Events",
      "description": "This endpoint is deprecated. Please use endpoints for `userCalendarEvent` (CM-), `webcalCalendarEvent` (SM-) or `webcalCalendarRecurringEvent` (RG-) instead. Retrieves a page of instances of `calendarEvent`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "type",
          "required": true,
          "description": "String Type of the calendar events to return \nValue constraints:\nAllowed values: \"CM\", \"SM\", \"RG\"",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'calendarEvent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/calendarEvent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "calendarEvent",
                        "id": "CM-1",
                        "attributes": {
                          "typeCode": "CM",
                          "startDate": "2018-04-01",
                          "endDate": "2018-04-01",
                          "startTime": "11:00:00",
                          "endTime": "12:30:00",
                          "title": "Meeting with the principal",
                          "description": "Bring the notes for the class 2C",
                          "externalSource": null,
                          "externalId": null
                        },
                        "links": {
                          "self": "/v1/enterprise/calendar-event/CM-1"
                        }
                      },
                      {
                        "type": "calendarEvent",
                        "id": "CM-1",
                        "attributes": {
                          "typeCode": "CM",
                          "startDate": "2018-04-01",
                          "endDate": "2018-04-01",
                          "startTime": "11:00:00",
                          "endTime": "12:30:00",
                          "title": "Meeting with the principal",
                          "description": "Bring the notes for the class 2C",
                          "externalSource": null,
                          "externalId": null
                        },
                        "links": {
                          "self": "/v1/enterprise/calendar-event/CM-1"
                        }
                      },
                      {
                        "type": "calendarEvent",
                        "id": "CM-1",
                        "attributes": {
                          "typeCode": "CM",
                          "startDate": "2018-04-01",
                          "endDate": "2018-04-01",
                          "startTime": "11:00:00",
                          "endTime": "12:30:00",
                          "title": "Meeting with the principal",
                          "description": "Bring the notes for the class 2C",
                          "externalSource": null,
                          "externalId": null
                        },
                        "links": {
                          "self": "/v1/enterprise/calendar-event/CM-1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/calendar-event/{id}": {
    "get": {
      "operationId": "getCalendarEvent",
      "summary": "Get Calendar Event",
      "description": "This endpoint is deprecated. Please use endpoints for `userCalendarEvent` (CM-), `webcalCalendarEvent` (SM-) or `webcalCalendarRecurringEvent` (RG-) instead. Retrieves a single instance of `calendarEvent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String matching regular expression: ~^(CM|SM|RG)-\\d+$~ ID of the 'calendarEvent' to retrieve [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'calendarEvent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/calendarEvent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "calendarEvent",
                      "id": "CM-1",
                      "attributes": {
                        "typeCode": "CM",
                        "startDate": "2018-04-01",
                        "endDate": "2018-04-01",
                        "startTime": "11:00:00",
                        "endTime": "12:30:00",
                        "title": "Meeting with the principal",
                        "description": "Bring the notes for the class 2C",
                        "externalSource": null,
                        "externalId": null
                      },
                      "links": {
                        "self": "/v1/enterprise/calendar-event/CM-1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/calendar/{id}": {
    "get": {
      "operationId": "getCalendar",
      "summary": "Get Calendar",
      "description": "This endpoint is deprecated. Please use endpoints for `userCalendar` (CM-) or `webcalCalendar` (SM-) instead. Retrieves a single instance of `calendar`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String matching regular expression: ~^(CM|SM)-\\d+$~ ID of the 'calendar' to retrieve [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'calendar' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/calendar"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "calendar",
                      "id": "CM-1",
                      "attributes": {
                        "calendarName": "John Doe's personal calendar",
                        "externalSource": "com.example.calendars",
                        "externalId": "ec4e0cc6"
                      },
                      "links": {
                        "self": "/v1/enterprise/calendar/CM-1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/calendar/{id}/events/{type}": {
    "get": {
      "operationId": "getCalenderEvents",
      "summary": "Get Calender Events",
      "description": "This endpoint is deprecated. Please use endpoints for `userCalendar` (CM-) or `webcalCalendar` (SM-) instead. Retrieves a page of the instances of ``, the relation `events` of `calendarEvent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String matching regular expression: ~^(CM|SM)-\\d+$~ ID of the 'calendarEvent' which relation to retrieve [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "type",
          "required": true,
          "description": "String Type of the events to retrieve. Due to underlying database constraints, calendars of type `CM` support only `CM` events, while `SM` calendar supports both `SM` and `RG`. \nValue constraints:\nAllowed values: \"CM\", \"SM\", \"RG\"",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "fromDate",
          "required": false,
          "description": "Date (Y-m-d, eg. 20190102) Only include events that end after this date. [optional]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "toDate",
          "required": false,
          "description": "Date (Y-m-d, eg. 20190102) Only include events that start before this date. [optional]",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'calendarEvent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/calendarEvent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "calendarEvent",
                        "id": "CM-1",
                        "attributes": {
                          "typeCode": "CM",
                          "startDate": "2018-04-01",
                          "endDate": "2018-04-01",
                          "startTime": "11:00:00",
                          "endTime": "12:30:00",
                          "title": "Meeting with the principal",
                          "description": "Bring the notes for the class 2C",
                          "externalSource": null,
                          "externalId": null
                        },
                        "links": {
                          "self": "/v1/enterprise/calendar-event/CM-1"
                        }
                      },
                      {
                        "type": "calendarEvent",
                        "id": "CM-1",
                        "attributes": {
                          "typeCode": "CM",
                          "startDate": "2018-04-01",
                          "endDate": "2018-04-01",
                          "startTime": "11:00:00",
                          "endTime": "12:30:00",
                          "title": "Meeting with the principal",
                          "description": "Bring the notes for the class 2C",
                          "externalSource": null,
                          "externalId": null
                        },
                        "links": {
                          "self": "/v1/enterprise/calendar-event/CM-1"
                        }
                      },
                      {
                        "type": "calendarEvent",
                        "id": "CM-1",
                        "attributes": {
                          "typeCode": "CM",
                          "startDate": "2018-04-01",
                          "endDate": "2018-04-01",
                          "startTime": "11:00:00",
                          "endTime": "12:30:00",
                          "title": "Meeting with the principal",
                          "description": "Bring the notes for the class 2C",
                          "externalSource": null,
                          "externalId": null
                        },
                        "links": {
                          "self": "/v1/enterprise/calendar-event/CM-1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/enterprise-term": {
    "get": {
      "operationId": "getTermDates",
      "summary": "Get Term Dates",
      "description": "Retrieves a page of instances of `enterpriseTerms`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "years",
          "required": false,
          "description": "String Comma-separated list of years to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "regions",
          "required": false,
          "description": "String Comma-separated list of regions to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'enterpriseTerms' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/enterpriseTerms"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "enterpriseTerms",
                        "id": "1",
                        "attributes": {
                          "region": "vic",
                          "year": "2019",
                          "term": null,
                          "startDate": "2019-01-01",
                          "endDate": "2019-03-31",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enterprise/enterprise-term/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "enterpriseTerms",
                        "id": "1",
                        "attributes": {
                          "region": "vic",
                          "year": "2019",
                          "term": null,
                          "startDate": "2019-01-01",
                          "endDate": "2019-03-31",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enterprise/enterprise-term/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "enterpriseTerms",
                        "id": "1",
                        "attributes": {
                          "region": "vic",
                          "year": "2019",
                          "term": null,
                          "startDate": "2019-01-01",
                          "endDate": "2019-03-31",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enterprise/enterprise-term/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/enterprise-term/{id}": {
    "get": {
      "operationId": "getTermDate",
      "summary": "Get Term Date",
      "description": "Retrieves a single instance of `enterpriseTerms`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'enterpriseTerms' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'enterpriseTerms' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/enterpriseTerms"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "enterpriseTerms",
                      "id": "1",
                      "attributes": {
                        "region": "vic",
                        "year": "2019",
                        "term": null,
                        "startDate": "2019-01-01",
                        "endDate": "2019-03-31",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/enterprise/enterprise-term/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/portal-user": {
    "get": {
      "operationId": "getPortalUsers",
      "summary": "Get Portal Users",
      "description": "Retrieves a page of instances of `portalUser`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'portalUser' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/portalUser"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "portalUser",
                        "id": "1",
                        "attributes": {
                          "provider": "au.com.sentral.enterprise",
                          "providerId": "7a7bcf7ac7dd2009",
                          "username": "janemcdane",
                          "userType": "PARENT",
                          "guid": "07d57697-7439-4441-84f8-1ca16b16eeeb",
                          "title": "Miss",
                          "firstName": "Jane",
                          "surname": "McDane",
                          "email": "jane.mcdane@example.com",
                          "phone": "+48 123 123 123",
                          "address": "Old Street 17, Streetvile",
                          "mobile": "+48 58 642 23 45",
                          "legalFirstName": "Jane",
                          "legalSurname": "McDane",
                          "legalEmail": "jane.mcdane@example.com",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enterprise/portal-user/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "portalUser",
                        "id": "1",
                        "attributes": {
                          "provider": "au.com.sentral.enterprise",
                          "providerId": "7a7bcf7ac7dd2009",
                          "username": "janemcdane",
                          "userType": "PARENT",
                          "guid": "07d57697-7439-4441-84f8-1ca16b16eeeb",
                          "title": "Miss",
                          "firstName": "Jane",
                          "surname": "McDane",
                          "email": "jane.mcdane@example.com",
                          "phone": "+48 123 123 123",
                          "address": "Old Street 17, Streetvile",
                          "mobile": "+48 58 642 23 45",
                          "legalFirstName": "Jane",
                          "legalSurname": "McDane",
                          "legalEmail": "jane.mcdane@example.com",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enterprise/portal-user/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "portalUser",
                        "id": "1",
                        "attributes": {
                          "provider": "au.com.sentral.enterprise",
                          "providerId": "7a7bcf7ac7dd2009",
                          "username": "janemcdane",
                          "userType": "PARENT",
                          "guid": "07d57697-7439-4441-84f8-1ca16b16eeeb",
                          "title": "Miss",
                          "firstName": "Jane",
                          "surname": "McDane",
                          "email": "jane.mcdane@example.com",
                          "phone": "+48 123 123 123",
                          "address": "Old Street 17, Streetvile",
                          "mobile": "+48 58 642 23 45",
                          "legalFirstName": "Jane",
                          "legalSurname": "McDane",
                          "legalEmail": "jane.mcdane@example.com",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enterprise/portal-user/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/portal-user/{id}": {
    "get": {
      "operationId": "getPortalUser",
      "summary": "Get Portal User",
      "description": "Retrieves a single instance of `portalUser`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'portalUser' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'portalUser' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/portalUser"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "portalUser",
                      "id": "1",
                      "attributes": {
                        "provider": "au.com.sentral.enterprise",
                        "providerId": "7a7bcf7ac7dd2009",
                        "username": "janemcdane",
                        "userType": "PARENT",
                        "guid": "07d57697-7439-4441-84f8-1ca16b16eeeb",
                        "title": "Miss",
                        "firstName": "Jane",
                        "surname": "McDane",
                        "email": "jane.mcdane@example.com",
                        "phone": "+48 123 123 123",
                        "address": "Old Street 17, Streetvile",
                        "mobile": "+48 58 642 23 45",
                        "legalFirstName": "Jane",
                        "legalSurname": "McDane",
                        "legalEmail": "jane.mcdane@example.com",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/enterprise/portal-user/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/tenant": {
    "get": {
      "operationId": "getTenants",
      "summary": "Get Tenants",
      "description": "Retrieves all instances of `tenant`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: schools. [optional] [default: null] [example: \"schools\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'tenant' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/tenant"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "tenant",
                        "id": "1",
                        "attributes": {
                          "name": "School 1 Tenant",
                          "code": "a7bd8e",
                          "region": "SA",
                          "key": "14738a",
                          "timezone": "Australia/Sydney",
                          "isActive": true
                        },
                        "relationships": {
                          "schools": {
                            "links": {
                              "related": "/v1/enterprise/tenant/1/schools"
                            }
                          },
                          "termDates": {
                            "links": {
                              "related": "/v1/enterprise/tenant/1/term-dates"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enterprise/tenant/1",
                          "schools": "/v1/enterprise/tenant/1/schools"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "tenant",
                        "id": "1",
                        "attributes": {
                          "name": "School 1 Tenant",
                          "code": "a7bd8e",
                          "region": "SA",
                          "key": "14738a",
                          "timezone": "Australia/Sydney",
                          "isActive": true
                        },
                        "relationships": {
                          "schools": {
                            "links": {
                              "related": "/v1/enterprise/tenant/1/schools"
                            }
                          },
                          "termDates": {
                            "links": {
                              "related": "/v1/enterprise/tenant/1/term-dates"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enterprise/tenant/1",
                          "schools": "/v1/enterprise/tenant/1/schools"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "tenant",
                        "id": "1",
                        "attributes": {
                          "name": "School 1 Tenant",
                          "code": "a7bd8e",
                          "region": "SA",
                          "key": "14738a",
                          "timezone": "Australia/Sydney",
                          "isActive": true
                        },
                        "relationships": {
                          "schools": {
                            "links": {
                              "related": "/v1/enterprise/tenant/1/schools"
                            }
                          },
                          "termDates": {
                            "links": {
                              "related": "/v1/enterprise/tenant/1/term-dates"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enterprise/tenant/1",
                          "schools": "/v1/enterprise/tenant/1/schools"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/tenant/{id}": {
    "get": {
      "operationId": "getTenant",
      "summary": "Get Tenant",
      "description": "Retrieves a single instance of `tenant`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'tenant' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: schools. [optional] [default: null] [example: \"schools\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'tenant' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/tenant"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "tenant",
                      "id": "1",
                      "attributes": {
                        "name": "School 1 Tenant",
                        "code": "a7bd8e",
                        "region": "SA",
                        "key": "14738a",
                        "timezone": "Australia/Sydney",
                        "isActive": true
                      },
                      "relationships": {
                        "schools": {
                          "links": {
                            "related": "/v1/enterprise/tenant/1/schools"
                          }
                        },
                        "termDates": {
                          "links": {
                            "related": "/v1/enterprise/tenant/1/term-dates"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enterprise/tenant/1",
                        "schools": "/v1/enterprise/tenant/1/schools"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/tenant/{id}/schools": {
    "get": {
      "operationId": "getTenantSchools",
      "summary": "Get Tenant Schools",
      "description": "Retrieves all of the instances of ``, the relation `schools` of `school`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'school' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: tenant. [optional] [default: null] [example: \"tenant\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'school' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/school"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "school",
                        "id": "1",
                        "attributes": {
                          "name": "School 1",
                          "schoolCode": "a7bd8e",
                          "sequence": 1,
                          "isActive": true
                        },
                        "relationships": {
                          "tenant": {
                            "data": {
                              "id": "1",
                              "type": "tenant"
                            },
                            "links": {
                              "related": "/v1/enrolments/school/1/tenant"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/school/1",
                          "tenant": "/v1/enrolments/school/1/tenant"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "school",
                        "id": "1",
                        "attributes": {
                          "name": "School 1",
                          "schoolCode": "a7bd8e",
                          "sequence": 1,
                          "isActive": true
                        },
                        "relationships": {
                          "tenant": {
                            "data": {
                              "id": "1",
                              "type": "tenant"
                            },
                            "links": {
                              "related": "/v1/enrolments/school/1/tenant"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/school/1",
                          "tenant": "/v1/enrolments/school/1/tenant"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "school",
                        "id": "1",
                        "attributes": {
                          "name": "School 1",
                          "schoolCode": "a7bd8e",
                          "sequence": 1,
                          "isActive": true
                        },
                        "relationships": {
                          "tenant": {
                            "data": {
                              "id": "1",
                              "type": "tenant"
                            },
                            "links": {
                              "related": "/v1/enrolments/school/1/tenant"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/school/1",
                          "tenant": "/v1/enrolments/school/1/tenant"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/tenant/{id}/term-dates": {
    "get": {
      "operationId": "getTenantTermDates",
      "summary": "Get Tenant Term Dates",
      "description": "Retrieves all of the instances of ``, the relation `termDates` of `enterpriseTerms`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'enterpriseTerms' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'enterpriseTerms' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/enterpriseTerms"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "enterpriseTerms",
                        "id": "1",
                        "attributes": {
                          "region": "vic",
                          "year": "2019",
                          "term": null,
                          "startDate": "2019-01-01",
                          "endDate": "2019-03-31",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enterprise/enterprise-term/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "enterpriseTerms",
                        "id": "1",
                        "attributes": {
                          "region": "vic",
                          "year": "2019",
                          "term": null,
                          "startDate": "2019-01-01",
                          "endDate": "2019-03-31",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enterprise/enterprise-term/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "enterpriseTerms",
                        "id": "1",
                        "attributes": {
                          "region": "vic",
                          "year": "2019",
                          "term": null,
                          "startDate": "2019-01-01",
                          "endDate": "2019-03-31",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/enterprise/enterprise-term/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/user-calendar": {
    "get": {
      "operationId": "getUserCalendars",
      "summary": "Get User Calendars",
      "description": "Retrieves a page of instances of `userCalendar`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "ownerIds",
          "required": false,
          "description": "String Comma-separated list of `owner` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "portalOwnerIds",
          "required": false,
          "description": "String Comma-separated list of `portalOwner` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'userCalendar' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/userCalendar"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "userCalendar",
                        "id": "1",
                        "attributes": {
                          "calendarName": "John Doe's personal calendar",
                          "externalSource": "com.example.calendars",
                          "externalId": "ec4e0cc6",
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enterprise/user-calendar/1"
                        }
                      },
                      {
                        "type": "userCalendar",
                        "id": "1",
                        "attributes": {
                          "calendarName": "John Doe's personal calendar",
                          "externalSource": "com.example.calendars",
                          "externalId": "ec4e0cc6",
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enterprise/user-calendar/1"
                        }
                      },
                      {
                        "type": "userCalendar",
                        "id": "1",
                        "attributes": {
                          "calendarName": "John Doe's personal calendar",
                          "externalSource": "com.example.calendars",
                          "externalId": "ec4e0cc6",
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null
                        },
                        "relationships": {
                          "owner": {
                            "data": {
                              "id": "1",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enterprise/user-calendar/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postUserCalendar",
      "summary": "Post User Calendar",
      "description": "Creates a new userCalendar\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`userCalendar`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `calendarName` → String Display name of the calendar [optional] [example: \"2UMMO\"]\n   * `externalSource` → String External source of the calendar [optional] [example: \"2UMMO\"]\n   * `externalId` → String ID used in the external source [optional] [example: \"2UMMO\"]\n   * `refId` → String Internal identifier used for mapping same models between different modules [optional] [example: \"2UMMO\"]\n * Relationships\n   * `owner` → [required] [single] expected type is `administrativeUser`. User who owns the calendar.\n   * `portalOwner` → [optional] [single] expected type is `portalUser`. Portal user who owns the calendar",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "calendarName": {
                              "type": "string",
                              "description": "String Display name of the calendar [example: \"2UMMO\"]"
                            },
                            "externalSource": {
                              "type": "string",
                              "description": "String External source of the calendar [optional] [example: \"2UMMO\"]"
                            },
                            "externalId": {
                              "type": "string",
                              "description": "String ID used in the external source [optional] [example: \"2UMMO\"]"
                            },
                            "refId": {
                              "type": "string",
                              "description": "String Internal identifier used for mapping same models between different modules [optional] [example: \"2UMMO\"]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "owner": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "portalOwner": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "userCalendar",
                    "attributes": {
                      "calendarName": "2UMMO",
                      "externalSource": "2UMMO",
                      "externalId": "2UMMO",
                      "refId": "2UMMO"
                    },
                    "relationships": {
                      "owner": {
                        "data": {
                          "id": 1,
                          "type": "administrativeUser"
                        }
                      },
                      "portalOwner": {
                        "data": {
                          "id": 1,
                          "type": "portalUser"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'userCalendar' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/userCalendar"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "userCalendar",
                      "id": "1",
                      "attributes": {
                        "calendarName": "John Doe's personal calendar",
                        "externalSource": "com.example.calendars",
                        "externalId": "ec4e0cc6",
                        "refId": null,
                        "createdAt": null,
                        "updatedAt": null
                      },
                      "relationships": {
                        "owner": {
                          "data": {
                            "id": "1",
                            "type": "administrativeUser"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enterprise/user-calendar/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/user-calendar-event": {
    "post": {
      "operationId": "postUserCalendarEvent",
      "summary": "Post User Calendar Event",
      "description": "Creates a new `userCalendarEvent`\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`userCalendarEvent`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `title` → String Event title [optional] [example: \"Biology Teacher Hire\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `description` → String Event description [optional] [example: \"Hiring of a new Biology teacher will be discussed.\"] \nValue constraints:\nLength must be between 0 and 4294967295 characters, inclusive\n   * `recordType` → String Type of the record that this event is related to [optional] [example: \"activities\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `recordSubtype` → String Subtype of the record that event is related to [optional] [example: \"Sport\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `location` → String Where the event takes place [optional] [example: \"2UMMO\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `timezone` → String Timezone of the event [optional] [example: \"Australia/Sydney\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `startsAt` → Date (Y-m-d H:i:s, eg. 20190102) When the event starts [optional] [example: \"2020-02-02 11:00:00\"]\n   * `endsAt` → Date (Y-m-d H:i:s, eg. 20190102) When the event ends [optional] [example: \"2020-02-02 12:30:00\"]\n * Relationships\n   * `userCalendars` → [optional] [collection] expected type is `userCalendar`. Calendars to which this event should be added",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "String Event title [example: \"Biology Teacher Hire\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "description": {
                              "type": "string",
                              "description": "String Event description [example: \"Hiring of a new Biology teacher will be discussed.\"] \nValue constraints:\nLength must be between 0 and 4294967295 characters, inclusive"
                            },
                            "recordType": {
                              "type": "string",
                              "description": "String Type of the record that this event is related to [example: \"activities\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "recordSubtype": {
                              "type": "string",
                              "description": "String Subtype of the record that event is related to [example: \"Sport\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "location": {
                              "type": "string",
                              "description": "String Where the event takes place [example: \"2UMMO\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "timezone": {
                              "type": "string",
                              "description": "String Timezone of the event [example: \"Australia/Sydney\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "startsAt": {
                              "type": "string",
                              "description": "Date (Y-m-d H:i:s, eg. 20190102) When the event starts [example: \"2020-02-02 11:00:00\"]"
                            },
                            "endsAt": {
                              "type": "string",
                              "description": "Date (Y-m-d H:i:s, eg. 20190102) When the event ends [example: \"2020-02-02 12:30:00\"]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "userCalendars": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "userCalendarEvent",
                    "attributes": {
                      "title": "Biology Teacher Hire",
                      "description": "Hiring of a new Biology teacher will be discussed.",
                      "recordType": "activities",
                      "recordSubtype": "Sport",
                      "location": "2UMMO",
                      "timezone": "Australia/Sydney",
                      "startsAt": "2020-02-02 11:00:00",
                      "endsAt": "2020-02-02 12:30:00"
                    },
                    "relationships": {
                      "userCalendars": {
                        "data": [
                          {
                            "id": 1,
                            "type": "userCalendar"
                          },
                          {
                            "id": 2,
                            "type": "userCalendar"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'userCalendarEvent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/userCalendarEvent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "userCalendarEvent",
                      "id": "1",
                      "attributes": {
                        "title": "Meeting with the principal",
                        "description": "Bring the notes for the class 2C",
                        "eventType": null,
                        "recordType": null,
                        "recordSubtype": null,
                        "location": null,
                        "timezone": null,
                        "startsAt": {
                          "timestamp": 1522580400,
                          "iso8601": "2018-04-01T11:00:00+0000"
                        },
                        "endsAt": {
                          "timestamp": 1522585800,
                          "iso8601": "2018-04-01T12:30:00+0000"
                        },
                        "createdAt": null,
                        "updatedAt": null
                      },
                      "links": {
                        "self": "/v1/enterprise/user-calendar-event/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getUserCalendarEvents",
      "summary": "Get User Calendar Events",
      "description": "Retrieves a page of instances of `userCalendarEvent`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "creatorIds",
          "required": false,
          "description": "String Comma-separated list of `creator` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "calendarIds",
          "required": false,
          "description": "String Comma-separated list of `userCalendar` IDs that events belong to, to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'userCalendarEvent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/userCalendarEvent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "userCalendarEvent",
                        "id": "1",
                        "attributes": {
                          "title": "Meeting with the principal",
                          "description": "Bring the notes for the class 2C",
                          "eventType": null,
                          "recordType": null,
                          "recordSubtype": null,
                          "location": null,
                          "timezone": null,
                          "startsAt": {
                            "timestamp": 1522580400,
                            "iso8601": "2018-04-01T11:00:00+0000"
                          },
                          "endsAt": {
                            "timestamp": 1522585800,
                            "iso8601": "2018-04-01T12:30:00+0000"
                          },
                          "createdAt": null,
                          "updatedAt": null
                        },
                        "links": {
                          "self": "/v1/enterprise/user-calendar-event/1"
                        }
                      },
                      {
                        "type": "userCalendarEvent",
                        "id": "1",
                        "attributes": {
                          "title": "Meeting with the principal",
                          "description": "Bring the notes for the class 2C",
                          "eventType": null,
                          "recordType": null,
                          "recordSubtype": null,
                          "location": null,
                          "timezone": null,
                          "startsAt": {
                            "timestamp": 1522580400,
                            "iso8601": "2018-04-01T11:00:00+0000"
                          },
                          "endsAt": {
                            "timestamp": 1522585800,
                            "iso8601": "2018-04-01T12:30:00+0000"
                          },
                          "createdAt": null,
                          "updatedAt": null
                        },
                        "links": {
                          "self": "/v1/enterprise/user-calendar-event/1"
                        }
                      },
                      {
                        "type": "userCalendarEvent",
                        "id": "1",
                        "attributes": {
                          "title": "Meeting with the principal",
                          "description": "Bring the notes for the class 2C",
                          "eventType": null,
                          "recordType": null,
                          "recordSubtype": null,
                          "location": null,
                          "timezone": null,
                          "startsAt": {
                            "timestamp": 1522580400,
                            "iso8601": "2018-04-01T11:00:00+0000"
                          },
                          "endsAt": {
                            "timestamp": 1522585800,
                            "iso8601": "2018-04-01T12:30:00+0000"
                          },
                          "createdAt": null,
                          "updatedAt": null
                        },
                        "links": {
                          "self": "/v1/enterprise/user-calendar-event/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/user-calendar-event/{id}": {
    "delete": {
      "operationId": "deleteUserCalendarEvent",
      "summary": "Delete User Calendar Event",
      "description": "Deletes `userCalendarEvent` by ID",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `userCalendarEvent` to delete. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    },
    "patch": {
      "operationId": "patchUserCalendarEvent",
      "summary": "Patch User Calendar Event",
      "description": "Updates an existing `userCalendarEvent`\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`userCalendarEvent`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `title` → String Event title [optional] [example: \"Biology Teacher Hire\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `description` → String Event description [optional] [example: \"Hiring of a new Biology teacher will be discussed.\"] \nValue constraints:\nLength must be between 0 and 4294967295 characters, inclusive\n   * `recordType` → String Type of the record that this event is related to [optional] [example: \"activities\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `recordSubtype` → String Subtype of the record that event is related to [optional] [example: \"Sport\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `location` → String Where the event takes place [optional] [example: \"2UMMO\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `timezone` → String Timezone of the event [optional] [example: \"Australia/Sydney\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `startsAt` → Date (Y-m-d H:i:s, eg. 20190102) When the event starts [optional] [example: \"2020-02-02 11:00:00\"]\n   * `endsAt` → Date (Y-m-d H:i:s, eg. 20190102) When the event ends [optional] [example: \"2020-02-02 12:30:00\"]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `userCalendarEvent` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "String Event title [optional] [example: \"Biology Teacher Hire\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "description": {
                              "type": "string",
                              "description": "String Event description [optional] [example: \"Hiring of a new Biology teacher will be discussed.\"] \nValue constraints:\nLength must be between 0 and 4294967295 characters, inclusive"
                            },
                            "recordType": {
                              "type": "string",
                              "description": "String Type of the record that this event is related to [optional] [example: \"activities\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "recordSubtype": {
                              "type": "string",
                              "description": "String Subtype of the record that event is related to [optional] [example: \"Sport\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "location": {
                              "type": "string",
                              "description": "String Where the event takes place [optional] [example: \"2UMMO\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "timezone": {
                              "type": "string",
                              "description": "String Timezone of the event [optional] [example: \"Australia/Sydney\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "startsAt": {
                              "type": "string",
                              "description": "Date (Y-m-d H:i:s, eg. 20190102) When the event starts [optional] [example: \"2020-02-02 11:00:00\"]"
                            },
                            "endsAt": {
                              "type": "string",
                              "description": "Date (Y-m-d H:i:s, eg. 20190102) When the event ends [optional] [example: \"2020-02-02 12:30:00\"]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "userCalendarEvent",
                    "id": 1,
                    "attributes": {
                      "title": "Biology Teacher Hire",
                      "description": "Hiring of a new Biology teacher will be discussed.",
                      "recordType": "activities",
                      "recordSubtype": "Sport",
                      "location": "2UMMO",
                      "timezone": "Australia/Sydney",
                      "startsAt": "2020-02-02 11:00:00",
                      "endsAt": "2020-02-02 12:30:00"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'userCalendarEvent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/userCalendarEvent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "userCalendarEvent",
                      "id": "1",
                      "attributes": {
                        "title": "Meeting with the principal",
                        "description": "Bring the notes for the class 2C",
                        "eventType": null,
                        "recordType": null,
                        "recordSubtype": null,
                        "location": null,
                        "timezone": null,
                        "startsAt": {
                          "timestamp": 1522580400,
                          "iso8601": "2018-04-01T11:00:00+0000"
                        },
                        "endsAt": {
                          "timestamp": 1522585800,
                          "iso8601": "2018-04-01T12:30:00+0000"
                        },
                        "createdAt": null,
                        "updatedAt": null
                      },
                      "links": {
                        "self": "/v1/enterprise/user-calendar-event/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getUserCalendarEvent",
      "summary": "Get User Calendar Event",
      "description": "Retrieves a single instance of `userCalendarEvent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'userCalendarEvent' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'userCalendarEvent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/userCalendarEvent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "userCalendarEvent",
                      "id": "1",
                      "attributes": {
                        "title": "Meeting with the principal",
                        "description": "Bring the notes for the class 2C",
                        "eventType": null,
                        "recordType": null,
                        "recordSubtype": null,
                        "location": null,
                        "timezone": null,
                        "startsAt": {
                          "timestamp": 1522580400,
                          "iso8601": "2018-04-01T11:00:00+0000"
                        },
                        "endsAt": {
                          "timestamp": 1522585800,
                          "iso8601": "2018-04-01T12:30:00+0000"
                        },
                        "createdAt": null,
                        "updatedAt": null
                      },
                      "links": {
                        "self": "/v1/enterprise/user-calendar-event/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/user-calendar/{calendarId}/event/{eventId}": {
    "post": {
      "operationId": "postUserCalendarAddEvent",
      "summary": "Post User Calendar Add Event",
      "parameters": [
        {
          "in": "path",
          "name": "calendarId",
          "required": true,
          "description": "Number ID of the `userCalendar` to which the event will be added [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "eventId",
          "required": true,
          "description": "Number ID of the `userCalendarEvent` which will be linked [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response with only metadata.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "description": "Meta fields",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "[Not-null] Always true when operation is successful",
                        "nullable": false
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteUserCalendarRemoveEvent",
      "summary": "Delete User Calendar Remove Event",
      "parameters": [
        {
          "in": "path",
          "name": "calendarId",
          "required": true,
          "description": "Number ID of the `userCalendar` from which the event will be removed [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "eventId",
          "required": true,
          "description": "Number ID of the `userCalendarEvent` which will be unlinked [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response with only metadata.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "description": "Meta fields",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "[Not-null] Always true when operation is successful",
                        "nullable": false
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/enterprise/user-calendar/{id}": {
    "get": {
      "operationId": "getUserCalendar",
      "summary": "Get User Calendar",
      "description": "Retrieves a single instance of `userCalendar`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'userCalendar' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'userCalendar' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/userCalendar"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "userCalendar",
                      "id": "1",
                      "attributes": {
                        "calendarName": "John Doe's personal calendar",
                        "externalSource": "com.example.calendars",
                        "externalId": "ec4e0cc6",
                        "refId": null,
                        "createdAt": null,
                        "updatedAt": null
                      },
                      "relationships": {
                        "owner": {
                          "data": {
                            "id": "1",
                            "type": "administrativeUser"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enterprise/user-calendar/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchUserCalendar",
      "summary": "Patch User Calendar",
      "description": "Updates an existing userCalendar\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`userCalendar`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `calendarName` → String Display name of the calendar [optional] [example: \"2UMMO\"]\n   * `externalSource` → String External source of the calendar [optional] [example: \"2UMMO\"]\n   * `externalId` → String ID used in the external source [optional] [example: \"2UMMO\"]\n   * `refId` → String Internal identifier used for mapping same models between different modules [optional] [example: \"2UMMO\"]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `userCalendar` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "calendarName": {
                              "type": "string",
                              "description": "String Display name of the calendar [optional] [example: \"2UMMO\"]"
                            },
                            "externalSource": {
                              "type": "string",
                              "description": "String External source of the calendar [optional] [example: \"2UMMO\"]"
                            },
                            "externalId": {
                              "type": "string",
                              "description": "String ID used in the external source [optional] [example: \"2UMMO\"]"
                            },
                            "refId": {
                              "type": "string",
                              "description": "String Internal identifier used for mapping same models between different modules [optional] [example: \"2UMMO\"]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "userCalendar",
                    "id": 1,
                    "attributes": {
                      "calendarName": "2UMMO",
                      "externalSource": "2UMMO",
                      "externalId": "2UMMO",
                      "refId": "2UMMO"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'userCalendar' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/userCalendar"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "userCalendar",
                      "id": "1",
                      "attributes": {
                        "calendarName": "John Doe's personal calendar",
                        "externalSource": "com.example.calendars",
                        "externalId": "ec4e0cc6",
                        "refId": null,
                        "createdAt": null,
                        "updatedAt": null
                      },
                      "relationships": {
                        "owner": {
                          "data": {
                            "id": "1",
                            "type": "administrativeUser"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enterprise/user-calendar/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteUserCalendar",
      "summary": "Delete User Calendar",
      "description": "Deletes `userCalendar` by ID",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `userCalendar` to delete. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/fees/debtor": {
    "get": {
      "operationId": "getDebtors",
      "summary": "Get Debtors",
      "description": "Retrieves a page of instances of `debtor`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'debtor' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/debtor"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "debtor",
                        "id": "1",
                        "attributes": {
                          "debtorType": "contact",
                          "billingIdentifier": "2223",
                          "name": "Mr & Ms Smith",
                          "email": "smith.family@example.com",
                          "reference1": null,
                          "reference2": null
                        },
                        "relationships": {
                          "invoices": {
                            "links": {
                              "related": "/v1/fees/debtor/1/invoices"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/debtor/1"
                        }
                      },
                      {
                        "type": "debtor",
                        "id": "1",
                        "attributes": {
                          "debtorType": "contact",
                          "billingIdentifier": "2223",
                          "name": "Mr & Ms Smith",
                          "email": "smith.family@example.com",
                          "reference1": null,
                          "reference2": null
                        },
                        "relationships": {
                          "invoices": {
                            "links": {
                              "related": "/v1/fees/debtor/1/invoices"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/debtor/1"
                        }
                      },
                      {
                        "type": "debtor",
                        "id": "1",
                        "attributes": {
                          "debtorType": "contact",
                          "billingIdentifier": "2223",
                          "name": "Mr & Ms Smith",
                          "email": "smith.family@example.com",
                          "reference1": null,
                          "reference2": null
                        },
                        "relationships": {
                          "invoices": {
                            "links": {
                              "related": "/v1/fees/debtor/1/invoices"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/debtor/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/debtor-status": {
    "get": {
      "operationId": "getDebtorStatuses",
      "summary": "Get Debtor Statuses",
      "description": "Retrieves a page of instances of `debtorStatus`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'debtorStatus' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/debtorStatus"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "debtorStatus",
                        "id": "1",
                        "attributes": {
                          "name": "Current",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/fees/debtor-status/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "debtorStatus",
                        "id": "1",
                        "attributes": {
                          "name": "Current",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/fees/debtor-status/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "debtorStatus",
                        "id": "1",
                        "attributes": {
                          "name": "Current",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/fees/debtor-status/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/debtor-status/{id}": {
    "get": {
      "operationId": "getDebtorStatus",
      "summary": "Get Debtor Status",
      "description": "Retrieves a single instance of `debtorStatus`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'debtorStatus' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'debtorStatus' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/debtorStatus"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "debtorStatus",
                      "id": "1",
                      "attributes": {
                        "name": "Current",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/fees/debtor-status/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/debtor/{id}": {
    "get": {
      "operationId": "getDebtor",
      "summary": "Get Debtor",
      "description": "Retrieves a single instance of `debtor`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'debtor' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'debtor' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/debtor"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "debtor",
                      "id": "1",
                      "attributes": {
                        "debtorType": "contact",
                        "billingIdentifier": "2223",
                        "name": "Mr & Ms Smith",
                        "email": "smith.family@example.com",
                        "reference1": null,
                        "reference2": null
                      },
                      "relationships": {
                        "invoices": {
                          "links": {
                            "related": "/v1/fees/debtor/1/invoices"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/fees/debtor/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/debtor/{id}/invoices": {
    "get": {
      "operationId": "getDebtorInvoices",
      "summary": "Get Debtor Invoices",
      "description": "Retrieves a page of the instances of ``, the relation `invoices` of `invoice`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'invoice' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'invoice' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/invoice"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "invoice",
                        "id": "1",
                        "attributes": {
                          "invoiceNo": "INVTEST_10001",
                          "amountPaid": "20.00",
                          "invoiceDate": "2018-01-01",
                          "dueDate": "2018-02-05",
                          "fullyPaidDate": null
                        },
                        "relationships": {
                          "debtor": {
                            "data": {
                              "id": "2",
                              "type": "debtor"
                            }
                          },
                          "status": {
                            "data": {
                              "id": "3",
                              "type": "feeStatus"
                            }
                          },
                          "items": {
                            "links": {
                              "related": "/v1/fees/invoice/1/items"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/invoice/1"
                        }
                      },
                      {
                        "type": "invoice",
                        "id": "1",
                        "attributes": {
                          "invoiceNo": "INVTEST_10001",
                          "amountPaid": "20.00",
                          "invoiceDate": "2018-01-01",
                          "dueDate": "2018-02-05",
                          "fullyPaidDate": null
                        },
                        "relationships": {
                          "debtor": {
                            "data": {
                              "id": "2",
                              "type": "debtor"
                            }
                          },
                          "status": {
                            "data": {
                              "id": "3",
                              "type": "feeStatus"
                            }
                          },
                          "items": {
                            "links": {
                              "related": "/v1/fees/invoice/1/items"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/invoice/1"
                        }
                      },
                      {
                        "type": "invoice",
                        "id": "1",
                        "attributes": {
                          "invoiceNo": "INVTEST_10001",
                          "amountPaid": "20.00",
                          "invoiceDate": "2018-01-01",
                          "dueDate": "2018-02-05",
                          "fullyPaidDate": null
                        },
                        "relationships": {
                          "debtor": {
                            "data": {
                              "id": "2",
                              "type": "debtor"
                            }
                          },
                          "status": {
                            "data": {
                              "id": "3",
                              "type": "feeStatus"
                            }
                          },
                          "items": {
                            "links": {
                              "related": "/v1/fees/invoice/1/items"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/invoice/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/donor-status": {
    "get": {
      "operationId": "getDonorStatuses",
      "summary": "Get Donor Statuses",
      "description": "Retrieves a page of instances of `donorStatus`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'donorStatus' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/donorStatus"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "donorStatus",
                        "id": "1",
                        "attributes": {
                          "name": "Current",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/fees/donor-status/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "donorStatus",
                        "id": "1",
                        "attributes": {
                          "name": "Current",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/fees/donor-status/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "donorStatus",
                        "id": "1",
                        "attributes": {
                          "name": "Current",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/fees/donor-status/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/donor-status/{id}": {
    "get": {
      "operationId": "getDonorStatus",
      "summary": "Get Donor Status",
      "description": "Retrieves a single instance of `donorStatus`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'donorStatus' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'donorStatus' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/donorStatus"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "donorStatus",
                      "id": "1",
                      "attributes": {
                        "name": "Current",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/fees/donor-status/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/fee-status": {
    "get": {
      "operationId": "getFeeStatuses",
      "summary": "Get Fee Statuses",
      "description": "Retrieves a page of instances of `feeStatus`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "types",
          "required": false,
          "description": "String Comma-separated list of types to filter by. Allowed values are: invoice. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'feeStatus' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/feeStatus"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "feeStatus",
                        "id": "1",
                        "attributes": {
                          "name": "SUBMITTED",
                          "type": "invoice",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/fees/fee-status/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "feeStatus",
                        "id": "1",
                        "attributes": {
                          "name": "SUBMITTED",
                          "type": "invoice",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/fees/fee-status/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "feeStatus",
                        "id": "1",
                        "attributes": {
                          "name": "SUBMITTED",
                          "type": "invoice",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/fees/fee-status/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/fee-status/{id}": {
    "get": {
      "operationId": "getFeeStatus",
      "summary": "Get Fee Status",
      "description": "Retrieves a single instance of `feeStatus`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'feeStatus' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'feeStatus' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/feeStatus"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "feeStatus",
                      "id": "1",
                      "attributes": {
                        "name": "SUBMITTED",
                        "type": "invoice",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/fees/fee-status/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/invoice": {
    "get": {
      "operationId": "getInvoices",
      "summary": "Get Invoices",
      "description": "Retrieves a page of instances of `invoice`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "debtorIds",
          "required": false,
          "description": "String Comma-separated list of debtor IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "statusIds",
          "required": false,
          "description": "String Comma-separated list of status IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'invoice' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/invoice"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "invoice",
                        "id": "1",
                        "attributes": {
                          "invoiceNo": "INVTEST_10001",
                          "amountPaid": "20.00",
                          "invoiceDate": "2018-01-01",
                          "dueDate": "2018-02-05",
                          "fullyPaidDate": null
                        },
                        "relationships": {
                          "debtor": {
                            "data": {
                              "id": "2",
                              "type": "debtor"
                            }
                          },
                          "status": {
                            "data": {
                              "id": "3",
                              "type": "feeStatus"
                            }
                          },
                          "items": {
                            "links": {
                              "related": "/v1/fees/invoice/1/items"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/invoice/1"
                        }
                      },
                      {
                        "type": "invoice",
                        "id": "1",
                        "attributes": {
                          "invoiceNo": "INVTEST_10001",
                          "amountPaid": "20.00",
                          "invoiceDate": "2018-01-01",
                          "dueDate": "2018-02-05",
                          "fullyPaidDate": null
                        },
                        "relationships": {
                          "debtor": {
                            "data": {
                              "id": "2",
                              "type": "debtor"
                            }
                          },
                          "status": {
                            "data": {
                              "id": "3",
                              "type": "feeStatus"
                            }
                          },
                          "items": {
                            "links": {
                              "related": "/v1/fees/invoice/1/items"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/invoice/1"
                        }
                      },
                      {
                        "type": "invoice",
                        "id": "1",
                        "attributes": {
                          "invoiceNo": "INVTEST_10001",
                          "amountPaid": "20.00",
                          "invoiceDate": "2018-01-01",
                          "dueDate": "2018-02-05",
                          "fullyPaidDate": null
                        },
                        "relationships": {
                          "debtor": {
                            "data": {
                              "id": "2",
                              "type": "debtor"
                            }
                          },
                          "status": {
                            "data": {
                              "id": "3",
                              "type": "feeStatus"
                            }
                          },
                          "items": {
                            "links": {
                              "related": "/v1/fees/invoice/1/items"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/invoice/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/invoice-item": {
    "get": {
      "operationId": "getInvoiceItems",
      "summary": "Get Invoice Items",
      "description": "Retrieves a page of instances of `invoiceItem`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "invoiceIds",
          "required": false,
          "description": "String Comma-separated list of invoice IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'invoiceItem' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/invoiceItem"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "invoiceItem",
                        "id": "1",
                        "attributes": {
                          "description": "English textbooks",
                          "quantity": 3,
                          "unitAmount": "16.00",
                          "taxAmount": "4.00",
                          "lineAmount": "60.00",
                          "discount": "0.00"
                        },
                        "relationships": {
                          "invoice": {
                            "data": {
                              "id": "2",
                              "type": "invoice"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/invoice-item/1"
                        }
                      },
                      {
                        "type": "invoiceItem",
                        "id": "1",
                        "attributes": {
                          "description": "English textbooks",
                          "quantity": 3,
                          "unitAmount": "16.00",
                          "taxAmount": "4.00",
                          "lineAmount": "60.00",
                          "discount": "0.00"
                        },
                        "relationships": {
                          "invoice": {
                            "data": {
                              "id": "2",
                              "type": "invoice"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/invoice-item/1"
                        }
                      },
                      {
                        "type": "invoiceItem",
                        "id": "1",
                        "attributes": {
                          "description": "English textbooks",
                          "quantity": 3,
                          "unitAmount": "16.00",
                          "taxAmount": "4.00",
                          "lineAmount": "60.00",
                          "discount": "0.00"
                        },
                        "relationships": {
                          "invoice": {
                            "data": {
                              "id": "2",
                              "type": "invoice"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/invoice-item/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/invoice-item/{id}": {
    "get": {
      "operationId": "getInvoiceItem",
      "summary": "Get Invoice Item",
      "description": "Retrieves a single instance of `invoiceItem`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'invoiceItem' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'invoiceItem' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/invoiceItem"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "invoiceItem",
                      "id": "1",
                      "attributes": {
                        "description": "English textbooks",
                        "quantity": 3,
                        "unitAmount": "16.00",
                        "taxAmount": "4.00",
                        "lineAmount": "60.00",
                        "discount": "0.00"
                      },
                      "relationships": {
                        "invoice": {
                          "data": {
                            "id": "2",
                            "type": "invoice"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/fees/invoice-item/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/invoice/{id}": {
    "get": {
      "operationId": "getInvoice",
      "summary": "Get Invoice",
      "description": "Retrieves a single instance of `invoice`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'invoice' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'invoice' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/invoice"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "invoice",
                      "id": "1",
                      "attributes": {
                        "invoiceNo": "INVTEST_10001",
                        "amountPaid": "20.00",
                        "invoiceDate": "2018-01-01",
                        "dueDate": "2018-02-05",
                        "fullyPaidDate": null
                      },
                      "relationships": {
                        "debtor": {
                          "data": {
                            "id": "2",
                            "type": "debtor"
                          }
                        },
                        "status": {
                          "data": {
                            "id": "3",
                            "type": "feeStatus"
                          }
                        },
                        "items": {
                          "links": {
                            "related": "/v1/fees/invoice/1/items"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/fees/invoice/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/invoice/{id}/items": {
    "get": {
      "operationId": "getInvoiceRelatedItems",
      "summary": "Get Invoice Related Items",
      "description": "Retrieves a page of the instances of ``, the relation `items` of `invoiceItem`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'invoiceItem' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'invoiceItem' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/invoiceItem"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "invoiceItem",
                        "id": "1",
                        "attributes": {
                          "description": "English textbooks",
                          "quantity": 3,
                          "unitAmount": "16.00",
                          "taxAmount": "4.00",
                          "lineAmount": "60.00",
                          "discount": "0.00"
                        },
                        "relationships": {
                          "invoice": {
                            "data": {
                              "id": "2",
                              "type": "invoice"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/invoice-item/1"
                        }
                      },
                      {
                        "type": "invoiceItem",
                        "id": "1",
                        "attributes": {
                          "description": "English textbooks",
                          "quantity": 3,
                          "unitAmount": "16.00",
                          "taxAmount": "4.00",
                          "lineAmount": "60.00",
                          "discount": "0.00"
                        },
                        "relationships": {
                          "invoice": {
                            "data": {
                              "id": "2",
                              "type": "invoice"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/invoice-item/1"
                        }
                      },
                      {
                        "type": "invoiceItem",
                        "id": "1",
                        "attributes": {
                          "description": "English textbooks",
                          "quantity": 3,
                          "unitAmount": "16.00",
                          "taxAmount": "4.00",
                          "lineAmount": "60.00",
                          "discount": "0.00"
                        },
                        "relationships": {
                          "invoice": {
                            "data": {
                              "id": "2",
                              "type": "invoice"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/fees/invoice-item/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/online-bill": {
    "get": {
      "operationId": "getOnlineBills",
      "summary": "Get Online Bills",
      "description": "Retrieves a page of instances of `onlineBill`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'onlineBill' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/onlineBill"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "onlineBill",
                        "id": "1",
                        "attributes": {
                          "billDate": "2018-05-01",
                          "billDueDate": "2018-06-01",
                          "description": "Buying new computer mouse",
                          "unitAmount": 1,
                          "quantity": 1,
                          "taxAmount": 1.2,
                          "discountAmount": 0,
                          "totalAmount": 11.2,
                          "totalAmountDue": 0,
                          "totalAmountPaid": 11.2,
                          "totalAmountCredit": 0,
                          "fullyPaidOn": "2018-05-05",
                          "externalId": "c8938771-54d4-4bec-a062-2a9409cd5d4c",
                          "statusName": "PAID",
                          "isPaid": true,
                          "isVoided": false,
                          "isDeleted": false,
                          "createdAt": {
                            "timestamp": 1525132800,
                            "iso8601": "2018-05-01T00:00:00+0000"
                          },
                          "updatedAt": {
                            "timestamp": 1525132800,
                            "iso8601": "2018-05-01T00:00:00+0000"
                          }
                        },
                        "links": {
                          "self": "/v1/fees/online-bill/1"
                        }
                      },
                      {
                        "type": "onlineBill",
                        "id": "1",
                        "attributes": {
                          "billDate": "2018-05-01",
                          "billDueDate": "2018-06-01",
                          "description": "Buying new computer mouse",
                          "unitAmount": 1,
                          "quantity": 1,
                          "taxAmount": 1.2,
                          "discountAmount": 0,
                          "totalAmount": 11.2,
                          "totalAmountDue": 0,
                          "totalAmountPaid": 11.2,
                          "totalAmountCredit": 0,
                          "fullyPaidOn": "2018-05-05",
                          "externalId": "c8938771-54d4-4bec-a062-2a9409cd5d4c",
                          "statusName": "PAID",
                          "isPaid": true,
                          "isVoided": false,
                          "isDeleted": false,
                          "createdAt": {
                            "timestamp": 1525132800,
                            "iso8601": "2018-05-01T00:00:00+0000"
                          },
                          "updatedAt": {
                            "timestamp": 1525132800,
                            "iso8601": "2018-05-01T00:00:00+0000"
                          }
                        },
                        "links": {
                          "self": "/v1/fees/online-bill/1"
                        }
                      },
                      {
                        "type": "onlineBill",
                        "id": "1",
                        "attributes": {
                          "billDate": "2018-05-01",
                          "billDueDate": "2018-06-01",
                          "description": "Buying new computer mouse",
                          "unitAmount": 1,
                          "quantity": 1,
                          "taxAmount": 1.2,
                          "discountAmount": 0,
                          "totalAmount": 11.2,
                          "totalAmountDue": 0,
                          "totalAmountPaid": 11.2,
                          "totalAmountCredit": 0,
                          "fullyPaidOn": "2018-05-05",
                          "externalId": "c8938771-54d4-4bec-a062-2a9409cd5d4c",
                          "statusName": "PAID",
                          "isPaid": true,
                          "isVoided": false,
                          "isDeleted": false,
                          "createdAt": {
                            "timestamp": 1525132800,
                            "iso8601": "2018-05-01T00:00:00+0000"
                          },
                          "updatedAt": {
                            "timestamp": 1525132800,
                            "iso8601": "2018-05-01T00:00:00+0000"
                          }
                        },
                        "links": {
                          "self": "/v1/fees/online-bill/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/online-bill/{id}": {
    "get": {
      "operationId": "getOnlineBill",
      "summary": "Get Online Bill",
      "description": "Retrieves a single instance of `onlineBill`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'onlineBill' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'onlineBill' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/onlineBill"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "onlineBill",
                      "id": "1",
                      "attributes": {
                        "billDate": "2018-05-01",
                        "billDueDate": "2018-06-01",
                        "description": "Buying new computer mouse",
                        "unitAmount": 1,
                        "quantity": 1,
                        "taxAmount": 1.2,
                        "discountAmount": 0,
                        "totalAmount": 11.2,
                        "totalAmountDue": 0,
                        "totalAmountPaid": 11.2,
                        "totalAmountCredit": 0,
                        "fullyPaidOn": "2018-05-05",
                        "externalId": "c8938771-54d4-4bec-a062-2a9409cd5d4c",
                        "statusName": "PAID",
                        "isPaid": true,
                        "isVoided": false,
                        "isDeleted": false,
                        "createdAt": {
                          "timestamp": 1525132800,
                          "iso8601": "2018-05-01T00:00:00+0000"
                        },
                        "updatedAt": {
                          "timestamp": 1525132800,
                          "iso8601": "2018-05-01T00:00:00+0000"
                        }
                      },
                      "links": {
                        "self": "/v1/fees/online-bill/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/online-payment": {
    "get": {
      "operationId": "getOnlinePayments",
      "summary": "Get Online Payments",
      "description": "Retrieves a page of instances of `onlinePayment`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'onlinePayment' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/onlinePayment"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "onlinePayment",
                        "id": "1",
                        "attributes": {
                          "name": "Payment for computer mouse",
                          "description": "Approved by principal",
                          "date": "2018-05-05",
                          "dueDate": "2018-06-01",
                          "buyerCountry": "Australia",
                          "sellerCountry": "Australia",
                          "paymentMethod": "Credit Card",
                          "currency": "AUD",
                          "amount": 11.2,
                          "totalAmount": 11.2,
                          "totalOutstanding": 0,
                          "buyerFees": 0,
                          "sellerFees": 0,
                          "creditCardFee": 0,
                          "directDebitFee": 0,
                          "paypalFee": 0,
                          "paymentProviderrFee": 0,
                          "refundedAmount": 0,
                          "isReconciled": true,
                          "status": "PAID",
                          "createdAt": {
                            "timestamp": 1525132800,
                            "iso8601": "2018-05-01T00:00:00+0000"
                          },
                          "updatedAt": {
                            "timestamp": 1525132800,
                            "iso8601": "2018-05-01T00:00:00+0000"
                          },
                          "externalSource": null,
                          "externalId": null
                        },
                        "links": {
                          "self": "/v1/fees/online-payment/1"
                        }
                      },
                      {
                        "type": "onlinePayment",
                        "id": "1",
                        "attributes": {
                          "name": "Payment for computer mouse",
                          "description": "Approved by principal",
                          "date": "2018-05-05",
                          "dueDate": "2018-06-01",
                          "buyerCountry": "Australia",
                          "sellerCountry": "Australia",
                          "paymentMethod": "Credit Card",
                          "currency": "AUD",
                          "amount": 11.2,
                          "totalAmount": 11.2,
                          "totalOutstanding": 0,
                          "buyerFees": 0,
                          "sellerFees": 0,
                          "creditCardFee": 0,
                          "directDebitFee": 0,
                          "paypalFee": 0,
                          "paymentProviderrFee": 0,
                          "refundedAmount": 0,
                          "isReconciled": true,
                          "status": "PAID",
                          "createdAt": {
                            "timestamp": 1525132800,
                            "iso8601": "2018-05-01T00:00:00+0000"
                          },
                          "updatedAt": {
                            "timestamp": 1525132800,
                            "iso8601": "2018-05-01T00:00:00+0000"
                          },
                          "externalSource": null,
                          "externalId": null
                        },
                        "links": {
                          "self": "/v1/fees/online-payment/1"
                        }
                      },
                      {
                        "type": "onlinePayment",
                        "id": "1",
                        "attributes": {
                          "name": "Payment for computer mouse",
                          "description": "Approved by principal",
                          "date": "2018-05-05",
                          "dueDate": "2018-06-01",
                          "buyerCountry": "Australia",
                          "sellerCountry": "Australia",
                          "paymentMethod": "Credit Card",
                          "currency": "AUD",
                          "amount": 11.2,
                          "totalAmount": 11.2,
                          "totalOutstanding": 0,
                          "buyerFees": 0,
                          "sellerFees": 0,
                          "creditCardFee": 0,
                          "directDebitFee": 0,
                          "paypalFee": 0,
                          "paymentProviderrFee": 0,
                          "refundedAmount": 0,
                          "isReconciled": true,
                          "status": "PAID",
                          "createdAt": {
                            "timestamp": 1525132800,
                            "iso8601": "2018-05-01T00:00:00+0000"
                          },
                          "updatedAt": {
                            "timestamp": 1525132800,
                            "iso8601": "2018-05-01T00:00:00+0000"
                          },
                          "externalSource": null,
                          "externalId": null
                        },
                        "links": {
                          "self": "/v1/fees/online-payment/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/fees/online-payment/{id}": {
    "get": {
      "operationId": "getOnlinePayment",
      "summary": "Get Online Payment",
      "description": "Retrieves a single instance of `onlinePayment`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'onlinePayment' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'onlinePayment' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/onlinePayment"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "onlinePayment",
                      "id": "1",
                      "attributes": {
                        "name": "Payment for computer mouse",
                        "description": "Approved by principal",
                        "date": "2018-05-05",
                        "dueDate": "2018-06-01",
                        "buyerCountry": "Australia",
                        "sellerCountry": "Australia",
                        "paymentMethod": "Credit Card",
                        "currency": "AUD",
                        "amount": 11.2,
                        "totalAmount": 11.2,
                        "totalOutstanding": 0,
                        "buyerFees": 0,
                        "sellerFees": 0,
                        "creditCardFee": 0,
                        "directDebitFee": 0,
                        "paypalFee": 0,
                        "paymentProviderrFee": 0,
                        "refundedAmount": 0,
                        "isReconciled": true,
                        "status": "PAID",
                        "createdAt": {
                          "timestamp": 1525132800,
                          "iso8601": "2018-05-01T00:00:00+0000"
                        },
                        "updatedAt": {
                          "timestamp": 1525132800,
                          "iso8601": "2018-05-01T00:00:00+0000"
                        },
                        "externalSource": null,
                        "externalId": null
                      },
                      "links": {
                        "self": "/v1/fees/online-payment/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/health/medical-certificate": {
    "get": {
      "operationId": "getMedicalCertificates",
      "summary": "Get Medical Certificates",
      "description": "Retrieves a page of instances of `medicalCertificate`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalCertificate' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalCertificate"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalCertificate",
                        "id": "1",
                        "attributes": {
                          "description": "Flu",
                          "startDate": "2018-04-01",
                          "endDate": "2018-04-10",
                          "source": "health"
                        },
                        "links": {
                          "self": "/v1/health/medical-certificate/1",
                          "student": "/v1/health/medical-certificate/1/student",
                          "attachments": "/v1/health/medical-certificate/1/attachments"
                        }
                      },
                      {
                        "type": "medicalCertificate",
                        "id": "1",
                        "attributes": {
                          "description": "Flu",
                          "startDate": "2018-04-01",
                          "endDate": "2018-04-10",
                          "source": "health"
                        },
                        "links": {
                          "self": "/v1/health/medical-certificate/1",
                          "student": "/v1/health/medical-certificate/1/student",
                          "attachments": "/v1/health/medical-certificate/1/attachments"
                        }
                      },
                      {
                        "type": "medicalCertificate",
                        "id": "1",
                        "attributes": {
                          "description": "Flu",
                          "startDate": "2018-04-01",
                          "endDate": "2018-04-10",
                          "source": "health"
                        },
                        "links": {
                          "self": "/v1/health/medical-certificate/1",
                          "student": "/v1/health/medical-certificate/1/student",
                          "attachments": "/v1/health/medical-certificate/1/attachments"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/health/medical-certificate-attachment/{id}": {
    "get": {
      "operationId": "getMedicalCertificateAttachment",
      "summary": "Get Medical Certificate Attachment",
      "description": "Retrieves a single instance of `medicalCertificateAttachment`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalCertificateAttachment' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalCertificateAttachment' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalCertificateAttachment"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalCertificateAttachment",
                      "id": "1",
                      "attributes": {
                        "size": 262144,
                        "fileName": "DoctorNote.pdf"
                      },
                      "links": {
                        "self": "/v1/health/medical-certificate-attachment/1",
                        "file": "/v1/health/medical-certificate-attachment/1/file",
                        "certificate": "/v1/health/medical-certificate-attachment/1/certificate"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteMedicalCertificateAttachment",
      "summary": "Delete Medical Certificate Attachment",
      "description": "Removes an existing 'medicalStudentAttachment'",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of 'medicalStudentAttachment' to remove. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/health/medical-certificate-attachment/{id}/certificate": {
    "get": {
      "operationId": "getMedicalCertificateAttachmentCertificate",
      "summary": "Get Medical Certificate Attachment Certificate",
      "description": "Retrieves a single instance of ``, the relation `certificate` of `medicalCertificate`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalCertificate' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalCertificate' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalCertificate"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalCertificate",
                      "id": "1",
                      "attributes": {
                        "description": "Flu",
                        "startDate": "2018-04-01",
                        "endDate": "2018-04-10",
                        "source": "health"
                      },
                      "links": {
                        "self": "/v1/health/medical-certificate/1",
                        "student": "/v1/health/medical-certificate/1/student",
                        "attachments": "/v1/health/medical-certificate/1/attachments"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/health/medical-certificate-attachment/{id}/file": {
    "get": {
      "operationId": "getMedicalCertificateAttachmentFile",
      "summary": "Get Medical Certificate Attachment File",
      "description": "Returns the actual file of the given medicalCertificateAttachment",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalCertificateAttachment which file to retrieve",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the attachment requested",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/health/medical-certificate/{id}": {
    "get": {
      "operationId": "getMedicalCertificate",
      "summary": "Get Medical Certificate",
      "description": "Retrieves a single instance of `medicalCertificate`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalCertificate' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalCertificate' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalCertificate"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalCertificate",
                      "id": "1",
                      "attributes": {
                        "description": "Flu",
                        "startDate": "2018-04-01",
                        "endDate": "2018-04-10",
                        "source": "health"
                      },
                      "links": {
                        "self": "/v1/health/medical-certificate/1",
                        "student": "/v1/health/medical-certificate/1/student",
                        "attachments": "/v1/health/medical-certificate/1/attachments"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/health/medical-certificate/{id}/attachments": {
    "get": {
      "operationId": "getMedicalCertificateAttachments",
      "summary": "Get Medical Certificate Attachments",
      "description": "Retrieves all of the instances of ``, the relation `attachments` of `medicalCertificateAttachment`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalCertificateAttachment' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalCertificateAttachment' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalCertificateAttachment"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalCertificateAttachment",
                        "id": "1",
                        "attributes": {
                          "size": 262144,
                          "fileName": "DoctorNote.pdf"
                        },
                        "links": {
                          "self": "/v1/health/medical-certificate-attachment/1",
                          "file": "/v1/health/medical-certificate-attachment/1/file",
                          "certificate": "/v1/health/medical-certificate-attachment/1/certificate"
                        }
                      },
                      {
                        "type": "medicalCertificateAttachment",
                        "id": "1",
                        "attributes": {
                          "size": 262144,
                          "fileName": "DoctorNote.pdf"
                        },
                        "links": {
                          "self": "/v1/health/medical-certificate-attachment/1",
                          "file": "/v1/health/medical-certificate-attachment/1/file",
                          "certificate": "/v1/health/medical-certificate-attachment/1/certificate"
                        }
                      },
                      {
                        "type": "medicalCertificateAttachment",
                        "id": "1",
                        "attributes": {
                          "size": 262144,
                          "fileName": "DoctorNote.pdf"
                        },
                        "links": {
                          "self": "/v1/health/medical-certificate-attachment/1",
                          "file": "/v1/health/medical-certificate-attachment/1/file",
                          "certificate": "/v1/health/medical-certificate-attachment/1/certificate"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalCertificateAttachment",
      "summary": "Post Medical Certificate Attachment",
      "description": "Adds a new 'medicalCertificateAttachment' to a 'medicalCertificate'. The file should be uploaded via 'multipart/form-data' and should be sent under key 'attachment'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalCertificate' to which the attachment should be added. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalCertificateAttachment' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalCertificateAttachment"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalCertificateAttachment",
                      "id": "1",
                      "attributes": {
                        "size": 262144,
                        "fileName": "DoctorNote.pdf"
                      },
                      "links": {
                        "self": "/v1/health/medical-certificate-attachment/1",
                        "file": "/v1/health/medical-certificate-attachment/1/file",
                        "certificate": "/v1/health/medical-certificate-attachment/1/certificate"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/health/medical-certificate/{id}/student": {
    "get": {
      "operationId": "getMedicalCertificateStudent",
      "summary": "Get Medical Certificate Student",
      "description": "Retrieves a single instance of ``, the relation `student` of `student`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'student' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'student' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/student"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "student",
                      "id": "1",
                      "attributes": {
                        "studentCode": null,
                        "barcode": null,
                        "permissionToPhotograph": true,
                        "examNumber": null,
                        "usiId": null,
                        "isEligibleForDiscount": false,
                        "acaraId": null,
                        "systemStudentId": null,
                        "refId": null,
                        "ealStage": null,
                        "ealIsReceivingSupport": null,
                        "ealLastAssessmentAt": null,
                        "isSubjectToCourtOrders": false,
                        "courtOrderInformation": null,
                        "studentFirstLanguage": null,
                        "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                        "languageOtherThanEnglishSpokenAtHome": false,
                        "studentMainlySpeaksEnglishAtHome": false,
                        "loteBackground": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "primaryEnrolment": {
                          "links": {
                            "related": "/v1/enrolments/student/1/primaryEnrolment"
                          }
                        },
                        "person": {
                          "links": {
                            "related": "/v1/enrolments/student/1/person"
                          }
                        },
                        "activities": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activities"
                          }
                        },
                        "activityLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/activity-links"
                          }
                        },
                        "photo": {
                          "links": {
                            "related": "/v1/enrolments/student/1/photo"
                          }
                        },
                        "documents": {
                          "links": {
                            "related": "/v1/enrolments/student/1/documents"
                          }
                        },
                        "tenants": {
                          "links": {
                            "related": "/v1/enrolments/student/1/tenants"
                          }
                        },
                        "flags": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flags"
                          }
                        },
                        "flagLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/flagLinks"
                          }
                        },
                        "awards": {
                          "links": {
                            "related": "/v1/enrolments/student/1/awards"
                          }
                        },
                        "awardLinks": {
                          "links": {
                            "related": "/v1/enrolments/student/1/award-links"
                          }
                        },
                        "households": {
                          "links": {
                            "related": "/v1/enrolments/student/1/households"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/student/1",
                        "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                        "person": "/v1/enrolments/student/1/person",
                        "activities": "/v1/enrolments/student/1/activities",
                        "activityLinks": "/v1/enrolments/student/1/activity-links",
                        "photo": "/v1/enrolments/student/1/photo",
                        "documents": "/v1/enrolments/student/1/documents",
                        "tenants": "/v1/enrolments/student/1/tenants",
                        "flags": "/v1/enrolments/student/1/flags",
                        "flagLinks": "/v1/enrolments/student/1/flag-links"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-booking": {
    "get": {
      "operationId": "getInterviewBookings",
      "summary": "Get Interview Bookings",
      "description": "Retrieves a page of instances of `interviewBooking`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'interviewBooking' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/interviewBooking"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "interviewBooking",
                        "id": "1",
                        "attributes": {
                          "startTime": "15:00:00",
                          "endTime": null,
                          "notes": "May be the other parent",
                          "hasParentAttended": false,
                          "isInterpreterRequired": false,
                          "isBookingConfirmed": false,
                          "parentName": null,
                          "interviewSessionId": 0,
                          "interviewSessionDateId": 15,
                          "interviewClassLinkId": 0
                        },
                        "relationships": {
                          "date": {
                            "data": {
                              "id": "15:00",
                              "type": "interviewSessionDate"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-booking/1"
                        }
                      },
                      {
                        "type": "interviewBooking",
                        "id": "1",
                        "attributes": {
                          "startTime": "15:00:00",
                          "endTime": null,
                          "notes": "May be the other parent",
                          "hasParentAttended": false,
                          "isInterpreterRequired": false,
                          "isBookingConfirmed": false,
                          "parentName": null,
                          "interviewSessionId": 0,
                          "interviewSessionDateId": 15,
                          "interviewClassLinkId": 0
                        },
                        "relationships": {
                          "date": {
                            "data": {
                              "id": "15:00",
                              "type": "interviewSessionDate"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-booking/1"
                        }
                      },
                      {
                        "type": "interviewBooking",
                        "id": "1",
                        "attributes": {
                          "startTime": "15:00:00",
                          "endTime": null,
                          "notes": "May be the other parent",
                          "hasParentAttended": false,
                          "isInterpreterRequired": false,
                          "isBookingConfirmed": false,
                          "parentName": null,
                          "interviewSessionId": 0,
                          "interviewSessionDateId": 15,
                          "interviewClassLinkId": 0
                        },
                        "relationships": {
                          "date": {
                            "data": {
                              "id": "15:00",
                              "type": "interviewSessionDate"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-booking/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-booking/{id}": {
    "get": {
      "operationId": "getInterviewBooking",
      "summary": "Get Interview Booking",
      "description": "Retrieves a single instance of `interviewBooking`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'interviewBooking' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'interviewBooking' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/interviewBooking"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "interviewBooking",
                      "id": "1",
                      "attributes": {
                        "startTime": "15:00:00",
                        "endTime": null,
                        "notes": "May be the other parent",
                        "hasParentAttended": false,
                        "isInterpreterRequired": false,
                        "isBookingConfirmed": false,
                        "parentName": null,
                        "interviewSessionId": 0,
                        "interviewSessionDateId": 15,
                        "interviewClassLinkId": 0
                      },
                      "relationships": {
                        "date": {
                          "data": {
                            "id": "15:00",
                            "type": "interviewSessionDate"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/interviews/interview-booking/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-class-link": {
    "get": {
      "operationId": "getInterviewClassLinks",
      "summary": "Get Interview Class Links",
      "description": "Retrieves a page of instances of `interviewClassLink`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: class, rollclass, teacher. [optional] [default: null] [example: \"class\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'interviewClassLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/interviewClassLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "interviewClassLink",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "type": null
                        },
                        "relationships": {
                          "class": {
                            "data": {
                              "id": "1",
                              "type": "class"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/class"
                            }
                          },
                          "rollclass": {
                            "data": {
                              "id": "1",
                              "type": "rollclass"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/rollclass"
                            }
                          },
                          "teacher": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/teacher"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-class-link/1",
                          "interviewSession": "/v1/interviews/interview-class-link/1/interview-session",
                          "class": "/v1/interviews/interview-class-link/1/class",
                          "rollclass": "/v1/interviews/interview-class-link/1/rollclass",
                          "students": "/v1/interviews/interview-class-link/1/students"
                        }
                      },
                      {
                        "type": "interviewClassLink",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "type": null
                        },
                        "relationships": {
                          "class": {
                            "data": {
                              "id": "1",
                              "type": "class"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/class"
                            }
                          },
                          "rollclass": {
                            "data": {
                              "id": "1",
                              "type": "rollclass"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/rollclass"
                            }
                          },
                          "teacher": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/teacher"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-class-link/1",
                          "interviewSession": "/v1/interviews/interview-class-link/1/interview-session",
                          "class": "/v1/interviews/interview-class-link/1/class",
                          "rollclass": "/v1/interviews/interview-class-link/1/rollclass",
                          "students": "/v1/interviews/interview-class-link/1/students"
                        }
                      },
                      {
                        "type": "interviewClassLink",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "type": null
                        },
                        "relationships": {
                          "class": {
                            "data": {
                              "id": "1",
                              "type": "class"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/class"
                            }
                          },
                          "rollclass": {
                            "data": {
                              "id": "1",
                              "type": "rollclass"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/rollclass"
                            }
                          },
                          "teacher": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/teacher"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-class-link/1",
                          "interviewSession": "/v1/interviews/interview-class-link/1/interview-session",
                          "class": "/v1/interviews/interview-class-link/1/class",
                          "rollclass": "/v1/interviews/interview-class-link/1/rollclass",
                          "students": "/v1/interviews/interview-class-link/1/students"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-class-link/{id}": {
    "get": {
      "operationId": "getInterviewClassLink",
      "summary": "Get Interview Class Link",
      "description": "Retrieves a single instance of `interviewClassLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'interviewClassLink' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: class, rollclass, teacher. [optional] [default: null] [example: \"class\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'interviewClassLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/interviewClassLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "interviewClassLink",
                      "id": "1",
                      "attributes": {
                        "name": null,
                        "type": null
                      },
                      "relationships": {
                        "class": {
                          "data": {
                            "id": "1",
                            "type": "class"
                          },
                          "links": {
                            "related": "/v1/interviews/interview-class-link/1/class"
                          }
                        },
                        "rollclass": {
                          "data": {
                            "id": "1",
                            "type": "rollclass"
                          },
                          "links": {
                            "related": "/v1/interviews/interview-class-link/1/rollclass"
                          }
                        },
                        "teacher": {
                          "data": {
                            "id": "1",
                            "type": "staff"
                          },
                          "links": {
                            "related": "/v1/interviews/interview-class-link/1/teacher"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/interviews/interview-class-link/1",
                        "interviewSession": "/v1/interviews/interview-class-link/1/interview-session",
                        "class": "/v1/interviews/interview-class-link/1/class",
                        "rollclass": "/v1/interviews/interview-class-link/1/rollclass",
                        "students": "/v1/interviews/interview-class-link/1/students"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-class-link/{id}/class": {
    "get": {
      "operationId": "getInterviewClassLinkClass",
      "summary": "Get Interview Class Link Class",
      "description": "Retrieves a single instance of ``, the relation `class` of `class`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'class' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'class' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/class"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "class",
                      "id": "1",
                      "attributes": {
                        "name": "First year class",
                        "identifier": "CLS01A"
                      },
                      "relationships": {
                        "teachers": {
                          "data": [
                            {
                              "id": "1",
                              "type": "staff"
                            },
                            {
                              "id": "2",
                              "type": "staff"
                            },
                            {
                              "id": "3",
                              "type": "staff"
                            }
                          ]
                        },
                        "students": {
                          "links": {
                            "related": "/v1/enrolments/class/1/students"
                          }
                        },
                        "subject": {
                          "data": {
                            "id": "1",
                            "type": "classSubject"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/enrolment/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-class-link/{id}/interview-session": {
    "get": {
      "operationId": "getInterviewClassLinkInterviewSession",
      "summary": "Get Interview Class Link Interview Session",
      "description": "Retrieves a single instance of ``, the relation `interviewSession` of `interviewSession`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'interviewSession' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'interviewSession' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/interviewSession"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "interviewSession",
                      "id": "1",
                      "attributes": {
                        "name": "Year 7 Parent Teacher Night",
                        "event_description": null,
                        "event_location": null,
                        "registrationOpen": {
                          "timestamp": 1547715600,
                          "iso8601": "2019-01-17T09:00:00+0000"
                        },
                        "registrationClose": {
                          "timestamp": 1548342000,
                          "iso8601": "2019-01-24T15:00:00+0000"
                        }
                      },
                      "links": {
                        "self": "/v1/interviews/interview-session/1",
                        "dates": "/v1/interviews/interview-session/1/dates",
                        "classLinks": "/v1/interviews/interview-session/1/class-links",
                        "classes": "/v1/interviews/interview-session/1/classes",
                        "rollclasses": "/v1/interviews/interview-session/1/rollclasses",
                        "students": "/v1/interviews/interview-session/1/students",
                        "bookings": "/v1/interviews/interview-session/1/bookings"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-class-link/{id}/rollclass": {
    "get": {
      "operationId": "getInterviewClassLinkRollclass",
      "summary": "Get Interview Class Link Rollclass",
      "description": "Retrieves a single instance of ``, the relation `rollclass` of `rollclass`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'rollclass' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'rollclass' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/rollclass"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "rollclass",
                      "id": "1",
                      "attributes": {
                        "name": "1A",
                        "isPastoralCare": false,
                        "pastoral_care": false,
                        "refId": null,
                        "createdAt": null,
                        "updatedAt": null,
                        "isActive": true
                      },
                      "relationships": {
                        "teacher": {
                          "data": {
                            "id": "1",
                            "type": "staff"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/enrolments/rollclass/1",
                        "teacher": "/v1/enrolments/staff/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-class-link/{id}/students": {
    "get": {
      "operationId": "getInterviewClassLinkStudents",
      "summary": "Get Interview Class Link Students",
      "description": "Retrieves all of the instances of ``, the relation `students` of `student`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'student' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'student' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/student"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-session": {
    "get": {
      "operationId": "getInterviewSessions",
      "summary": "Get Interview Sessions",
      "description": "Retrieves a page of instances of `interviewSession`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'interviewSession' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/interviewSession"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "interviewSession",
                        "id": "1",
                        "attributes": {
                          "name": "Year 7 Parent Teacher Night",
                          "event_description": null,
                          "event_location": null,
                          "registrationOpen": {
                            "timestamp": 1547715600,
                            "iso8601": "2019-01-17T09:00:00+0000"
                          },
                          "registrationClose": {
                            "timestamp": 1548342000,
                            "iso8601": "2019-01-24T15:00:00+0000"
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-session/1",
                          "dates": "/v1/interviews/interview-session/1/dates",
                          "classLinks": "/v1/interviews/interview-session/1/class-links",
                          "classes": "/v1/interviews/interview-session/1/classes",
                          "rollclasses": "/v1/interviews/interview-session/1/rollclasses",
                          "students": "/v1/interviews/interview-session/1/students",
                          "bookings": "/v1/interviews/interview-session/1/bookings"
                        }
                      },
                      {
                        "type": "interviewSession",
                        "id": "1",
                        "attributes": {
                          "name": "Year 7 Parent Teacher Night",
                          "event_description": null,
                          "event_location": null,
                          "registrationOpen": {
                            "timestamp": 1547715600,
                            "iso8601": "2019-01-17T09:00:00+0000"
                          },
                          "registrationClose": {
                            "timestamp": 1548342000,
                            "iso8601": "2019-01-24T15:00:00+0000"
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-session/1",
                          "dates": "/v1/interviews/interview-session/1/dates",
                          "classLinks": "/v1/interviews/interview-session/1/class-links",
                          "classes": "/v1/interviews/interview-session/1/classes",
                          "rollclasses": "/v1/interviews/interview-session/1/rollclasses",
                          "students": "/v1/interviews/interview-session/1/students",
                          "bookings": "/v1/interviews/interview-session/1/bookings"
                        }
                      },
                      {
                        "type": "interviewSession",
                        "id": "1",
                        "attributes": {
                          "name": "Year 7 Parent Teacher Night",
                          "event_description": null,
                          "event_location": null,
                          "registrationOpen": {
                            "timestamp": 1547715600,
                            "iso8601": "2019-01-17T09:00:00+0000"
                          },
                          "registrationClose": {
                            "timestamp": 1548342000,
                            "iso8601": "2019-01-24T15:00:00+0000"
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-session/1",
                          "dates": "/v1/interviews/interview-session/1/dates",
                          "classLinks": "/v1/interviews/interview-session/1/class-links",
                          "classes": "/v1/interviews/interview-session/1/classes",
                          "rollclasses": "/v1/interviews/interview-session/1/rollclasses",
                          "students": "/v1/interviews/interview-session/1/students",
                          "bookings": "/v1/interviews/interview-session/1/bookings"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-session-date": {
    "get": {
      "operationId": "getInterviewSessionDates",
      "summary": "Get Interview Session Dates",
      "description": "Retrieves a page of instances of `interviewSessionDate`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'interviewSessionDate' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/interviewSessionDate"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "interviewSessionDate",
                        "id": "1",
                        "attributes": {
                          "date": "2018-05-01",
                          "startTime": "15:00:00",
                          "endTime": "18:00:00"
                        },
                        "links": {
                          "self": "/v1/interviews/interview-session-date/1"
                        }
                      },
                      {
                        "type": "interviewSessionDate",
                        "id": "1",
                        "attributes": {
                          "date": "2018-05-01",
                          "startTime": "15:00:00",
                          "endTime": "18:00:00"
                        },
                        "links": {
                          "self": "/v1/interviews/interview-session-date/1"
                        }
                      },
                      {
                        "type": "interviewSessionDate",
                        "id": "1",
                        "attributes": {
                          "date": "2018-05-01",
                          "startTime": "15:00:00",
                          "endTime": "18:00:00"
                        },
                        "links": {
                          "self": "/v1/interviews/interview-session-date/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-session-date/{id}": {
    "get": {
      "operationId": "getInterviewSessionDate",
      "summary": "Get Interview Session Date",
      "description": "Retrieves a single instance of `interviewSessionDate`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'interviewSessionDate' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'interviewSessionDate' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/interviewSessionDate"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "interviewSessionDate",
                      "id": "1",
                      "attributes": {
                        "date": "2018-05-01",
                        "startTime": "15:00:00",
                        "endTime": "18:00:00"
                      },
                      "links": {
                        "self": "/v1/interviews/interview-session-date/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-session/{id}": {
    "get": {
      "operationId": "getInterviewSession",
      "summary": "Get Interview Session",
      "description": "Retrieves a single instance of `interviewSession`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'interviewSession' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'interviewSession' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/interviewSession"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "interviewSession",
                      "id": "1",
                      "attributes": {
                        "name": "Year 7 Parent Teacher Night",
                        "event_description": null,
                        "event_location": null,
                        "registrationOpen": {
                          "timestamp": 1547715600,
                          "iso8601": "2019-01-17T09:00:00+0000"
                        },
                        "registrationClose": {
                          "timestamp": 1548342000,
                          "iso8601": "2019-01-24T15:00:00+0000"
                        }
                      },
                      "links": {
                        "self": "/v1/interviews/interview-session/1",
                        "dates": "/v1/interviews/interview-session/1/dates",
                        "classLinks": "/v1/interviews/interview-session/1/class-links",
                        "classes": "/v1/interviews/interview-session/1/classes",
                        "rollclasses": "/v1/interviews/interview-session/1/rollclasses",
                        "students": "/v1/interviews/interview-session/1/students",
                        "bookings": "/v1/interviews/interview-session/1/bookings"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-session/{id}/bookings": {
    "get": {
      "operationId": "getInterviewSessionInterviewBookings",
      "summary": "Get Interview Session Interview Bookings",
      "description": "Retrieves a page of the instances of ``, the relation `bookings` of `interviewBooking`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'interviewBooking' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'interviewBooking' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/interviewBooking"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "interviewBooking",
                        "id": "1",
                        "attributes": {
                          "startTime": "15:00:00",
                          "endTime": null,
                          "notes": "May be the other parent",
                          "hasParentAttended": false,
                          "isInterpreterRequired": false,
                          "isBookingConfirmed": false,
                          "parentName": null,
                          "interviewSessionId": 0,
                          "interviewSessionDateId": 15,
                          "interviewClassLinkId": 0
                        },
                        "relationships": {
                          "date": {
                            "data": {
                              "id": "15:00",
                              "type": "interviewSessionDate"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-booking/1"
                        }
                      },
                      {
                        "type": "interviewBooking",
                        "id": "1",
                        "attributes": {
                          "startTime": "15:00:00",
                          "endTime": null,
                          "notes": "May be the other parent",
                          "hasParentAttended": false,
                          "isInterpreterRequired": false,
                          "isBookingConfirmed": false,
                          "parentName": null,
                          "interviewSessionId": 0,
                          "interviewSessionDateId": 15,
                          "interviewClassLinkId": 0
                        },
                        "relationships": {
                          "date": {
                            "data": {
                              "id": "15:00",
                              "type": "interviewSessionDate"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-booking/1"
                        }
                      },
                      {
                        "type": "interviewBooking",
                        "id": "1",
                        "attributes": {
                          "startTime": "15:00:00",
                          "endTime": null,
                          "notes": "May be the other parent",
                          "hasParentAttended": false,
                          "isInterpreterRequired": false,
                          "isBookingConfirmed": false,
                          "parentName": null,
                          "interviewSessionId": 0,
                          "interviewSessionDateId": 15,
                          "interviewClassLinkId": 0
                        },
                        "relationships": {
                          "date": {
                            "data": {
                              "id": "15:00",
                              "type": "interviewSessionDate"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-booking/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-session/{id}/class-links": {
    "get": {
      "operationId": "getInterviewSessionInterviewClassLinks",
      "summary": "Get Interview Session Interview Class Links",
      "description": "Retrieves all of the instances of ``, the relation `classLinks` of `interviewClassLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'interviewClassLink' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: class, rollclass, teacher. [optional] [default: null] [example: \"class\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'interviewClassLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/interviewClassLink"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "interviewClassLink",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "type": null
                        },
                        "relationships": {
                          "class": {
                            "data": {
                              "id": "1",
                              "type": "class"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/class"
                            }
                          },
                          "rollclass": {
                            "data": {
                              "id": "1",
                              "type": "rollclass"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/rollclass"
                            }
                          },
                          "teacher": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/teacher"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-class-link/1",
                          "interviewSession": "/v1/interviews/interview-class-link/1/interview-session",
                          "class": "/v1/interviews/interview-class-link/1/class",
                          "rollclass": "/v1/interviews/interview-class-link/1/rollclass",
                          "students": "/v1/interviews/interview-class-link/1/students"
                        }
                      },
                      {
                        "type": "interviewClassLink",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "type": null
                        },
                        "relationships": {
                          "class": {
                            "data": {
                              "id": "1",
                              "type": "class"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/class"
                            }
                          },
                          "rollclass": {
                            "data": {
                              "id": "1",
                              "type": "rollclass"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/rollclass"
                            }
                          },
                          "teacher": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/teacher"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-class-link/1",
                          "interviewSession": "/v1/interviews/interview-class-link/1/interview-session",
                          "class": "/v1/interviews/interview-class-link/1/class",
                          "rollclass": "/v1/interviews/interview-class-link/1/rollclass",
                          "students": "/v1/interviews/interview-class-link/1/students"
                        }
                      },
                      {
                        "type": "interviewClassLink",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "type": null
                        },
                        "relationships": {
                          "class": {
                            "data": {
                              "id": "1",
                              "type": "class"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/class"
                            }
                          },
                          "rollclass": {
                            "data": {
                              "id": "1",
                              "type": "rollclass"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/rollclass"
                            }
                          },
                          "teacher": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            },
                            "links": {
                              "related": "/v1/interviews/interview-class-link/1/teacher"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/interviews/interview-class-link/1",
                          "interviewSession": "/v1/interviews/interview-class-link/1/interview-session",
                          "class": "/v1/interviews/interview-class-link/1/class",
                          "rollclass": "/v1/interviews/interview-class-link/1/rollclass",
                          "students": "/v1/interviews/interview-class-link/1/students"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-session/{id}/classes": {
    "get": {
      "operationId": "getInterviewSessionClasses",
      "summary": "Get Interview Session Classes",
      "description": "Retrieves all of the instances of ``, the relation `classes` of `class`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'class' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'class' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/class"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "class",
                        "id": "1",
                        "attributes": {
                          "name": "First year class",
                          "identifier": "CLS01A"
                        },
                        "relationships": {
                          "teachers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              },
                              {
                                "id": "3",
                                "type": "staff"
                              }
                            ]
                          },
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/class/1/students"
                            }
                          },
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "classSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1"
                        }
                      },
                      {
                        "type": "class",
                        "id": "1",
                        "attributes": {
                          "name": "First year class",
                          "identifier": "CLS01A"
                        },
                        "relationships": {
                          "teachers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              },
                              {
                                "id": "3",
                                "type": "staff"
                              }
                            ]
                          },
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/class/1/students"
                            }
                          },
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "classSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1"
                        }
                      },
                      {
                        "type": "class",
                        "id": "1",
                        "attributes": {
                          "name": "First year class",
                          "identifier": "CLS01A"
                        },
                        "relationships": {
                          "teachers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              },
                              {
                                "id": "3",
                                "type": "staff"
                              }
                            ]
                          },
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/class/1/students"
                            }
                          },
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "classSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-session/{id}/dates": {
    "get": {
      "operationId": "getInterviewSessionInterviewSessionDates",
      "summary": "Get Interview Session Interview Session Dates",
      "description": "Retrieves all of the instances of ``, the relation `dates` of `interviewSessionDate`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'interviewSessionDate' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'interviewSessionDate' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/interviewSessionDate"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "interviewSessionDate",
                        "id": "1",
                        "attributes": {
                          "date": "2018-05-01",
                          "startTime": "15:00:00",
                          "endTime": "18:00:00"
                        },
                        "links": {
                          "self": "/v1/interviews/interview-session-date/1"
                        }
                      },
                      {
                        "type": "interviewSessionDate",
                        "id": "1",
                        "attributes": {
                          "date": "2018-05-01",
                          "startTime": "15:00:00",
                          "endTime": "18:00:00"
                        },
                        "links": {
                          "self": "/v1/interviews/interview-session-date/1"
                        }
                      },
                      {
                        "type": "interviewSessionDate",
                        "id": "1",
                        "attributes": {
                          "date": "2018-05-01",
                          "startTime": "15:00:00",
                          "endTime": "18:00:00"
                        },
                        "links": {
                          "self": "/v1/interviews/interview-session-date/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-session/{id}/rollclasses": {
    "get": {
      "operationId": "getInterviewSessionRollclasses",
      "summary": "Get Interview Session Rollclasses",
      "description": "Retrieves all of the instances of ``, the relation `rollclasses` of `rollclass`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'rollclass' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'rollclass' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/rollclass"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "rollclass",
                        "id": "1",
                        "attributes": {
                          "name": "1A",
                          "isPastoralCare": false,
                          "pastoral_care": false,
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/rollclass/1",
                          "teacher": "/v1/enrolments/staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "rollclass",
                        "id": "1",
                        "attributes": {
                          "name": "1A",
                          "isPastoralCare": false,
                          "pastoral_care": false,
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/rollclass/1",
                          "teacher": "/v1/enrolments/staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "rollclass",
                        "id": "1",
                        "attributes": {
                          "name": "1A",
                          "isPastoralCare": false,
                          "pastoral_care": false,
                          "refId": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/rollclass/1",
                          "teacher": "/v1/enrolments/staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/interviews/interview-session/{id}/students": {
    "get": {
      "operationId": "getInterviewSessionStudents",
      "summary": "Get Interview Session Students",
      "description": "Retrieves a page of the instances of ``, the relation `students` of `student`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'student' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'student' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/student"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/markbook/markbook": {
    "get": {
      "operationId": "getMarkbooks",
      "summary": "Get Markbooks",
      "description": "Retrieves a page of instances of `markbook`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "years",
          "required": false,
          "description": "String Comma-separated list of years to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "categoryIds",
          "required": false,
          "description": "String Comma-separated list of `category` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "createdByIds",
          "required": false,
          "description": "String Comma-separated list of `createdBy` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'markbook' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/markbook"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "markbook",
                        "id": "1",
                        "attributes": {
                          "name": "Faculty categories",
                          "year": null,
                          "description": "",
                          "externalSource": null,
                          "externalId": null
                        },
                        "relationships": {
                          "category": {
                            "data": {
                              "id": "3",
                              "type": "markbookCategory"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "4",
                              "type": "administrativeUser"
                            }
                          },
                          "classes": {
                            "links": {
                              "related": "/v1/markbook/markbook/1/classes"
                            }
                          },
                          "students": {
                            "links": {
                              "related": "/v1/markbook/markbook/1/students"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/markbook/markbook/1"
                        }
                      },
                      {
                        "type": "markbook",
                        "id": "1",
                        "attributes": {
                          "name": "Faculty categories",
                          "year": null,
                          "description": "",
                          "externalSource": null,
                          "externalId": null
                        },
                        "relationships": {
                          "category": {
                            "data": {
                              "id": "3",
                              "type": "markbookCategory"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "4",
                              "type": "administrativeUser"
                            }
                          },
                          "classes": {
                            "links": {
                              "related": "/v1/markbook/markbook/1/classes"
                            }
                          },
                          "students": {
                            "links": {
                              "related": "/v1/markbook/markbook/1/students"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/markbook/markbook/1"
                        }
                      },
                      {
                        "type": "markbook",
                        "id": "1",
                        "attributes": {
                          "name": "Faculty categories",
                          "year": null,
                          "description": "",
                          "externalSource": null,
                          "externalId": null
                        },
                        "relationships": {
                          "category": {
                            "data": {
                              "id": "3",
                              "type": "markbookCategory"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "4",
                              "type": "administrativeUser"
                            }
                          },
                          "classes": {
                            "links": {
                              "related": "/v1/markbook/markbook/1/classes"
                            }
                          },
                          "students": {
                            "links": {
                              "related": "/v1/markbook/markbook/1/students"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/markbook/markbook/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMarkbook",
      "summary": "Post Markbook",
      "description": "Creates a new markbook that can be edited by the API. It auto sets `externalSource` to `REST_API`.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`markbook`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `name` → String Name of the markbook. [example: \"Year 12 Physics 2018\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `year` → Number Year which this markbook covers [example: \"2019\"] \nValue constraints:\nMimimum value: 2021 [inclusive]\n   * `description` → String Additional information about the markbook [example: \"General marks\"] \nValue constraints:\nLength must be between 0 and 65535 characters, inclusive\n   * `externalId` → String ID of this markbook in the external system [optional] [example: \"65283817-1500-47d0-94ce-4c30f3c64692\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n * Relationships\n   * `category` → [required] [single] expected type is `markbookCategory`. \n   * `createdBy` → [required] [single] expected type is `administrativeUser`. ",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "String Name of the markbook. [example: \"Year 12 Physics 2018\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "year": {
                              "type": "number",
                              "description": "Number Year which this markbook covers [example: \"2019\"] \nValue constraints:\nMimimum value: 2021 [inclusive]"
                            },
                            "description": {
                              "type": "string",
                              "description": "String Additional information about the markbook [example: \"General marks\"] \nValue constraints:\nLength must be between 0 and 65535 characters, inclusive"
                            },
                            "externalId": {
                              "type": "string",
                              "description": "String ID of this markbook in the external system [optional] [example: \"65283817-1500-47d0-94ce-4c30f3c64692\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "category": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "createdBy": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "markbook",
                    "attributes": {
                      "name": "Year 12 Physics 2018",
                      "year": "2019",
                      "description": "General marks",
                      "externalId": null
                    },
                    "relationships": {
                      "category": {
                        "data": {
                          "id": 1,
                          "type": "markbookCategory"
                        }
                      },
                      "createdBy": {
                        "data": {
                          "id": 1,
                          "type": "administrativeUser"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'markbook' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/markbook"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "markbook",
                      "id": "1",
                      "attributes": {
                        "name": "Faculty categories",
                        "year": null,
                        "description": "",
                        "externalSource": null,
                        "externalId": null
                      },
                      "relationships": {
                        "category": {
                          "data": {
                            "id": "3",
                            "type": "markbookCategory"
                          }
                        },
                        "createdBy": {
                          "data": {
                            "id": "4",
                            "type": "administrativeUser"
                          }
                        },
                        "classes": {
                          "links": {
                            "related": "/v1/markbook/markbook/1/classes"
                          }
                        },
                        "students": {
                          "links": {
                            "related": "/v1/markbook/markbook/1/students"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/markbook/markbook/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/markbook/markbook-category": {
    "get": {
      "operationId": "getMarkbookCategories",
      "summary": "Get Markbook Categories",
      "description": "Retrieves a page of instances of `markbookCategory`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "types",
          "required": false,
          "description": "String Comma-separated list of types to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "createdByIds",
          "required": false,
          "description": "String Comma-separated list of `createdBy` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'markbookCategory' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/markbookCategory"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "markbookCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Faculty categories",
                          "type": "faculty",
                          "isActive": true
                        },
                        "relationships": {
                          "createdBy": {
                            "data": {
                              "id": "3",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/markbook/markbook-category/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "markbookCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Faculty categories",
                          "type": "faculty",
                          "isActive": true
                        },
                        "relationships": {
                          "createdBy": {
                            "data": {
                              "id": "3",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/markbook/markbook-category/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "markbookCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Faculty categories",
                          "type": "faculty",
                          "isActive": true
                        },
                        "relationships": {
                          "createdBy": {
                            "data": {
                              "id": "3",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/markbook/markbook-category/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/markbook/markbook-category/{id}": {
    "get": {
      "operationId": "getMarkbookCategory",
      "summary": "Get Markbook Category",
      "description": "Retrieves a single instance of `markbookCategory`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'markbookCategory' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'markbookCategory' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/markbookCategory"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "markbookCategory",
                      "id": "1",
                      "attributes": {
                        "name": "Faculty categories",
                        "type": "faculty",
                        "isActive": true
                      },
                      "relationships": {
                        "createdBy": {
                          "data": {
                            "id": "3",
                            "type": "administrativeUser"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/markbook/markbook-category/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/markbook/markbook-column": {
    "get": {
      "operationId": "getMarkbookColumns",
      "summary": "Get Markbook Columns",
      "description": "Retrieves a page of instances of `markbookColumn`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "markbookIds",
          "required": false,
          "description": "String Comma-separated list of `markbook` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'markbookColumn' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/markbookColumn"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "markbookColumn",
                        "id": "1",
                        "attributes": {
                          "name": "Story assignment",
                          "type": "taskMark",
                          "maxMark": 5,
                          "displayPrecision": 0
                        },
                        "relationships": {
                          "markbook": {
                            "data": {
                              "id": "3",
                              "type": "markbook"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/markbook/markbook-column/1"
                        }
                      },
                      {
                        "type": "markbookColumn",
                        "id": "1",
                        "attributes": {
                          "name": "Story assignment",
                          "type": "taskMark",
                          "maxMark": 5,
                          "displayPrecision": 0
                        },
                        "relationships": {
                          "markbook": {
                            "data": {
                              "id": "3",
                              "type": "markbook"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/markbook/markbook-column/1"
                        }
                      },
                      {
                        "type": "markbookColumn",
                        "id": "1",
                        "attributes": {
                          "name": "Story assignment",
                          "type": "taskMark",
                          "maxMark": 5,
                          "displayPrecision": 0
                        },
                        "relationships": {
                          "markbook": {
                            "data": {
                              "id": "3",
                              "type": "markbook"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/markbook/markbook-column/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/markbook/markbook-column-mark/{id}": {
    "get": {
      "operationId": "getMarkbookColumnMark",
      "summary": "Get Markbook Column Mark",
      "description": "Retrieves a single instance of `markbookColumnMark`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "String matching regular expression: ~^\\d+-\\d+$~ ID of the 'markbookColumnMark' to retrieve [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'markbookColumnMark' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/markbookColumnMark"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "markbookColumnMark",
                      "id": "-2",
                      "attributes": {
                        "mark": "17"
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "3",
                            "type": "student"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/markbook/markbook-column-mark/-2"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/markbook/markbook-column/{id}": {
    "get": {
      "operationId": "getMarkbookColumn",
      "summary": "Get Markbook Column",
      "description": "Retrieves a single instance of `markbookColumn`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'markbookColumn' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'markbookColumn' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/markbookColumn"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "markbookColumn",
                      "id": "1",
                      "attributes": {
                        "name": "Story assignment",
                        "type": "taskMark",
                        "maxMark": 5,
                        "displayPrecision": 0
                      },
                      "relationships": {
                        "markbook": {
                          "data": {
                            "id": "3",
                            "type": "markbook"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/markbook/markbook-column/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/markbook/markbook-column/{id}/marks": {
    "get": {
      "operationId": "getMarkbookColumnRelatedMarks",
      "summary": "Get Markbook Column Related Marks",
      "description": "Retrieves all of the instances of ``, the relation `marks` of `markbookColumnMark`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'markbookColumnMark' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'markbookColumnMark' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/markbookColumnMark"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "markbookColumnMark",
                        "id": "-2",
                        "attributes": {
                          "mark": "17"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "3",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/markbook/markbook-column-mark/-2"
                        }
                      },
                      {
                        "type": "markbookColumnMark",
                        "id": "-2",
                        "attributes": {
                          "mark": "17"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "3",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/markbook/markbook-column-mark/-2"
                        }
                      },
                      {
                        "type": "markbookColumnMark",
                        "id": "-2",
                        "attributes": {
                          "mark": "17"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "3",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/markbook/markbook-column-mark/-2"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/markbook/markbook/{id}": {
    "delete": {
      "operationId": "deleteMarkbook",
      "summary": "Delete Markbook",
      "description": "Removes a single instance of `markbook` provided its `externalSource` equals `REST_API`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'markbook*' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response with only metadata.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "description": "Meta fields",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "[Not-null] Always true when operation is successful",
                        "nullable": false
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchMarkbook",
      "summary": "Patch Markbook",
      "description": "Updates an existing marbook",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of `markbook` to modify [example: 7]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'markbook' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/markbook"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "markbook",
                      "id": "1",
                      "attributes": {
                        "name": "Faculty categories",
                        "year": null,
                        "description": "",
                        "externalSource": null,
                        "externalId": null
                      },
                      "relationships": {
                        "category": {
                          "data": {
                            "id": "3",
                            "type": "markbookCategory"
                          }
                        },
                        "createdBy": {
                          "data": {
                            "id": "4",
                            "type": "administrativeUser"
                          }
                        },
                        "classes": {
                          "links": {
                            "related": "/v1/markbook/markbook/1/classes"
                          }
                        },
                        "students": {
                          "links": {
                            "related": "/v1/markbook/markbook/1/students"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/markbook/markbook/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getMarkbook",
      "summary": "Get Markbook",
      "description": "Retrieves a single instance of `markbook`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'markbook' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'markbook' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/markbook"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "markbook",
                      "id": "1",
                      "attributes": {
                        "name": "Faculty categories",
                        "year": null,
                        "description": "",
                        "externalSource": null,
                        "externalId": null
                      },
                      "relationships": {
                        "category": {
                          "data": {
                            "id": "3",
                            "type": "markbookCategory"
                          }
                        },
                        "createdBy": {
                          "data": {
                            "id": "4",
                            "type": "administrativeUser"
                          }
                        },
                        "classes": {
                          "links": {
                            "related": "/v1/markbook/markbook/1/classes"
                          }
                        },
                        "students": {
                          "links": {
                            "related": "/v1/markbook/markbook/1/students"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/markbook/markbook/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/markbook/markbook/{id}/classes": {
    "get": {
      "operationId": "getMarkbookRelatedClasses",
      "summary": "Get Markbook Related Classes",
      "description": "Retrieves a page of the instances of ``, the relation `classes` of `class`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'class' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'class' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/class"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "class",
                        "id": "1",
                        "attributes": {
                          "name": "First year class",
                          "identifier": "CLS01A"
                        },
                        "relationships": {
                          "teachers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              },
                              {
                                "id": "3",
                                "type": "staff"
                              }
                            ]
                          },
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/class/1/students"
                            }
                          },
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "classSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1"
                        }
                      },
                      {
                        "type": "class",
                        "id": "1",
                        "attributes": {
                          "name": "First year class",
                          "identifier": "CLS01A"
                        },
                        "relationships": {
                          "teachers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              },
                              {
                                "id": "3",
                                "type": "staff"
                              }
                            ]
                          },
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/class/1/students"
                            }
                          },
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "classSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1"
                        }
                      },
                      {
                        "type": "class",
                        "id": "1",
                        "attributes": {
                          "name": "First year class",
                          "identifier": "CLS01A"
                        },
                        "relationships": {
                          "teachers": {
                            "data": [
                              {
                                "id": "1",
                                "type": "staff"
                              },
                              {
                                "id": "2",
                                "type": "staff"
                              },
                              {
                                "id": "3",
                                "type": "staff"
                              }
                            ]
                          },
                          "students": {
                            "links": {
                              "related": "/v1/enrolments/class/1/students"
                            }
                          },
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "classSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/enrolment/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/markbook/markbook/{id}/students": {
    "get": {
      "operationId": "getMarkbookRelatedStudents",
      "summary": "Get Markbook Related Students",
      "description": "Retrieves a page of the instances of ``, the relation `students` of `student`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'student' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: primaryEnrolment, person, activities, activityInstances, tenants, flags, flagLinks, contacts, holidays, specialNeedsPrograms, schoolHistory. [optional] [default: null] [example: \"primaryEnrolment\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'student' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/student"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "student",
                        "id": "1",
                        "attributes": {
                          "studentCode": null,
                          "barcode": null,
                          "permissionToPhotograph": true,
                          "examNumber": null,
                          "usiId": null,
                          "isEligibleForDiscount": false,
                          "acaraId": null,
                          "systemStudentId": null,
                          "refId": null,
                          "ealStage": null,
                          "ealIsReceivingSupport": null,
                          "ealLastAssessmentAt": null,
                          "isSubjectToCourtOrders": false,
                          "courtOrderInformation": null,
                          "studentFirstLanguage": null,
                          "indigenousStatus": "Neither Aboriginal nor Torres Strait Islander origin",
                          "languageOtherThanEnglishSpokenAtHome": false,
                          "studentMainlySpeaksEnglishAtHome": false,
                          "loteBackground": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "primaryEnrolment": {
                            "links": {
                              "related": "/v1/enrolments/student/1/primaryEnrolment"
                            }
                          },
                          "person": {
                            "links": {
                              "related": "/v1/enrolments/student/1/person"
                            }
                          },
                          "activities": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activities"
                            }
                          },
                          "activityLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/activity-links"
                            }
                          },
                          "photo": {
                            "links": {
                              "related": "/v1/enrolments/student/1/photo"
                            }
                          },
                          "documents": {
                            "links": {
                              "related": "/v1/enrolments/student/1/documents"
                            }
                          },
                          "tenants": {
                            "links": {
                              "related": "/v1/enrolments/student/1/tenants"
                            }
                          },
                          "flags": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flags"
                            }
                          },
                          "flagLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/flagLinks"
                            }
                          },
                          "awards": {
                            "links": {
                              "related": "/v1/enrolments/student/1/awards"
                            }
                          },
                          "awardLinks": {
                            "links": {
                              "related": "/v1/enrolments/student/1/award-links"
                            }
                          },
                          "households": {
                            "links": {
                              "related": "/v1/enrolments/student/1/households"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/enrolments/student/1",
                          "primaryEnrolment": "/v1/enrolments/student/1/primary-enrolment",
                          "person": "/v1/enrolments/student/1/person",
                          "activities": "/v1/enrolments/student/1/activities",
                          "activityLinks": "/v1/enrolments/student/1/activity-links",
                          "photo": "/v1/enrolments/student/1/photo",
                          "documents": "/v1/enrolments/student/1/documents",
                          "tenants": "/v1/enrolments/student/1/tenants",
                          "flags": "/v1/enrolments/student/1/flags",
                          "flagLinks": "/v1/enrolments/student/1/flag-links"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/messaging/incoming-message": {
    "get": {
      "operationId": "getIncomingMessages",
      "summary": "Get Incoming Messages",
      "description": "Retrieves a page of instances of `incomingMessage`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'incomingMessage' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/incomingMessage"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "incomingMessage",
                        "id": "1",
                        "attributes": {
                          "type": "portal",
                          "message": "Hi! This is an example message!",
                          "isUnsolicited": false
                        },
                        "links": {
                          "self": "/v1/messaging/incoming-message/1"
                        }
                      },
                      {
                        "type": "incomingMessage",
                        "id": "1",
                        "attributes": {
                          "type": "portal",
                          "message": "Hi! This is an example message!",
                          "isUnsolicited": false
                        },
                        "links": {
                          "self": "/v1/messaging/incoming-message/1"
                        }
                      },
                      {
                        "type": "incomingMessage",
                        "id": "1",
                        "attributes": {
                          "type": "portal",
                          "message": "Hi! This is an example message!",
                          "isUnsolicited": false
                        },
                        "links": {
                          "self": "/v1/messaging/incoming-message/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/messaging/incoming-message/{id}": {
    "get": {
      "operationId": "getIncomingMessage",
      "summary": "Get Incoming Message",
      "description": "Retrieves a single instance of `incomingMessage`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'incomingMessage' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'incomingMessage' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/incomingMessage"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "incomingMessage",
                      "id": "1",
                      "attributes": {
                        "type": "portal",
                        "message": "Hi! This is an example message!",
                        "isUnsolicited": false
                      },
                      "links": {
                        "self": "/v1/messaging/incoming-message/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/messaging/outgoing-message": {
    "get": {
      "operationId": "getOutgoingMessages",
      "summary": "Get Outgoing Messages",
      "description": "Retrieves a page of instances of `outgoingMessage`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: recipients. [optional] [default: null] [example: \"recipients\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "subjectPersonIds",
          "required": false,
          "description": "String Comma-separated list of person IDs, filters the messages by `subject` relation through all of the message's `recipients`. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "recipientIds",
          "required": false,
          "description": "String Comma-separated list of person IDs, filters the messages by `recipient` relation through all of the message's `recipients`.. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'outgoingMessage' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/outgoingMessage"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "outgoingMessage",
                        "id": "1",
                        "attributes": {
                          "type": "EMAIL",
                          "subject": null,
                          "content": "content",
                          "timestamp": null
                        },
                        "links": {
                          "self": "/v1/messaging/outgoing-message/1"
                        }
                      },
                      {
                        "type": "outgoingMessage",
                        "id": "1",
                        "attributes": {
                          "type": "EMAIL",
                          "subject": null,
                          "content": "content",
                          "timestamp": null
                        },
                        "links": {
                          "self": "/v1/messaging/outgoing-message/1"
                        }
                      },
                      {
                        "type": "outgoingMessage",
                        "id": "1",
                        "attributes": {
                          "type": "EMAIL",
                          "subject": null,
                          "content": "content",
                          "timestamp": null
                        },
                        "links": {
                          "self": "/v1/messaging/outgoing-message/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/messaging/outgoing-message-recipient": {
    "get": {
      "operationId": "getOutgoingMessageRecipients",
      "summary": "Get Outgoing Message Recipients",
      "description": "Retrieves a page of instances of `outgoingMessageRecipient`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'outgoingMessageRecipient' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/outgoingMessageRecipient"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "outgoingMessageRecipient",
                        "id": "1",
                        "attributes": {
                          "deliveryStatus": "0.0",
                          "deliveryDateTime": {
                            "timestamp": 1517574601,
                            "iso8601": "2018-02-02T12:30:01+0000"
                          },
                          "recipientTitle": "Miss",
                          "recipientFirstName": "Jane",
                          "recipientLastName": "McDoe",
                          "recipientMobilePhone": "n/a",
                          "recipientEmail": "jane.mcdoe@example.com"
                        },
                        "relationships": {
                          "subjectPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "recipient": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/messaging/outgoing-message-recipient/1"
                        }
                      },
                      {
                        "type": "outgoingMessageRecipient",
                        "id": "1",
                        "attributes": {
                          "deliveryStatus": "0.0",
                          "deliveryDateTime": {
                            "timestamp": 1517574601,
                            "iso8601": "2018-02-02T12:30:01+0000"
                          },
                          "recipientTitle": "Miss",
                          "recipientFirstName": "Jane",
                          "recipientLastName": "McDoe",
                          "recipientMobilePhone": "n/a",
                          "recipientEmail": "jane.mcdoe@example.com"
                        },
                        "relationships": {
                          "subjectPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "recipient": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/messaging/outgoing-message-recipient/1"
                        }
                      },
                      {
                        "type": "outgoingMessageRecipient",
                        "id": "1",
                        "attributes": {
                          "deliveryStatus": "0.0",
                          "deliveryDateTime": {
                            "timestamp": 1517574601,
                            "iso8601": "2018-02-02T12:30:01+0000"
                          },
                          "recipientTitle": "Miss",
                          "recipientFirstName": "Jane",
                          "recipientLastName": "McDoe",
                          "recipientMobilePhone": "n/a",
                          "recipientEmail": "jane.mcdoe@example.com"
                        },
                        "relationships": {
                          "subjectPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "recipient": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/messaging/outgoing-message-recipient/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/messaging/outgoing-message-recipient/{id}": {
    "get": {
      "operationId": "getOutgoingMessageRecipient",
      "summary": "Get Outgoing Message Recipient",
      "description": "Retrieves a single instance of `outgoingMessageRecipient`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'outgoingMessageRecipient' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'outgoingMessageRecipient' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/outgoingMessageRecipient"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "outgoingMessageRecipient",
                      "id": "1",
                      "attributes": {
                        "deliveryStatus": "0.0",
                        "deliveryDateTime": {
                          "timestamp": 1517574601,
                          "iso8601": "2018-02-02T12:30:01+0000"
                        },
                        "recipientTitle": "Miss",
                        "recipientFirstName": "Jane",
                        "recipientLastName": "McDoe",
                        "recipientMobilePhone": "n/a",
                        "recipientEmail": "jane.mcdoe@example.com"
                      },
                      "relationships": {
                        "subjectPerson": {
                          "data": {
                            "id": "1",
                            "type": "person"
                          }
                        },
                        "recipient": {
                          "data": {
                            "id": "2",
                            "type": "person"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/messaging/outgoing-message-recipient/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/messaging/outgoing-message/{id}": {
    "get": {
      "operationId": "getOutgoingMessage",
      "summary": "Get Outgoing Message",
      "description": "Retrieves a single instance of `outgoingMessage`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'outgoingMessage' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: recipients. [optional] [default: null] [example: \"recipients\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'outgoingMessage' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/outgoingMessage"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "outgoingMessage",
                      "id": "1",
                      "attributes": {
                        "type": "EMAIL",
                        "subject": null,
                        "content": "content",
                        "timestamp": null
                      },
                      "links": {
                        "self": "/v1/messaging/outgoing-message/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/messaging/outgoing-message/{id}/recipients": {
    "get": {
      "operationId": "getOutgoingMessageRelatedRecipients",
      "summary": "Get Outgoing Message Related Recipients",
      "description": "Retrieves all of the instances of ``, the relation `recipients` of `outgoingMessageRecipient`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'outgoingMessageRecipient' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'outgoingMessageRecipient' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/outgoingMessageRecipient"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "outgoingMessageRecipient",
                        "id": "1",
                        "attributes": {
                          "deliveryStatus": "0.0",
                          "deliveryDateTime": {
                            "timestamp": 1517574601,
                            "iso8601": "2018-02-02T12:30:01+0000"
                          },
                          "recipientTitle": "Miss",
                          "recipientFirstName": "Jane",
                          "recipientLastName": "McDoe",
                          "recipientMobilePhone": "n/a",
                          "recipientEmail": "jane.mcdoe@example.com"
                        },
                        "relationships": {
                          "subjectPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "recipient": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/messaging/outgoing-message-recipient/1"
                        }
                      },
                      {
                        "type": "outgoingMessageRecipient",
                        "id": "1",
                        "attributes": {
                          "deliveryStatus": "0.0",
                          "deliveryDateTime": {
                            "timestamp": 1517574601,
                            "iso8601": "2018-02-02T12:30:01+0000"
                          },
                          "recipientTitle": "Miss",
                          "recipientFirstName": "Jane",
                          "recipientLastName": "McDoe",
                          "recipientMobilePhone": "n/a",
                          "recipientEmail": "jane.mcdoe@example.com"
                        },
                        "relationships": {
                          "subjectPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "recipient": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/messaging/outgoing-message-recipient/1"
                        }
                      },
                      {
                        "type": "outgoingMessageRecipient",
                        "id": "1",
                        "attributes": {
                          "deliveryStatus": "0.0",
                          "deliveryDateTime": {
                            "timestamp": 1517574601,
                            "iso8601": "2018-02-02T12:30:01+0000"
                          },
                          "recipientTitle": "Miss",
                          "recipientFirstName": "Jane",
                          "recipientLastName": "McDoe",
                          "recipientMobilePhone": "n/a",
                          "recipientEmail": "jane.mcdoe@example.com"
                        },
                        "relationships": {
                          "subjectPerson": {
                            "data": {
                              "id": "1",
                              "type": "person"
                            }
                          },
                          "recipient": {
                            "data": {
                              "id": "2",
                              "type": "person"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/messaging/outgoing-message-recipient/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/plans/student-plan": {
    "get": {
      "operationId": "getStudentPlans",
      "summary": "Get Student Plans",
      "description": "Retrieves a page of instances of `studentPlan`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "studentIds",
          "required": false,
          "description": "String Comma-separated list of related `student` IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "createdByIds",
          "required": false,
          "description": "String Comma-separated list of related `createdBy` IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "typeIds",
          "required": false,
          "description": "String Comma-separated list of related `type` IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentPlan' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentPlan"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentPlan",
                        "id": "1",
                        "attributes": {
                          "additionalInformation": "Plan information for Dallas",
                          "comments": "Dallas agrees to work towards plan resolution",
                          "isCompleted": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "3",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/plans/student-plan/1"
                        }
                      },
                      {
                        "type": "studentPlan",
                        "id": "1",
                        "attributes": {
                          "additionalInformation": "Plan information for Dallas",
                          "comments": "Dallas agrees to work towards plan resolution",
                          "isCompleted": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "3",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/plans/student-plan/1"
                        }
                      },
                      {
                        "type": "studentPlan",
                        "id": "1",
                        "attributes": {
                          "additionalInformation": "Plan information for Dallas",
                          "comments": "Dallas agrees to work towards plan resolution",
                          "isCompleted": false
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "3",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/plans/student-plan/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/plans/student-plan-type": {
    "get": {
      "operationId": "getStudentPlanTypes",
      "summary": "Get Student Plan Types",
      "description": "Retrieves a page of instances of `studentPlanType`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentPlanType' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentPlanType"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentPlanType",
                        "id": "1",
                        "attributes": {
                          "displayName": "Risk Management",
                          "isSignatureRequired": false,
                          "isConfidential": false,
                          "showInParentPortal": false,
                          "showInStudentPortal": false,
                          "isHidden": false
                        },
                        "links": {
                          "self": "/v1/plans/student-plan-type/1"
                        }
                      },
                      {
                        "type": "studentPlanType",
                        "id": "1",
                        "attributes": {
                          "displayName": "Risk Management",
                          "isSignatureRequired": false,
                          "isConfidential": false,
                          "showInParentPortal": false,
                          "showInStudentPortal": false,
                          "isHidden": false
                        },
                        "links": {
                          "self": "/v1/plans/student-plan-type/1"
                        }
                      },
                      {
                        "type": "studentPlanType",
                        "id": "1",
                        "attributes": {
                          "displayName": "Risk Management",
                          "isSignatureRequired": false,
                          "isConfidential": false,
                          "showInParentPortal": false,
                          "showInStudentPortal": false,
                          "isHidden": false
                        },
                        "links": {
                          "self": "/v1/plans/student-plan-type/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/plans/student-plan-type/{id}": {
    "get": {
      "operationId": "getStudentPlanType",
      "summary": "Get Student Plan Type",
      "description": "Retrieves a single instance of `studentPlanType`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentPlanType' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentPlanType' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentPlanType"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentPlanType",
                      "id": "1",
                      "attributes": {
                        "displayName": "Risk Management",
                        "isSignatureRequired": false,
                        "isConfidential": false,
                        "showInParentPortal": false,
                        "showInStudentPortal": false,
                        "isHidden": false
                      },
                      "links": {
                        "self": "/v1/plans/student-plan-type/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/plans/student-plan/{id}": {
    "get": {
      "operationId": "getStudentPlan",
      "summary": "Get Student Plan",
      "description": "Retrieves a single instance of `studentPlan`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentPlan' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentPlan' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentPlan"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentPlan",
                      "id": "1",
                      "attributes": {
                        "additionalInformation": "Plan information for Dallas",
                        "comments": "Dallas agrees to work towards plan resolution",
                        "isCompleted": false
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "2",
                            "type": "student"
                          }
                        },
                        "createdBy": {
                          "data": {
                            "id": "3",
                            "type": "administrativeUser"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/plans/student-plan/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/plans/student-plan/{id}/published-file": {
    "get": {
      "operationId": "getStudentPlanPublishedFile",
      "summary": "Get Student Plan Published File",
      "description": "Returns the actual published file of the given student plan. If the plan is not published it throws an error.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `studentPlan` which published file to retrieve",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the report requested",
          "content": {
            "application/pdf": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/activity-response/{id}": {
    "get": {
      "operationId": "getActivityResponse",
      "summary": "Get Activity Response",
      "description": "Retrieves a single instance of `activityResponse`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'activityResponse' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activityResponse' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activityResponse"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activityResponse",
                      "id": "1",
                      "attributes": {
                        "additionalNotes": "Nothing",
                        "medicalDetails": "None",
                        "emergencyContactDetails": "John McDoe, (03) 8070 5665",
                        "consentedAt": null,
                        "consentedBy": "John McDoe",
                        "permissionGiven": "Yes",
                        "isPaid": true
                      },
                      "relationships": {
                        "attendeeStudent": {
                          "data": {
                            "id": "6",
                            "type": "student"
                          }
                        },
                        "coreConsentor": {
                          "data": {
                            "id": "4",
                            "type": "corePerson"
                          }
                        },
                        "enrolmentConsentor": {
                          "data": {
                            "id": "7",
                            "type": "person"
                          }
                        },
                        "activityInstance": {
                          "data": {
                            "id": "5",
                            "type": "activityInstance"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/activity-response/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchActivityResponse",
      "summary": "Patch Activity Response",
      "description": "Updates an existing `activityResponse`.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`activityResponse`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `additionalNotes` → String {DESCRIPTION-MISSING} [example: \"Response was delivered via snail mail\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive\n   * `medicalDetails` → String {DESCRIPTION-MISSING} [example: \"None\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive\n   * `emergencyContactDetails` → String {DESCRIPTION-MISSING} [example: \"Mother, Jane Doe, +48 123-123-123\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive\n   * `consentedBy` → String {DESCRIPTION-MISSING} [example: \"Mother\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive\n   * `permissionGiven` → String {DESCRIPTION-MISSING} [example: \"Yes\"] \nValue constraints:\nAllowed values: \"Unknown\", \"Yes\", \"No\", \"Excluded\"\n   * `isPaid` → Boolean {DESCRIPTION-MISSING} [example: FALSE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `activityResponse` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalNotes": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"Response was delivered via snail mail\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive"
                            },
                            "medicalDetails": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"None\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive"
                            },
                            "emergencyContactDetails": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"Mother, Jane Doe, +48 123-123-123\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive"
                            },
                            "consentedBy": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"Mother\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive"
                            },
                            "permissionGiven": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"Yes\"] \nValue constraints:\nAllowed values: \"Unknown\", \"Yes\", \"No\", \"Excluded\""
                            },
                            "isPaid": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: FALSE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "activityResponse",
                    "id": 1,
                    "attributes": {
                      "additionalNotes": "Response was delivered via snail mail",
                      "medicalDetails": "None",
                      "emergencyContactDetails": "Mother, Jane Doe, +48 123-123-123",
                      "consentedBy": "Mother",
                      "permissionGiven": "Yes",
                      "isPaid": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'activityResponse' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/activityResponse"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "activityResponse",
                      "id": "1",
                      "attributes": {
                        "additionalNotes": "Nothing",
                        "medicalDetails": "None",
                        "emergencyContactDetails": "John McDoe, (03) 8070 5665",
                        "consentedAt": null,
                        "consentedBy": "John McDoe",
                        "permissionGiven": "Yes",
                        "isPaid": true
                      },
                      "relationships": {
                        "attendeeStudent": {
                          "data": {
                            "id": "6",
                            "type": "student"
                          }
                        },
                        "coreConsentor": {
                          "data": {
                            "id": "4",
                            "type": "corePerson"
                          }
                        },
                        "enrolmentConsentor": {
                          "data": {
                            "id": "7",
                            "type": "person"
                          }
                        },
                        "activityInstance": {
                          "data": {
                            "id": "5",
                            "type": "activityInstance"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/activity-response/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteActivityResponse",
      "summary": "Delete Activity Response",
      "description": "Deletes an existing 'activityResponse'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `activityResponse` that should be deleted. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/portal/family-change-request": {
    "get": {
      "operationId": "getFamilyChangeRequests",
      "summary": "Get Family Change Requests",
      "description": "Retrieves a page of instances of `familyChangeRequest`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "externalIds",
          "required": false,
          "description": "String Comma-separated list of externalIds to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "affectedStudentIds",
          "required": false,
          "description": "String Comma-separated list of related `affectedStudent` IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'familyChangeRequest' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/familyChangeRequest"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "familyChangeRequest",
                        "id": "1",
                        "attributes": {
                          "externalId": null,
                          "isPending": true,
                          "isCompleted": false,
                          "isRejected": false,
                          "dateActioned": null
                        },
                        "relationships": {
                          "affectedStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/family-change-request/1",
                          "details": "/v1/portal/family-change-request/1/detail"
                        }
                      },
                      {
                        "type": "familyChangeRequest",
                        "id": "1",
                        "attributes": {
                          "externalId": null,
                          "isPending": true,
                          "isCompleted": false,
                          "isRejected": false,
                          "dateActioned": null
                        },
                        "relationships": {
                          "affectedStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/family-change-request/1",
                          "details": "/v1/portal/family-change-request/1/detail"
                        }
                      },
                      {
                        "type": "familyChangeRequest",
                        "id": "1",
                        "attributes": {
                          "externalId": null,
                          "isPending": true,
                          "isCompleted": false,
                          "isRejected": false,
                          "dateActioned": null
                        },
                        "relationships": {
                          "affectedStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/family-change-request/1",
                          "details": "/v1/portal/family-change-request/1/detail"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postFamilyChangeRequest",
      "summary": "Post Family Change Request",
      "description": "Adds a new 'familyChangeRequest' with optional additional details\n\nPayload has the following requirements:\n * Expects a non-empty collection.\n\nAnd supports these models:\n\n`familyChangeRequest`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `externalId` → String ID of this model in an external system [optional] [example: \"7b5d6a86-6e8d-4eec-80cb-1e22765d617f\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n * Relationships\n   * `affectedStudent` → [required] [single] expected type is `student`. \n\n`familyChangeRequestDetail`\n * Must not have ID\n * Between 0 and 99 instances\n * Attributes\n   * `objectType` → String Type of the object to be created/modified/deleted. [example: \"CONTACT\"] \nValue constraints:\nAllowed values: \"FAMILY\", \"STUDENT\", \"USER\", \"CONTACT\", \"HOUSEHOLD\", \"STUDENT_CONTACT_RELATIONSHIP\", \"EMERGENCY_CONTACT_ORDER\"\n   * `objectId` → String matching regular expression: ~^(?:[1-9]\\d*|new_\\d+)$~ ID of the modified/deleted object or `new_<number>` for creating new models [example: \"1\"]\n   * `subObjectType` → String Type of the related object to be created/modified/deleted. [optional] [default: null] [example: \"HOUSEHOLD_ADDRESS\"] \nValue constraints:\nAllowed values: \"HOUSEHOLD_ADDRESS\", \"CONTACT_PHONE\", \"CONTACT_EMAIL\"\n   * `subObjectId` → String matching regular expression: ~^(?:[1-9]\\d*|new_\\d+)$~ ID of the modified/deleted related object or `new_<number>` for creating new related model [optional] [default: null] [example: \"1\"]\n   * `field` → String Name of the field that should be changed [example: \"email_address\"]\n   * `isDeleteOperation` → Boolean Name of the field that should be changed [optional] [default: false] [example: \"email_address\"]\n   * `value` → String New value for the field [optional] [example: \"new.parents.email@example.com\"]\n * No relationships",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "externalId": {
                              "type": "string",
                              "description": "String ID of this model in an external system [optional] [example: \"7b5d6a86-6e8d-4eec-80cb-1e22765d617f\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "affectedStudent": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "objectType": {
                              "type": "string",
                              "description": "String Type of the object to be created/modified/deleted. [example: \"CONTACT\"] \nValue constraints:\nAllowed values: \"FAMILY\", \"STUDENT\", \"USER\", \"CONTACT\", \"HOUSEHOLD\", \"STUDENT_CONTACT_RELATIONSHIP\", \"EMERGENCY_CONTACT_ORDER\""
                            },
                            "objectId": {
                              "type": "string",
                              "description": "String matching regular expression: ~^(?:[1-9]\\d*|new_\\d+)$~ ID of the modified/deleted object or `new_<number>` for creating new models [example: \"1\"]"
                            },
                            "subObjectType": {
                              "type": "string",
                              "description": "String Type of the related object to be created/modified/deleted. [optional] [default: null] [example: \"HOUSEHOLD_ADDRESS\"] \nValue constraints:\nAllowed values: \"HOUSEHOLD_ADDRESS\", \"CONTACT_PHONE\", \"CONTACT_EMAIL\""
                            },
                            "subObjectId": {
                              "type": "string",
                              "description": "String matching regular expression: ~^(?:[1-9]\\d*|new_\\d+)$~ ID of the modified/deleted related object or `new_<number>` for creating new related model [optional] [default: null] [example: \"1\"]"
                            },
                            "field": {
                              "type": "string",
                              "description": "String Name of the field that should be changed [example: \"email_address\"]"
                            },
                            "isDeleteOperation": {
                              "type": "boolean",
                              "description": "Boolean Name of the field that should be changed [optional] [default: false] [example: \"email_address\"]"
                            },
                            "value": {
                              "type": "string",
                              "description": "String New value for the field [example: \"new.parents.email@example.com\"]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": [
                    {
                      "type": "familyChangeRequest",
                      "attributes": {
                        "externalId": "7b5d6a86-6e8d-4eec-80cb-1e22765d617f"
                      },
                      "relationships": {
                        "affectedStudent": {
                          "data": {
                            "id": 1,
                            "type": "student"
                          }
                        }
                      }
                    },
                    {
                      "type": "familyChangeRequestDetail",
                      "attributes": {
                        "objectType": "CONTACT",
                        "objectId": "1",
                        "subObjectType": "HOUSEHOLD_ADDRESS",
                        "subObjectId": "1",
                        "field": "email_address",
                        "isDeleteOperation": "email_address",
                        "value": "new.parents.email@example.com"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: familyChangeRequest, familyChangeRequestDetail.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/familyChangeRequest"
                        },
                        {
                          "$ref": "#/components/schemas/familyChangeRequestDetail"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "familyChangeRequest",
                        "id": "1",
                        "attributes": {
                          "externalId": null,
                          "isPending": true,
                          "isCompleted": false,
                          "isRejected": false,
                          "dateActioned": null
                        },
                        "relationships": {
                          "affectedStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/family-change-request/1",
                          "details": "/v1/portal/family-change-request/1/detail"
                        }
                      },
                      {
                        "type": "familyChangeRequestDetail",
                        "id": "1",
                        "attributes": {
                          "objectType": "FAMILY",
                          "objectId": 1,
                          "subObjectType": "FAMILY",
                          "subObjectId": 1,
                          "field": "email",
                          "value": "new.email@example.com",
                          "isDeleteOperation": false
                        },
                        "links": {
                          "self": "/v1/portal/family-change-request/1/detail/1",
                          "familyChangeRequest": "/v1/portal/family-change-request/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/family-change-request/{id}": {
    "get": {
      "operationId": "getFamilyChangeRequest",
      "summary": "Get Family Change Request",
      "description": "Retrieves a single instance of `familyChangeRequest`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'familyChangeRequest' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'familyChangeRequest' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/familyChangeRequest"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "familyChangeRequest",
                      "id": "1",
                      "attributes": {
                        "externalId": null,
                        "isPending": true,
                        "isCompleted": false,
                        "isRejected": false,
                        "dateActioned": null
                      },
                      "relationships": {
                        "affectedStudent": {
                          "data": {
                            "id": "2",
                            "type": "student"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/family-change-request/1",
                        "details": "/v1/portal/family-change-request/1/detail"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteFamilyChangeRequest",
      "summary": "Delete Family Change Request",
      "description": "Deletes an existing, incomplete 'familyChangeRequest'",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'familyChangeRequest' which should be deleted. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/portal/family-change-request/{id}/detail": {
    "post": {
      "operationId": "postFamilyChangeRequestDetail",
      "summary": "Post Family Change Request Detail",
      "description": "Adds a new detail to the 'familyChangeRequest'\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`familyChangeRequestDetail`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `objectType` → String Type of the object to be created/modified/deleted. [example: \"CONTACT\"] \nValue constraints:\nAllowed values: \"FAMILY\", \"STUDENT\", \"USER\", \"CONTACT\", \"HOUSEHOLD\", \"STUDENT_CONTACT_RELATIONSHIP\", \"EMERGENCY_CONTACT_ORDER\"\n   * `objectId` → String matching regular expression: ~^(?:[1-9]\\d*|new_\\d+)$~ ID of the modified/deleted object or `new_<number>` for creating new models [example: \"1\"]\n   * `subObjectType` → String Type of the related object to be created/modified/deleted. [optional] [default: null] [example: \"HOUSEHOLD_ADDRESS\"] \nValue constraints:\nAllowed values: \"HOUSEHOLD_ADDRESS\", \"CONTACT_PHONE\", \"CONTACT_EMAIL\"\n   * `subObjectId` → String matching regular expression: ~^(?:[1-9]\\d*|new_\\d+)$~ ID of the modified/deleted related object or `new_<number>` for creating new related model [optional] [default: null] [example: \"1\"]\n   * `field` → String Name of the field that should be changed [example: \"email_address\"]\n   * `isDeleteOperation` → Boolean Name of the field that should be changed [optional] [default: false] [example: \"email_address\"]\n   * `value` → String New value for the field [optional] [example: \"new.parents.email@example.com\"]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'familyChangeRequest' to which a detail should be added. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "objectType": {
                              "type": "string",
                              "description": "String Type of the object to be created/modified/deleted. [example: \"CONTACT\"] \nValue constraints:\nAllowed values: \"FAMILY\", \"STUDENT\", \"USER\", \"CONTACT\", \"HOUSEHOLD\", \"STUDENT_CONTACT_RELATIONSHIP\", \"EMERGENCY_CONTACT_ORDER\""
                            },
                            "objectId": {
                              "type": "string",
                              "description": "String matching regular expression: ~^(?:[1-9]\\d*|new_\\d+)$~ ID of the modified/deleted object or `new_<number>` for creating new models [example: \"1\"]"
                            },
                            "subObjectType": {
                              "type": "string",
                              "description": "String Type of the related object to be created/modified/deleted. [optional] [default: null] [example: \"HOUSEHOLD_ADDRESS\"] \nValue constraints:\nAllowed values: \"HOUSEHOLD_ADDRESS\", \"CONTACT_PHONE\", \"CONTACT_EMAIL\""
                            },
                            "subObjectId": {
                              "type": "string",
                              "description": "String matching regular expression: ~^(?:[1-9]\\d*|new_\\d+)$~ ID of the modified/deleted related object or `new_<number>` for creating new related model [optional] [default: null] [example: \"1\"]"
                            },
                            "field": {
                              "type": "string",
                              "description": "String Name of the field that should be changed [example: \"email_address\"]"
                            },
                            "isDeleteOperation": {
                              "type": "boolean",
                              "description": "Boolean Name of the field that should be changed [optional] [default: false] [example: \"email_address\"]"
                            },
                            "value": {
                              "type": "string",
                              "description": "String New value for the field [example: \"new.parents.email@example.com\"]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "familyChangeRequestDetail",
                    "attributes": {
                      "objectType": "CONTACT",
                      "objectId": "1",
                      "subObjectType": "HOUSEHOLD_ADDRESS",
                      "subObjectId": "1",
                      "field": "email_address",
                      "isDeleteOperation": "email_address",
                      "value": "new.parents.email@example.com"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'familyChangeRequestDetail' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/familyChangeRequestDetail"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "familyChangeRequestDetail",
                      "id": "1",
                      "attributes": {
                        "objectType": "FAMILY",
                        "objectId": 1,
                        "subObjectType": "FAMILY",
                        "subObjectId": 1,
                        "field": "email",
                        "value": "new.email@example.com",
                        "isDeleteOperation": false
                      },
                      "links": {
                        "self": "/v1/portal/family-change-request/1/detail/1",
                        "familyChangeRequest": "/v1/portal/family-change-request/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getFamilyChangeRequestDetails",
      "summary": "Get Family Change Request Details",
      "description": "Retrieves all of the instances of ``, the relation `details` of `familyChangeRequestDetail`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'familyChangeRequestDetail' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'familyChangeRequestDetail' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/familyChangeRequestDetail"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "familyChangeRequestDetail",
                        "id": "1",
                        "attributes": {
                          "objectType": "FAMILY",
                          "objectId": 1,
                          "subObjectType": "FAMILY",
                          "subObjectId": 1,
                          "field": "email",
                          "value": "new.email@example.com",
                          "isDeleteOperation": false
                        },
                        "links": {
                          "self": "/v1/portal/family-change-request/1/detail/1",
                          "familyChangeRequest": "/v1/portal/family-change-request/1"
                        }
                      },
                      {
                        "type": "familyChangeRequestDetail",
                        "id": "1",
                        "attributes": {
                          "objectType": "FAMILY",
                          "objectId": 1,
                          "subObjectType": "FAMILY",
                          "subObjectId": 1,
                          "field": "email",
                          "value": "new.email@example.com",
                          "isDeleteOperation": false
                        },
                        "links": {
                          "self": "/v1/portal/family-change-request/1/detail/1",
                          "familyChangeRequest": "/v1/portal/family-change-request/1"
                        }
                      },
                      {
                        "type": "familyChangeRequestDetail",
                        "id": "1",
                        "attributes": {
                          "objectType": "FAMILY",
                          "objectId": 1,
                          "subObjectType": "FAMILY",
                          "subObjectId": 1,
                          "field": "email",
                          "value": "new.email@example.com",
                          "isDeleteOperation": false
                        },
                        "links": {
                          "self": "/v1/portal/family-change-request/1/detail/1",
                          "familyChangeRequest": "/v1/portal/family-change-request/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/family-change-request/{id}/detail/{detailId}": {
    "get": {
      "operationId": "getFamilyChangeRequestDetail",
      "summary": "Get Family Change Request Detail",
      "description": "Retrieves a single instances of familyChangeRequestDetail based on the specified ID.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'familyChangeRequest' of which detail should be retrieved. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "detailId",
          "required": true,
          "description": "Number ID of the 'familyChangeRequestDetail' to get. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'familyChangeRequestDetail' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/familyChangeRequestDetail"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "familyChangeRequestDetail",
                      "id": "1",
                      "attributes": {
                        "objectType": "FAMILY",
                        "objectId": 1,
                        "subObjectType": "FAMILY",
                        "subObjectId": 1,
                        "field": "email",
                        "value": "new.email@example.com",
                        "isDeleteOperation": false
                      },
                      "links": {
                        "self": "/v1/portal/family-change-request/1/detail/1",
                        "familyChangeRequest": "/v1/portal/family-change-request/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchFamilyChangeRequestDetail",
      "summary": "Patch Family Change Request Detail",
      "description": "Adds a new detail to the 'familyChangeRequest'\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`familyChangeRequestDetail`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `value` → String New value for the field [optional] [example: \"new.parents.email@example.com\"]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'familyChangeRequest' of which detail should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "detailId",
          "required": true,
          "description": "Number ID of the 'familyChangeRequestDetail' to update. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "String New value for the field [optional] [example: \"new.parents.email@example.com\"]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "familyChangeRequestDetail",
                    "id": 1,
                    "attributes": {
                      "value": "new.parents.email@example.com"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'familyChangeRequestDetail' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/familyChangeRequestDetail"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "familyChangeRequestDetail",
                      "id": "1",
                      "attributes": {
                        "objectType": "FAMILY",
                        "objectId": 1,
                        "subObjectType": "FAMILY",
                        "subObjectId": 1,
                        "field": "email",
                        "value": "new.email@example.com",
                        "isDeleteOperation": false
                      },
                      "links": {
                        "self": "/v1/portal/family-change-request/1/detail/1",
                        "familyChangeRequest": "/v1/portal/family-change-request/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteFamilyChangeRequestDetail",
      "summary": "Delete Family Change Request Detail",
      "description": "Deletes an existing 'familyChangeRequestDetail' that belongs to an incomplete 'familyChangeRequest'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'familyChangeRequest' of which detail should be deleted. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "detailId",
          "required": true,
          "description": "Number ID of the 'familyChangeRequestDetail' to remove. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/portal/medical-change-condition": {
    "get": {
      "operationId": "getMedicalChangeConditions",
      "summary": "Get Medical Change Conditions",
      "description": "Retrieves a page of instances of all the `medicalChangeCondition*` model.",
      "parameters": [
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "changeRequestIds",
          "required": false,
          "description": "String Comma-separated list of `changeRequest` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: medicalChangeConditionAdd, medicalChangeConditionAllergy, medicalChangeConditionAsthma, medicalChangeConditionDiabetes, medicalChangeConditionDietary, medicalChangeConditionEpilepsy, medicalChangeConditionOther, medicalChangeConditionPhobia.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionAdd"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionAllergy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionAsthma"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionDiabetes"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionDietary"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionEpilepsy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionOther"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionPhobia"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalChangeConditionAdd",
                        "id": "1",
                        "attributes": {
                          "name": "Add",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "isInattentive": false,
                          "isHyperactive": false,
                          "isMedicationRequired": false,
                          "isDoctorsLetterProvided": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionAllergy",
                        "id": "1",
                        "attributes": {
                          "name": "Allergy",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "allergyName": "Dust allergy",
                          "severity": "moderate",
                          "isPrescribedAntihistamine": false,
                          "isPrescribedEpiPen": false,
                          "hasEpiPenRegistered": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionAsthma",
                        "id": "1",
                        "attributes": {
                          "name": "Asthma",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "severity": "moderate",
                          "isPrescribedSalbutamol": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionDiabetes",
                        "id": "1",
                        "attributes": {
                          "name": "Diabetes",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "hasInsulinInjections": false,
                          "hasInsulinPump": false,
                          "hasGlucagon": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionDietary",
                        "id": "1",
                        "attributes": {
                          "name": "Diabetes",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "dietaryName": "Lactose intolerance",
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionEpilepsy",
                        "id": "1",
                        "attributes": {
                          "name": "Epilepsy",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "type": "unknown",
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionOther",
                        "id": "1",
                        "attributes": {
                          "hasCarePlanProvided": false,
                          "name": "Chronic Sneezing",
                          "details": "Random sneezing bouts",
                          "additionalInformation": null,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionPhobia",
                        "id": "1",
                        "attributes": {
                          "name": "Diabetes",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "phobiaName": "Arachnophobia",
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalChangeCondition",
      "summary": "Post Medical Change Condition",
      "description": "\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionAdd`\n * Must not have ID\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `isInattentive` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `isHyperactive` → Boolean {DESCRIPTION-MISSING} [optional] [example: FALSE]\n   * `isMedicationRequired` → Boolean {DESCRIPTION-MISSING} [example: FALSE]\n   * `isDoctorsLetterProvided` → Boolean {DESCRIPTION-MISSING} [example: FALSE]\n * Relationships\n   * `changeRequest` → [required] [single] expected type is `medicalChangeRequest`. \n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionAdd`. \n\n`medicalChangeConditionAsthma`\n * Must not have ID\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `severity` → String {DESCRIPTION-MISSING} [optional] [example: \"mild\"] \nValue constraints:\nAllowed values: \"mild\", \"moderate\", \"severe\"\n   * `isPrescribedSalbutamol` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n * Relationships\n   * `changeRequest` → [required] [single] expected type is `medicalChangeRequest`. \n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionAsthma`. \n\n`medicalChangeConditionAllergy`\n * Must not have ID\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `allergyName` → String Name of the allergy. [optional] [example: \"Dust allergy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `severity` → String Should be one of the following values: not stated, mild, moderate, severe, life threatening. It'll accept any string but those won't work correctly in the UI. [optional] [example: \"mild\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `isPrescribedAntihistamine` → Boolean Has been Prescribed with Antihistamine [example: FALSE]\n   * `isPrescribedEpiPen` → Boolean Has an Epipen Adrenaline Auto-injector been Prescribed [example: FALSE]\n   * `hasEpiPenRegistered` → Boolean Has been registered with EpiClub [example: FALSE]\n * Relationships\n   * `changeRequest` → [required] [single] expected type is `medicalChangeRequest`. \n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionAllergy`. \n\n`medicalChangeConditionDiabetes`\n * Must not have ID\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `hasInsulinInjections` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasInsulinPump` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasGlucagon` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n * Relationships\n   * `changeRequest` → [required] [single] expected type is `medicalChangeRequest`. \n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionDiabetes`. \n\n`medicalChangeConditionDietary`\n * Must not have ID\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `dietaryName` → String Name of the dietary condition [optional] [default: null] [example: \"Lactose Intolerance\"]\n * Relationships\n   * `changeRequest` → [required] [single] expected type is `medicalChangeRequest`. \n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionDietary`. \n\n`medicalChangeConditionEpilepsy`\n * Must not have ID\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `type` → String {DESCRIPTION-MISSING} [optional] [example: \"Random epilepsy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n * Relationships\n   * `changeRequest` → [required] [single] expected type is `medicalChangeRequest`. \n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionEpilepsy`. \n\n`medicalChangeConditionOther`\n * Must not have ID\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `name` → String Name for the condition. it cannot be any of the built-in custom types (Add, Asthma, Epilepsy, etc). [example: \"Chronic sleep deprivation\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n * Relationships\n   * `changeRequest` → [required] [single] expected type is `medicalChangeRequest`. \n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionOther`. \n\n`medicalChangeConditionPhobia`\n * Must not have ID\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `phobiaName` → String Name of the phobia condition [optional] [default: null] [example: \"Lactose Intolerance\"]\n * Relationships\n   * `changeRequest` → [required] [single] expected type is `medicalChangeRequest`. \n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionPhobia`. ",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "isInattentive": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            },
                            "isHyperactive": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: FALSE]"
                            },
                            "isMedicationRequired": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: FALSE]"
                            },
                            "isDoctorsLetterProvided": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: FALSE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "changeRequest": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "severity": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"mild\"] \nValue constraints:\nAllowed values: \"mild\", \"moderate\", \"severe\""
                            },
                            "isPrescribedSalbutamol": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "changeRequest": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "allergyName": {
                              "type": "string",
                              "description": "String Name of the allergy. [example: \"Dust allergy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "severity": {
                              "type": "string",
                              "description": "String Should be one of the following values: not stated, mild, moderate, severe, life threatening. It'll accept any string but those won't work correctly in the UI. [example: \"mild\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "isPrescribedAntihistamine": {
                              "type": "boolean",
                              "description": "Boolean Has been Prescribed with Antihistamine [example: FALSE]"
                            },
                            "isPrescribedEpiPen": {
                              "type": "boolean",
                              "description": "Boolean Has an Epipen Adrenaline Auto-injector been Prescribed [example: FALSE]"
                            },
                            "hasEpiPenRegistered": {
                              "type": "boolean",
                              "description": "Boolean Has been registered with EpiClub [example: FALSE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "changeRequest": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "hasInsulinInjections": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            },
                            "hasInsulinPump": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            },
                            "hasGlucagon": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "changeRequest": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "dietaryName": {
                              "type": "string",
                              "description": "String Name of the dietary condition [optional] [default: null] [example: \"Lactose Intolerance\"]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "changeRequest": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "type": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"Random epilepsy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "changeRequest": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "name": {
                              "type": "string",
                              "description": "String Name for the condition. it cannot be any of the built-in custom types (Add, Asthma, Epilepsy, etc). [example: \"Chronic sleep deprivation\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "changeRequest": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "phobiaName": {
                              "type": "string",
                              "description": "String Name of the phobia condition [optional] [default: null] [example: \"Lactose Intolerance\"]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "changeRequest": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionAdd",
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "isMarkedForDeletion": true,
                      "details": "Lorem ipsum dolor",
                      "isInattentive": true,
                      "isHyperactive": false,
                      "isMedicationRequired": false,
                      "isDoctorsLetterProvided": false
                    },
                    "relationships": {
                      "changeRequest": {
                        "data": {
                          "id": 1,
                          "type": "medicalChangeRequest"
                        }
                      },
                      "enrolmentCondition": {
                        "data": {
                          "id": 1,
                          "type": "medicalConditionAdd"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: medicalChangeConditionAdd, medicalChangeConditionAsthma, medicalChangeConditionAllergy, medicalChangeConditionDiabetes, medicalChangeConditionDietary, medicalChangeConditionEpilepsy, medicalChangeConditionOther, medicalChangeConditionPhobia.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionAdd"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionAsthma"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionAllergy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionDiabetes"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionDietary"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionEpilepsy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionOther"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionPhobia"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "oneOf": [
                      {
                        "data": {
                          "type": "medicalChangeConditionAdd",
                          "id": "1",
                          "attributes": {
                            "name": "Add",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "isInattentive": false,
                            "isHyperactive": false,
                            "isMedicationRequired": false,
                            "isDoctorsLetterProvided": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionAsthma",
                          "id": "1",
                          "attributes": {
                            "name": "Asthma",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "severity": "moderate",
                            "isPrescribedSalbutamol": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionAllergy",
                          "id": "1",
                          "attributes": {
                            "name": "Allergy",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "allergyName": "Dust allergy",
                            "severity": "moderate",
                            "isPrescribedAntihistamine": false,
                            "isPrescribedEpiPen": false,
                            "hasEpiPenRegistered": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionDiabetes",
                          "id": "1",
                          "attributes": {
                            "name": "Diabetes",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "hasInsulinInjections": false,
                            "hasInsulinPump": false,
                            "hasGlucagon": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionDietary",
                          "id": "1",
                          "attributes": {
                            "name": "Diabetes",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "dietaryName": "Lactose intolerance",
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionEpilepsy",
                          "id": "1",
                          "attributes": {
                            "name": "Epilepsy",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "type": "unknown",
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionOther",
                          "id": "1",
                          "attributes": {
                            "hasCarePlanProvided": false,
                            "name": "Chronic Sneezing",
                            "details": "Random sneezing bouts",
                            "additionalInformation": null,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionPhobia",
                          "id": "1",
                          "attributes": {
                            "name": "Diabetes",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "phobiaName": "Arachnophobia",
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-condition/{id}": {
    "get": {
      "operationId": "getMedicalChangeCondition",
      "summary": "Get Medical Change Condition",
      "description": "Retrieves a single instance of one of the `medicalChangeCondition*` model.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'medicalChangeCondition*' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: medicalChangeConditionAdd, medicalChangeConditionAllergy, medicalChangeConditionAsthma, medicalChangeConditionDiabetes, medicalChangeConditionDietary, medicalChangeConditionEpilepsy, medicalChangeConditionOther, medicalChangeConditionPhobia.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionAdd"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionAllergy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionAsthma"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionDiabetes"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionDietary"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionEpilepsy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionOther"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionPhobia"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "oneOf": [
                      {
                        "data": {
                          "type": "medicalChangeConditionAdd",
                          "id": "1",
                          "attributes": {
                            "name": "Add",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "isInattentive": false,
                            "isHyperactive": false,
                            "isMedicationRequired": false,
                            "isDoctorsLetterProvided": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionAllergy",
                          "id": "1",
                          "attributes": {
                            "name": "Allergy",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "allergyName": "Dust allergy",
                            "severity": "moderate",
                            "isPrescribedAntihistamine": false,
                            "isPrescribedEpiPen": false,
                            "hasEpiPenRegistered": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionAsthma",
                          "id": "1",
                          "attributes": {
                            "name": "Asthma",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "severity": "moderate",
                            "isPrescribedSalbutamol": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionDiabetes",
                          "id": "1",
                          "attributes": {
                            "name": "Diabetes",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "hasInsulinInjections": false,
                            "hasInsulinPump": false,
                            "hasGlucagon": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionDietary",
                          "id": "1",
                          "attributes": {
                            "name": "Diabetes",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "dietaryName": "Lactose intolerance",
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionEpilepsy",
                          "id": "1",
                          "attributes": {
                            "name": "Epilepsy",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "type": "unknown",
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionOther",
                          "id": "1",
                          "attributes": {
                            "hasCarePlanProvided": false,
                            "name": "Chronic Sneezing",
                            "details": "Random sneezing bouts",
                            "additionalInformation": null,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionPhobia",
                          "id": "1",
                          "attributes": {
                            "name": "Diabetes",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "phobiaName": "Arachnophobia",
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchMedicalChangeCondition",
      "summary": "Patch Medical Change Condition",
      "description": "\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionAdd`\n * ID is required\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `isInattentive` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `isHyperactive` → Boolean {DESCRIPTION-MISSING} [optional] [example: FALSE]\n   * `isMedicationRequired` → Boolean {DESCRIPTION-MISSING} [example: FALSE]\n   * `isDoctorsLetterProvided` → Boolean {DESCRIPTION-MISSING} [example: FALSE]\n * No relationships\n\n`medicalChangeConditionAsthma`\n * ID is required\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `severity` → String {DESCRIPTION-MISSING} [optional] [example: \"mild\"] \nValue constraints:\nAllowed values: \"mild\", \"moderate\", \"severe\"\n   * `isPrescribedSalbutamol` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n * No relationships\n\n`medicalChangeConditionAllergy`\n * ID is required\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `allergyName` → String Name of the allergy. [optional] [example: \"Dust allergy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `severity` → String Should be one of the following values: not stated, mild, moderate, severe, life threatening. It'll accept any string but those won't work correctly in the UI. [optional] [example: \"mild\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `isPrescribedAntihistamine` → Boolean Has been Prescribed with Antihistamine [example: FALSE]\n   * `isPrescribedEpiPen` → Boolean Has an Epipen Adrenaline Auto-injector been Prescribed [example: FALSE]\n   * `hasEpiPenRegistered` → Boolean Has been registered with EpiClub [example: FALSE]\n * No relationships\n\n`medicalChangeConditionDiabetes`\n * ID is required\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `hasInsulinInjections` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasInsulinPump` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasGlucagon` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n * No relationships\n\n`medicalChangeConditionDietary`\n * ID is required\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `dietaryName` → String Name of the dietary condition [optional] [default: null] [example: \"Lactose Intolerance\"]\n * No relationships\n\n`medicalChangeConditionEpilepsy`\n * ID is required\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `type` → String {DESCRIPTION-MISSING} [optional] [example: \"Random epilepsy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n * No relationships\n\n`medicalChangeConditionOther`\n * ID is required\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `name` → String Name for the condition. it cannot be any of the built-in custom types (Add, Asthma, Epilepsy, etc). [example: \"Chronic sleep deprivation\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n * No relationships\n\n`medicalChangeConditionPhobia`\n * ID is required\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `phobiaName` → String Name of the phobia condition [optional] [default: null] [example: \"Lactose Intolerance\"]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'medicalChangeCondition*' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "isInattentive": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "isHyperactive": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: FALSE]"
                            },
                            "isMedicationRequired": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: FALSE]"
                            },
                            "isDoctorsLetterProvided": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: FALSE]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "severity": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"mild\"] \nValue constraints:\nAllowed values: \"mild\", \"moderate\", \"severe\""
                            },
                            "isPrescribedSalbutamol": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "allergyName": {
                              "type": "string",
                              "description": "String Name of the allergy. [optional] [example: \"Dust allergy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "severity": {
                              "type": "string",
                              "description": "String Should be one of the following values: not stated, mild, moderate, severe, life threatening. It'll accept any string but those won't work correctly in the UI. [optional] [example: \"mild\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "isPrescribedAntihistamine": {
                              "type": "boolean",
                              "description": "Boolean Has been Prescribed with Antihistamine [optional] [example: FALSE]"
                            },
                            "isPrescribedEpiPen": {
                              "type": "boolean",
                              "description": "Boolean Has an Epipen Adrenaline Auto-injector been Prescribed [optional] [example: FALSE]"
                            },
                            "hasEpiPenRegistered": {
                              "type": "boolean",
                              "description": "Boolean Has been registered with EpiClub [optional] [example: FALSE]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "hasInsulinInjections": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "hasInsulinPump": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "hasGlucagon": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "dietaryName": {
                              "type": "string",
                              "description": "String Name of the dietary condition [optional] [default: null] [example: \"Lactose Intolerance\"]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "type": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"Random epilepsy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "name": {
                              "type": "string",
                              "description": "String Name for the condition. it cannot be any of the built-in custom types (Add, Asthma, Epilepsy, etc). [optional] [example: \"Chronic sleep deprivation\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "phobiaName": {
                              "type": "string",
                              "description": "String Name of the phobia condition [optional] [default: null] [example: \"Lactose Intolerance\"]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionAdd",
                    "id": 1,
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "details": "Lorem ipsum dolor",
                      "isInattentive": true,
                      "isHyperactive": false,
                      "isMedicationRequired": false,
                      "isDoctorsLetterProvided": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: medicalChangeConditionAdd, medicalChangeConditionAsthma, medicalChangeConditionAllergy, medicalChangeConditionDiabetes, medicalChangeConditionDietary, medicalChangeConditionEpilepsy, medicalChangeConditionOther, medicalChangeConditionPhobia.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionAdd"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionAsthma"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionAllergy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionDiabetes"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionDietary"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionEpilepsy"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionOther"
                        },
                        {
                          "$ref": "#/components/schemas/medicalChangeConditionPhobia"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "oneOf": [
                      {
                        "data": {
                          "type": "medicalChangeConditionAdd",
                          "id": "1",
                          "attributes": {
                            "name": "Add",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "isInattentive": false,
                            "isHyperactive": false,
                            "isMedicationRequired": false,
                            "isDoctorsLetterProvided": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionAsthma",
                          "id": "1",
                          "attributes": {
                            "name": "Asthma",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "severity": "moderate",
                            "isPrescribedSalbutamol": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionAllergy",
                          "id": "1",
                          "attributes": {
                            "name": "Allergy",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "allergyName": "Dust allergy",
                            "severity": "moderate",
                            "isPrescribedAntihistamine": false,
                            "isPrescribedEpiPen": false,
                            "hasEpiPenRegistered": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionDiabetes",
                          "id": "1",
                          "attributes": {
                            "name": "Diabetes",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "hasInsulinInjections": false,
                            "hasInsulinPump": false,
                            "hasGlucagon": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionDietary",
                          "id": "1",
                          "attributes": {
                            "name": "Diabetes",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "dietaryName": "Lactose intolerance",
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionEpilepsy",
                          "id": "1",
                          "attributes": {
                            "name": "Epilepsy",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "type": "unknown",
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionOther",
                          "id": "1",
                          "attributes": {
                            "hasCarePlanProvided": false,
                            "name": "Chronic Sneezing",
                            "details": "Random sneezing bouts",
                            "additionalInformation": null,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      },
                      {
                        "data": {
                          "type": "medicalChangeConditionPhobia",
                          "id": "1",
                          "attributes": {
                            "name": "Diabetes",
                            "details": null,
                            "additionalInformation": null,
                            "hasCarePlanProvided": false,
                            "phobiaName": "Arachnophobia",
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-condition/1",
                            "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteMedicalChangeCondition",
      "summary": "Delete Medical Change Condition",
      "description": "Removes a single instance of one of the `medicalChangeCondition*` model.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'medicalChangeCondition*' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response with only metadata.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "description": "Meta fields",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "[Not-null] Always true when operation is successful",
                        "nullable": false
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-condition/{id}/care-plan-file": {
    "post": {
      "operationId": "postMedicalChangeConditionCarePlanFile",
      "summary": "Post Medical Change Condition Care Plan File",
      "description": "Attachs a care plan file to a medical condition submission, provided no file was uploaded yet. The file should be uploaded via 'multipart/form-data' and should be sent under key 'carePlan'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'medicalChangeCondition*' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response with only metadata.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "description": "Meta fields",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "[Not-null] Always true when operation is successful",
                        "nullable": false
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangeConditionCarePlanFile",
      "summary": "Get Medical Change Condition Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'medicalChangeCondition*' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-disability": {
    "post": {
      "operationId": "postMedicalChangeDisability",
      "summary": "Post Medical Change Disability",
      "description": "\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeDisabilityOther`\n * Must not have ID\n * Between 0 and 1 instances\n * Attributes\n   * `name` → String Name of the disability [example: \"Hearing Impairment\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `details` → String Additional information about the disability [optional] [example: \"Uses a hearing aid\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `receivesFunding` → Boolean Whether the student receives money for this disability [example: TRUE]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentDisability` is required, all other attributes are unnecessary and on approval the referenced disability will be deleted. [optional] [default: false] [example: TRUE]\n * Relationships\n   * `changeRequest` → [required] [single] expected type is `medicalChangeRequest`. \n   * `enrolmentDisability` → [optional] [single] expected type is `disabilityOther`. ",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "String Name of the disability [example: \"Hearing Impairment\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional information about the disability [example: \"Uses a hearing aid\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "receivesFunding": {
                              "type": "boolean",
                              "description": "Boolean Whether the student receives money for this disability [example: TRUE]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentDisability` is required, all other attributes are unnecessary and on approval the referenced disability will be deleted. [optional] [default: false] [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "changeRequest": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "enrolmentDisability": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeDisabilityOther",
                    "attributes": {
                      "name": "Hearing Impairment",
                      "details": "Uses a hearing aid",
                      "receivesFunding": true,
                      "isMarkedForDeletion": true
                    },
                    "relationships": {
                      "changeRequest": {
                        "data": {
                          "id": 1,
                          "type": "medicalChangeRequest"
                        }
                      },
                      "enrolmentDisability": {
                        "data": {
                          "id": 1,
                          "type": "disabilityOther"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: medicalChangeDisabilityOther.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/medicalChangeDisabilityOther"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "oneOf": [
                      {
                        "data": {
                          "type": "medicalChangeDisabilityOther",
                          "id": "1",
                          "attributes": {
                            "name": "Hearing Impairment",
                            "details": "Uses implant",
                            "receivesFunding": false,
                            "hasCarePlanProvided": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-disability/1",
                            "carePlanFile": "/v1/portal/medical-change-disability/1/care-plan-file"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangeDisabilities",
      "summary": "Get Medical Change Disabilities",
      "description": "Retrieves a page of instances of all the `medicalChangeDisability*` model.",
      "parameters": [
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "changeRequestIds",
          "required": false,
          "description": "String Comma-separated list of `changeRequest` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: medicalChangeDisabilityOther.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/medicalChangeDisabilityOther"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalChangeDisabilityOther",
                        "id": "1",
                        "attributes": {
                          "name": "Hearing Impairment",
                          "details": "Uses implant",
                          "receivesFunding": false,
                          "hasCarePlanProvided": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-disability/1",
                          "carePlanFile": "/v1/portal/medical-change-disability/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-disability/{id}": {
    "patch": {
      "operationId": "patchMedicalChangeDisability",
      "summary": "Patch Medical Change Disability",
      "description": "\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeDisabilityOther`\n * ID is required\n * Between 0 and 1 instances\n * Attributes\n   * `name` → String Name of the disability [example: \"Hearing Impairment\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `details` → String Additional information about the disability [optional] [example: \"Uses a hearing aid\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `receivesFunding` → Boolean Whether the student receives money for this disability [example: TRUE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'medicalChangeDisability*' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "String Name of the disability [optional] [example: \"Hearing Impairment\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional information about the disability [optional] [example: \"Uses a hearing aid\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "receivesFunding": {
                              "type": "boolean",
                              "description": "Boolean Whether the student receives money for this disability [optional] [example: TRUE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeDisabilityOther",
                    "id": 1,
                    "attributes": {
                      "name": "Hearing Impairment",
                      "details": "Uses a hearing aid",
                      "receivesFunding": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: medicalChangeDisabilityOther.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/medicalChangeDisabilityOther"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "oneOf": [
                      {
                        "data": {
                          "type": "medicalChangeDisabilityOther",
                          "id": "1",
                          "attributes": {
                            "name": "Hearing Impairment",
                            "details": "Uses implant",
                            "receivesFunding": false,
                            "hasCarePlanProvided": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-disability/1",
                            "carePlanFile": "/v1/portal/medical-change-disability/1/care-plan-file"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangeDisability",
      "summary": "Get Medical Change Disability",
      "description": "Retrieves a single instance of one of the `medicalChangeDisability*` model.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'medicalChangeDisability*' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a mixed collection of resources of these types: medicalChangeDisabilityOther.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/medicalChangeDisabilityOther"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "oneOf": [
                      {
                        "data": {
                          "type": "medicalChangeDisabilityOther",
                          "id": "1",
                          "attributes": {
                            "name": "Hearing Impairment",
                            "details": "Uses implant",
                            "receivesFunding": false,
                            "hasCarePlanProvided": false,
                            "isMarkedForDeletion": false
                          },
                          "relationships": {
                            "changeRequest": {
                              "data": {
                                "id": "1",
                                "type": "medicalChangeRequest"
                              }
                            }
                          },
                          "links": {
                            "self": "/v1/portal/medical-change-disability/1",
                            "carePlanFile": "/v1/portal/medical-change-disability/1/care-plan-file"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteMedicalChangeDisability",
      "summary": "Delete Medical Change Disability",
      "description": "Removes a single instance of one of the `medicalChangeDisability*` model.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'medicalChangeDisability*' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response with only metadata.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "description": "Meta fields",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "[Not-null] Always true when operation is successful",
                        "nullable": false
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-disability/{id}/care-plan-file": {
    "post": {
      "operationId": "postMedicalChangeDisabilityCarePlanFile",
      "summary": "Post Medical Change Disability Care Plan File",
      "description": "Attachs a care plan file to a medical change disability submission, provided no file was uploaded yet. The file should be uploaded via 'multipart/form-data' and should be sent under key 'carePlan'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'medicalChangeDisability*' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response with only metadata.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "description": "Meta fields",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "description": "[Not-null] Always true when operation is successful",
                        "nullable": false
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangeDisabilityCarePlanFile",
      "summary": "Get Medical Change Disability Care Plan File",
      "description": "Returns the care plan file of the disability",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the referenced 'medicalChangeDisability*' [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-prescribed-medication": {
    "post": {
      "operationId": "postMedicalChangePrescribedMedication",
      "summary": "Post Medical Change Prescribed Medication",
      "description": "Adds a new `medicalChangePrescribedMedication` to an existing `medicalChangeRequest`\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangePrescribedMedication`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `name` → String Name of the medication [optional] [example: \"Ketanol\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `dosage` → String Text explanation of the dosage [optional] [example: \"Should be given up to one 200mg tablet per day in case of a headache\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `type` → String Type of the medication [optional] [example: \"Analgesics\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `details` → String Additional information about the medication. [optional] [example: \"\"] \nValue constraints:\nLength must be between 1 and 65535 characters, inclusive\n   * `isPrescribed` → Boolean Whether the medication is prescribed or taken without prescription [example: TRUE]\n   * `isTakenAtSchool` → Boolean Whether the medication is taken during school time or outside [optional] [example: TRUE]\n   * `isLongTerm` → Boolean Whether it's a medication that is or will be taken for a long time [optional] [example: FALSE]\n   * `anticipatedStopDate` → Date (, eg. 20190102) A date at which it is expected the student will stop taking the medication [optional] [example: \"2019-01-01\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentPrescribedMedication` is required, all other attributes are unnecessary and on approval the referenced prescribed medication will be deleted. [optional] [default: false] [example: TRUE]\n * Relationships\n   * `changeRequest` → [required] [single] expected type is `medicalChangeRequest`. \n   * `enrolmentPrescribedMedication` → [optional] [single] expected type is `prescribedMedication`. \n   * `enrolmentCondition` → [optional] [single] expected type is `medicalCondition`. ",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "String Name of the medication [example: \"Ketanol\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "dosage": {
                              "type": "string",
                              "description": "String Text explanation of the dosage [example: \"Should be given up to one 200mg tablet per day in case of a headache\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "type": {
                              "type": "string",
                              "description": "String Type of the medication [optional] [example: \"Analgesics\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional information about the medication. [optional] [example: \"\"] \nValue constraints:\nLength must be between 1 and 65535 characters, inclusive"
                            },
                            "isPrescribed": {
                              "type": "boolean",
                              "description": "Boolean Whether the medication is prescribed or taken without prescription [example: TRUE]"
                            },
                            "isTakenAtSchool": {
                              "type": "boolean",
                              "description": "Boolean Whether the medication is taken during school time or outside [example: TRUE]"
                            },
                            "isLongTerm": {
                              "type": "boolean",
                              "description": "Boolean Whether it's a medication that is or will be taken for a long time [example: FALSE]"
                            },
                            "anticipatedStopDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) A date at which it is expected the student will stop taking the medication [example: \"2019-01-01\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentPrescribedMedication` is required, all other attributes are unnecessary and on approval the referenced prescribed medication will be deleted. [optional] [default: false] [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "changeRequest": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "enrolmentPrescribedMedication": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangePrescribedMedication",
                    "attributes": {
                      "name": "Ketanol",
                      "dosage": "Should be given up to one 200mg tablet per day in case of a headache",
                      "type": "Analgesics",
                      "details": "",
                      "isPrescribed": true,
                      "isTakenAtSchool": true,
                      "isLongTerm": false,
                      "anticipatedStopDate": "2019-01-01",
                      "isMarkedForDeletion": true
                    },
                    "relationships": {
                      "changeRequest": {
                        "data": {
                          "id": 1,
                          "type": "medicalChangeRequest"
                        }
                      },
                      "enrolmentPrescribedMedication": {
                        "data": {
                          "id": 1,
                          "type": "prescribedMedication"
                        }
                      },
                      "enrolmentCondition": {
                        "data": {
                          "id": 1,
                          "type": "medicalCondition"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangePrescribedMedication' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangePrescribedMedication"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangePrescribedMedication",
                      "id": "1",
                      "attributes": {
                        "name": "Ketonal",
                        "dosage": "Up to one pill per day in case of a headache",
                        "type": null,
                        "details": null,
                        "isPrescribed": true,
                        "isTakenAtSchool": true,
                        "isLongTerm": false,
                        "anticipatedStopDate": "2019-01-01",
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "2",
                            "type": "medicalChangeRequest"
                          }
                        },
                        "enrolmentPrescribedMedication": {
                          "data": {
                            "id": "3",
                            "type": "prescribedMedication"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-prescribed-medication/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangePrescribedMedications",
      "summary": "Get Medical Change Prescribed Medications",
      "description": "Retrieves a page of instances of `medicalChangePrescribedMedication`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of `createdBy` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "changeRequestIds",
          "required": false,
          "description": "String Comma-separated list of `changeRequest` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalChangePrescribedMedication' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalChangePrescribedMedication"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalChangePrescribedMedication",
                        "id": "1",
                        "attributes": {
                          "name": "Ketonal",
                          "dosage": "Up to one pill per day in case of a headache",
                          "type": null,
                          "details": null,
                          "isPrescribed": true,
                          "isTakenAtSchool": true,
                          "isLongTerm": false,
                          "anticipatedStopDate": "2019-01-01",
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "2",
                              "type": "medicalChangeRequest"
                            }
                          },
                          "enrolmentPrescribedMedication": {
                            "data": {
                              "id": "3",
                              "type": "prescribedMedication"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-prescribed-medication/1"
                        }
                      },
                      {
                        "type": "medicalChangePrescribedMedication",
                        "id": "1",
                        "attributes": {
                          "name": "Ketonal",
                          "dosage": "Up to one pill per day in case of a headache",
                          "type": null,
                          "details": null,
                          "isPrescribed": true,
                          "isTakenAtSchool": true,
                          "isLongTerm": false,
                          "anticipatedStopDate": "2019-01-01",
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "2",
                              "type": "medicalChangeRequest"
                            }
                          },
                          "enrolmentPrescribedMedication": {
                            "data": {
                              "id": "3",
                              "type": "prescribedMedication"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-prescribed-medication/1"
                        }
                      },
                      {
                        "type": "medicalChangePrescribedMedication",
                        "id": "1",
                        "attributes": {
                          "name": "Ketonal",
                          "dosage": "Up to one pill per day in case of a headache",
                          "type": null,
                          "details": null,
                          "isPrescribed": true,
                          "isTakenAtSchool": true,
                          "isLongTerm": false,
                          "anticipatedStopDate": "2019-01-01",
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "2",
                              "type": "medicalChangeRequest"
                            }
                          },
                          "enrolmentPrescribedMedication": {
                            "data": {
                              "id": "3",
                              "type": "prescribedMedication"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-prescribed-medication/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-prescribed-medication/{id}": {
    "patch": {
      "operationId": "patchMedicalChangePrescribedMedication",
      "summary": "Patch Medical Change Prescribed Medication",
      "description": "Update an existing `medicalChangePrescribedMedication`.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangePrescribedMedication`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `name` → String Name of the medication [optional] [example: \"Ketanol\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `dosage` → String Text explanation of the dosage [optional] [example: \"Should be given up to one 200mg tablet per day in case of a headache\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `type` → String Type of the medication [optional] [example: \"Analgesics\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `details` → String Additional information about the medication. [optional] [example: \"\"] \nValue constraints:\nLength must be between 1 and 65535 characters, inclusive\n   * `isPrescribed` → Boolean Whether the medication is prescribed or taken without prescription [example: TRUE]\n   * `isTakenAtSchool` → Boolean Whether the medication is taken during school time or outside [optional] [example: TRUE]\n   * `isLongTerm` → Boolean Whether it's a medication that is or will be taken for a long time [optional] [example: FALSE]\n   * `anticipatedStopDate` → Date (, eg. 20190102) A date at which it is expected the student will stop taking the medication [optional] [example: \"2019-01-01\"]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of 'medicalChangePrescribedMedication' to update.",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "String Name of the medication [optional] [example: \"Ketanol\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "dosage": {
                              "type": "string",
                              "description": "String Text explanation of the dosage [optional] [example: \"Should be given up to one 200mg tablet per day in case of a headache\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "type": {
                              "type": "string",
                              "description": "String Type of the medication [optional] [example: \"Analgesics\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional information about the medication. [optional] [example: \"\"] \nValue constraints:\nLength must be between 1 and 65535 characters, inclusive"
                            },
                            "isPrescribed": {
                              "type": "boolean",
                              "description": "Boolean Whether the medication is prescribed or taken without prescription [optional] [example: TRUE]"
                            },
                            "isTakenAtSchool": {
                              "type": "boolean",
                              "description": "Boolean Whether the medication is taken during school time or outside [optional] [example: TRUE]"
                            },
                            "isLongTerm": {
                              "type": "boolean",
                              "description": "Boolean Whether it's a medication that is or will be taken for a long time [optional] [example: FALSE]"
                            },
                            "anticipatedStopDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) A date at which it is expected the student will stop taking the medication [optional] [example: \"2019-01-01\"]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangePrescribedMedication",
                    "id": 1,
                    "attributes": {
                      "name": "Ketanol",
                      "dosage": "Should be given up to one 200mg tablet per day in case of a headache",
                      "type": "Analgesics",
                      "details": "",
                      "isPrescribed": true,
                      "isTakenAtSchool": true,
                      "isLongTerm": false,
                      "anticipatedStopDate": "2019-01-01"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangePrescribedMedication' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangePrescribedMedication"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangePrescribedMedication",
                      "id": "1",
                      "attributes": {
                        "name": "Ketonal",
                        "dosage": "Up to one pill per day in case of a headache",
                        "type": null,
                        "details": null,
                        "isPrescribed": true,
                        "isTakenAtSchool": true,
                        "isLongTerm": false,
                        "anticipatedStopDate": "2019-01-01",
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "2",
                            "type": "medicalChangeRequest"
                          }
                        },
                        "enrolmentPrescribedMedication": {
                          "data": {
                            "id": "3",
                            "type": "prescribedMedication"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-prescribed-medication/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangePrescribedMedication",
      "summary": "Get Medical Change Prescribed Medication",
      "description": "Retrieves a single instance of `medicalChangePrescribedMedication`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalChangePrescribedMedication' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangePrescribedMedication' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangePrescribedMedication"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangePrescribedMedication",
                      "id": "1",
                      "attributes": {
                        "name": "Ketonal",
                        "dosage": "Up to one pill per day in case of a headache",
                        "type": null,
                        "details": null,
                        "isPrescribed": true,
                        "isTakenAtSchool": true,
                        "isLongTerm": false,
                        "anticipatedStopDate": "2019-01-01",
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "2",
                            "type": "medicalChangeRequest"
                          }
                        },
                        "enrolmentPrescribedMedication": {
                          "data": {
                            "id": "3",
                            "type": "prescribedMedication"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-prescribed-medication/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteMedicalChangePrescribedMedication",
      "summary": "Delete Medical Change Prescribed Medication",
      "description": "Removes a single instance of one of the `medicalChangePrescribedMedication`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of 'medicalChangePrescribedMedication' to remove. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/portal/medical-change-request": {
    "get": {
      "operationId": "getMedicalChangeRequests",
      "summary": "Get Medical Change Requests",
      "description": "Retrieves a page of instances of `medicalChangeRequest`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "studentIds",
          "required": false,
          "description": "String Comma-separated list of `student` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalChangeRequest' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalChangeRequest"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalChangeRequest",
                        "id": "1",
                        "attributes": {
                          "isApproved": false,
                          "isRejected": false,
                          "dateSubmitted": null,
                          "dateActioned": "2021-04-21"
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-request/1"
                        }
                      },
                      {
                        "type": "medicalChangeRequest",
                        "id": "1",
                        "attributes": {
                          "isApproved": false,
                          "isRejected": false,
                          "dateSubmitted": null,
                          "dateActioned": "2021-04-21"
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-request/1"
                        }
                      },
                      {
                        "type": "medicalChangeRequest",
                        "id": "1",
                        "attributes": {
                          "isApproved": false,
                          "isRejected": false,
                          "dateSubmitted": null,
                          "dateActioned": "2021-04-21"
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-request/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalChangeRequest",
      "summary": "Post Medical Change Request",
      "description": "Creates a new future absence\n\nPayload has the following requirements:\n * Expects a non-empty collection.\n\nAnd supports these models:\n\n`medicalChangeRequest`\n * Must not have ID\n * Exactly 1 instance\n * No attributes\n * Relationships\n   * `student` → [required] [single] expected type is `student`. \n\n`medicalChangeDoctor`\n * Must not have ID\n * Between 0 and 99 instances\n * Attributes\n   * `type` → String Type of the doctor [optional] [example: \"other\"] \nValue constraints:\nAllowed values: \"other\", \"gp\", \"specialist\", \"dentist\"\n   * `name` → String Name of the doctor. [optional] [example: \"Dr John Doe\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `practiceName` → String Name of the doctor's practice. [optional] [example: \"Doe's Laryngology\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `phone` → String Phone to the doctor. [optional] [example: \"+48 123-123-123\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `address` → String Address of the doctor. [optional] [example: \"Doctor Street 73/12, Medicalville\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `consentToContact` → Boolean Whether the doctor has given permission to be contacted by school. [example: TRUE]\n   * `isMarkedForDeletion` → Boolean If true `affectedDoctor` is required, all other attributes are unnecessary and on approval the referenced doctor will be deleted. [optional] [default: false] [example: TRUE]\n * Relationships\n   * `affectedDoctor` → [optional] [single] expected type is `doctor`. When provided this medical change will modify the affected doctor rather than create a new record.\n\n`medicalChangeVaccination`\n * Must not have ID\n * Between 0 and 99 instances\n * Attributes\n   * `name` → String Name of the vaccine. [optional] [example: \"Placebon\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `dateOfVaccination` → Date (, eg. 20190102) Date of the vaccination [optional] [example: \"2015-01-01\"]\n   * `comment` → String Additional comments about the vaccination. [optional] [example: \"Vaccine does nothing, used for a medical trial\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive\n   * `isMarkedForDeletion` → Boolean If true `enrolmentVaccination` is required, all other attributes are unnecessary and on approval the referenced vaccination will be deleted. [optional] [default: false] [example: TRUE]\n * Relationships\n   * `enrolmentVaccination` → [optional] [single] expected type is `vaccination`. When provided this medical change will modify the affected vaccination rather than create a new record.\n\n`medicalChangeConditionAdd`\n * Must not have ID\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `isInattentive` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `isHyperactive` → Boolean {DESCRIPTION-MISSING} [optional] [example: FALSE]\n   * `isMedicationRequired` → Boolean {DESCRIPTION-MISSING} [example: FALSE]\n   * `isDoctorsLetterProvided` → Boolean {DESCRIPTION-MISSING} [example: FALSE]\n * Relationships\n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionAdd`. \n\n`medicalChangeConditionAllergy`\n * Must not have ID\n * Between 0 and 99 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `allergyName` → String Name of the allergy. [optional] [example: \"Dust allergy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `severity` → String Should be one of the following values: not stated, mild, moderate, severe, life threatening. It'll accept any string but those won't work correctly in the UI. [optional] [example: \"mild\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `isPrescribedAntihistamine` → Boolean Has been Prescribed with Antihistamine [example: FALSE]\n   * `isPrescribedEpiPen` → Boolean Has an Epipen Adrenaline Auto-injector been Prescribed [example: FALSE]\n   * `hasEpiPenRegistered` → Boolean Has been registered with EpiClub [example: FALSE]\n * Relationships\n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionAllergy`. \n\n`medicalChangeConditionAsthma`\n * Must not have ID\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `severity` → String {DESCRIPTION-MISSING} [optional] [example: \"mild\"] \nValue constraints:\nAllowed values: \"mild\", \"moderate\", \"severe\"\n   * `isPrescribedSalbutamol` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n * Relationships\n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionAsthma`. \n\n`medicalChangeConditionDiabetes`\n * Must not have ID\n * Between 0 and 1 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `hasInsulinInjections` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasInsulinPump` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasGlucagon` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n * Relationships\n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionDiabetes`. \n\n`medicalChangeConditionEpilepsy`\n * Must not have ID\n * Between 0 and 99 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `type` → String {DESCRIPTION-MISSING} [optional] [example: \"Random epilepsy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n * Relationships\n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionEpilepsy`. \n\n`medicalChangeConditionOther`\n * Must not have ID\n * Between 0 and 99 instances\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `name` → String Name for the condition. it cannot be any of the built-in custom types (Add, Asthma, Epilepsy, etc). [example: \"Chronic sleep deprivation\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n * Relationships\n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionOther`. \n\n`medicalChangeMisc`\n * Must not have ID\n * Between 0 and 1 instances\n * Attributes\n   * `wasMedicationAdviceFormReceived` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `canOverCounterSalbutamol` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `canOverCounterParacetamol` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `canOverCounterIbuprofen` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `canOverCounterAntihistamine` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasParentAcknowledged` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasLongTermMedication` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `areVaccinationsUpToDate` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasMeaslesExclusion` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `lastDateOfTetanusInjection` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"] \nValue constraints:\nMaximum value: today [inclusive]\n   * `privateMedicalFundExpiryDate` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"]\n   * `medicareExpiryDate` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"]\n   * `ambulanceCoverProvider` → String {DESCRIPTION-MISSING} [optional] [example: \"Bupa HI Pty Ltd\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `medicareNumber` → String {DESCRIPTION-MISSING} [optional] [example: \"4173158231/1\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `medicarePositionOnCard` → String {DESCRIPTION-MISSING} [optional] [example: \"7\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `privateMedicalFund` → String {DESCRIPTION-MISSING} [optional] [example: \"ahm Health Insurance\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `privateMedicalFundNumber` → String {DESCRIPTION-MISSING} [optional] [example: \"1237124691\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `hasAmbulanceCover` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n * No relationships",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "student": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "String Type of the doctor [optional] [example: \"other\"] \nValue constraints:\nAllowed values: \"other\", \"gp\", \"specialist\", \"dentist\""
                            },
                            "name": {
                              "type": "string",
                              "description": "String Name of the doctor. [optional] [example: \"Dr John Doe\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "practiceName": {
                              "type": "string",
                              "description": "String Name of the doctor's practice. [optional] [example: \"Doe's Laryngology\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "phone": {
                              "type": "string",
                              "description": "String Phone to the doctor. [optional] [example: \"+48 123-123-123\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "address": {
                              "type": "string",
                              "description": "String Address of the doctor. [optional] [example: \"Doctor Street 73/12, Medicalville\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "consentToContact": {
                              "type": "boolean",
                              "description": "Boolean Whether the doctor has given permission to be contacted by school. [optional] [example: TRUE]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `affectedDoctor` is required, all other attributes are unnecessary and on approval the referenced doctor will be deleted. [optional] [default: false] [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "affectedDoctor": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "String Name of the vaccine. [example: \"Placebon\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "dateOfVaccination": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date of the vaccination [example: \"2015-01-01\"]"
                            },
                            "comment": {
                              "type": "string",
                              "description": "String Additional comments about the vaccination. [example: \"Vaccine does nothing, used for a medical trial\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentVaccination` is required, all other attributes are unnecessary and on approval the referenced vaccination will be deleted. [optional] [default: false] [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentVaccination": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "isInattentive": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            },
                            "isHyperactive": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: FALSE]"
                            },
                            "isMedicationRequired": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: FALSE]"
                            },
                            "isDoctorsLetterProvided": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: FALSE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "allergyName": {
                              "type": "string",
                              "description": "String Name of the allergy. [example: \"Dust allergy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "severity": {
                              "type": "string",
                              "description": "String Should be one of the following values: not stated, mild, moderate, severe, life threatening. It'll accept any string but those won't work correctly in the UI. [example: \"mild\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "isPrescribedAntihistamine": {
                              "type": "boolean",
                              "description": "Boolean Has been Prescribed with Antihistamine [example: FALSE]"
                            },
                            "isPrescribedEpiPen": {
                              "type": "boolean",
                              "description": "Boolean Has an Epipen Adrenaline Auto-injector been Prescribed [example: FALSE]"
                            },
                            "hasEpiPenRegistered": {
                              "type": "boolean",
                              "description": "Boolean Has been registered with EpiClub [example: FALSE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "severity": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"mild\"] \nValue constraints:\nAllowed values: \"mild\", \"moderate\", \"severe\""
                            },
                            "isPrescribedSalbutamol": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "hasInsulinInjections": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            },
                            "hasInsulinPump": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            },
                            "hasGlucagon": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "type": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"Random epilepsy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "name": {
                              "type": "string",
                              "description": "String Name for the condition. it cannot be any of the built-in custom types (Add, Asthma, Epilepsy, etc). [example: \"Chronic sleep deprivation\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "wasMedicationAdviceFormReceived": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "canOverCounterSalbutamol": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "canOverCounterParacetamol": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "canOverCounterIbuprofen": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "canOverCounterAntihistamine": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "hasParentAcknowledged": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "hasLongTermMedication": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "areVaccinationsUpToDate": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "hasMeaslesExclusion": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "lastDateOfTetanusInjection": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"] \nValue constraints:\nMaximum value: today [inclusive]"
                            },
                            "privateMedicalFundExpiryDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"]"
                            },
                            "medicareExpiryDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"]"
                            },
                            "ambulanceCoverProvider": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"Bupa HI Pty Ltd\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "medicareNumber": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"4173158231/1\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "medicarePositionOnCard": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"7\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "privateMedicalFund": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"ahm Health Insurance\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "privateMedicalFundNumber": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"1237124691\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "hasAmbulanceCover": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": [
                    {
                      "type": "medicalChangeRequest",
                      "relationships": {
                        "student": {
                          "data": {
                            "id": 1,
                            "type": "student"
                          }
                        }
                      }
                    },
                    {
                      "type": "medicalChangeDoctor",
                      "attributes": {
                        "type": "other",
                        "name": "Dr John Doe",
                        "practiceName": "Doe's Laryngology",
                        "phone": "+48 123-123-123",
                        "address": "Doctor Street 73/12, Medicalville",
                        "consentToContact": true,
                        "isMarkedForDeletion": true
                      },
                      "relationships": {
                        "affectedDoctor": {
                          "data": {
                            "id": 1,
                            "type": "doctor"
                          }
                        }
                      }
                    },
                    {
                      "type": "medicalChangeVaccination",
                      "attributes": {
                        "name": "Placebon",
                        "dateOfVaccination": "2015-01-01",
                        "comment": "Vaccine does nothing, used for a medical trial",
                        "isMarkedForDeletion": true
                      },
                      "relationships": {
                        "enrolmentVaccination": {
                          "data": {
                            "id": 1,
                            "type": "vaccination"
                          }
                        }
                      }
                    },
                    {
                      "type": "medicalChangeConditionAdd",
                      "attributes": {
                        "additionalInformation": "Condition is serious",
                        "isMarkedForDeletion": true,
                        "details": "Lorem ipsum dolor",
                        "isInattentive": true,
                        "isHyperactive": false,
                        "isMedicationRequired": false,
                        "isDoctorsLetterProvided": false
                      },
                      "relationships": {
                        "enrolmentCondition": {
                          "data": {
                            "id": 1,
                            "type": "medicalConditionAdd"
                          }
                        }
                      }
                    },
                    {
                      "type": "medicalChangeConditionAllergy",
                      "attributes": {
                        "additionalInformation": "Condition is serious",
                        "isMarkedForDeletion": true,
                        "details": "Lorem ipsum dolor",
                        "allergyName": "Dust allergy",
                        "severity": "mild",
                        "isPrescribedAntihistamine": false,
                        "isPrescribedEpiPen": false,
                        "hasEpiPenRegistered": false
                      },
                      "relationships": {
                        "enrolmentCondition": {
                          "data": {
                            "id": 1,
                            "type": "medicalConditionAllergy"
                          }
                        }
                      }
                    },
                    {
                      "type": "medicalChangeConditionAsthma",
                      "attributes": {
                        "additionalInformation": "Condition is serious",
                        "isMarkedForDeletion": true,
                        "details": "Lorem ipsum dolor",
                        "severity": "mild",
                        "isPrescribedSalbutamol": true
                      },
                      "relationships": {
                        "enrolmentCondition": {
                          "data": {
                            "id": 1,
                            "type": "medicalConditionAsthma"
                          }
                        }
                      }
                    },
                    {
                      "type": "medicalChangeConditionDiabetes",
                      "attributes": {
                        "additionalInformation": "Condition is serious",
                        "isMarkedForDeletion": true,
                        "details": "Lorem ipsum dolor",
                        "hasInsulinInjections": true,
                        "hasInsulinPump": true,
                        "hasGlucagon": true
                      },
                      "relationships": {
                        "enrolmentCondition": {
                          "data": {
                            "id": 1,
                            "type": "medicalConditionDiabetes"
                          }
                        }
                      }
                    },
                    {
                      "type": "medicalChangeConditionEpilepsy",
                      "attributes": {
                        "additionalInformation": "Condition is serious",
                        "isMarkedForDeletion": true,
                        "details": "Lorem ipsum dolor",
                        "type": "Random epilepsy"
                      },
                      "relationships": {
                        "enrolmentCondition": {
                          "data": {
                            "id": 1,
                            "type": "medicalConditionEpilepsy"
                          }
                        }
                      }
                    },
                    {
                      "type": "medicalChangeConditionOther",
                      "attributes": {
                        "additionalInformation": "Condition is serious",
                        "isMarkedForDeletion": true,
                        "details": "Lorem ipsum dolor",
                        "name": "Chronic sleep deprivation"
                      },
                      "relationships": {
                        "enrolmentCondition": {
                          "data": {
                            "id": 1,
                            "type": "medicalConditionOther"
                          }
                        }
                      }
                    },
                    {
                      "type": "medicalChangeMisc",
                      "attributes": {
                        "wasMedicationAdviceFormReceived": true,
                        "canOverCounterSalbutamol": true,
                        "canOverCounterParacetamol": true,
                        "canOverCounterIbuprofen": true,
                        "canOverCounterAntihistamine": true,
                        "hasParentAcknowledged": true,
                        "hasLongTermMedication": true,
                        "areVaccinationsUpToDate": true,
                        "hasMeaslesExclusion": true,
                        "lastDateOfTetanusInjection": "2016-01-01",
                        "privateMedicalFundExpiryDate": "2016-01-01",
                        "medicareExpiryDate": "2016-01-01",
                        "ambulanceCoverProvider": "Bupa HI Pty Ltd",
                        "medicareNumber": "4173158231/1",
                        "medicarePositionOnCard": "7",
                        "privateMedicalFund": "ahm Health Insurance",
                        "privateMedicalFundNumber": "1237124691",
                        "hasAmbulanceCover": true
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Returns a mixed collection of all the created models (PROPER DOCUMENTATION MISSING)"
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}": {
    "get": {
      "operationId": "getMedicalChangeRequest",
      "summary": "Get Medical Change Request",
      "description": "Retrieves a single instance of `medicalChangeRequest`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalChangeRequest' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeRequest' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeRequest"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeRequest",
                      "id": "1",
                      "attributes": {
                        "isApproved": false,
                        "isRejected": false,
                        "dateSubmitted": null,
                        "dateActioned": "2021-04-21"
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-request/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteMedicalChangeRequest",
      "summary": "Delete Medical Change Request",
      "description": "Removes unapproved 'medicalChangeCondition' and all of its details",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medicalChangeRequest of which condition should be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-add": {
    "get": {
      "operationId": "getMedicalChangeRequestConditionsAdd",
      "summary": "Get Medical Change Request Conditions Add",
      "description": "Retrieves all of the instances of ``, the relation `conditionsAdd` of `medicalChangeConditionAdd`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalChangeConditionAdd' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalChangeConditionAdd' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalChangeConditionAdd"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalChangeConditionAdd",
                        "id": "1",
                        "attributes": {
                          "name": "Add",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "isInattentive": false,
                          "isHyperactive": false,
                          "isMedicationRequired": false,
                          "isDoctorsLetterProvided": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionAdd",
                        "id": "1",
                        "attributes": {
                          "name": "Add",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "isInattentive": false,
                          "isHyperactive": false,
                          "isMedicationRequired": false,
                          "isDoctorsLetterProvided": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionAdd",
                        "id": "1",
                        "attributes": {
                          "name": "Add",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "isInattentive": false,
                          "isHyperactive": false,
                          "isMedicationRequired": false,
                          "isDoctorsLetterProvided": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalChangeRequestConditionAdd",
      "summary": "Post Medical Change Request Condition Add",
      "description": "Adds condition add details to a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionAdd`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `isInattentive` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `isHyperactive` → Boolean {DESCRIPTION-MISSING} [optional] [example: FALSE]\n   * `isMedicationRequired` → Boolean {DESCRIPTION-MISSING} [example: FALSE]\n   * `isDoctorsLetterProvided` → Boolean {DESCRIPTION-MISSING} [example: FALSE]\n * Relationships\n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionAdd`. ",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medical change requests to which a condition ADD should be added. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "isInattentive": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            },
                            "isHyperactive": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: FALSE]"
                            },
                            "isMedicationRequired": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: FALSE]"
                            },
                            "isDoctorsLetterProvided": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: FALSE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionAdd",
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "isMarkedForDeletion": true,
                      "details": "Lorem ipsum dolor",
                      "isInattentive": true,
                      "isHyperactive": false,
                      "isMedicationRequired": false,
                      "isDoctorsLetterProvided": false
                    },
                    "relationships": {
                      "enrolmentCondition": {
                        "data": {
                          "id": 1,
                          "type": "medicalConditionAdd"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionAdd' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionAdd"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionAdd",
                      "id": "1",
                      "attributes": {
                        "name": "Add",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "isInattentive": false,
                        "isHyperactive": false,
                        "isMedicationRequired": false,
                        "isDoctorsLetterProvided": false,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-add/{conditionId}": {
    "get": {
      "operationId": "getMedicalChangeRequestConditionAdd",
      "summary": "Get Medical Change Request Condition Add",
      "description": "Retrieves a single instances of medicalChangeConditionAdd based on the specified ID.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionAdd to retrieve, must belong to the specific medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionAdd' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionAdd"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionAdd",
                      "id": "1",
                      "attributes": {
                        "name": "Add",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "isInattentive": false,
                        "isHyperactive": false,
                        "isMedicationRequired": false,
                        "isDoctorsLetterProvided": false,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchMedicalChangeREquestConditionAdd",
      "summary": "Patch Medical Change REquest Condition Add",
      "description": "Updates existing `medicalChangeConditionAdd` details of a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionAdd`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `isInattentive` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `isHyperactive` → Boolean {DESCRIPTION-MISSING} [optional] [example: FALSE]\n   * `isMedicationRequired` → Boolean {DESCRIPTION-MISSING} [example: FALSE]\n   * `isDoctorsLetterProvided` → Boolean {DESCRIPTION-MISSING} [example: FALSE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of `medicalChangeRequest` of which `medicalChangeConditionAdd` should be modified. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the `medicalChangeConditionAdd` to modify, must belong to the specified `medicalChangeRequest` [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "isInattentive": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "isHyperactive": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: FALSE]"
                            },
                            "isMedicationRequired": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: FALSE]"
                            },
                            "isDoctorsLetterProvided": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: FALSE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionAdd",
                    "id": 1,
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "details": "Lorem ipsum dolor",
                      "isInattentive": true,
                      "isHyperactive": false,
                      "isMedicationRequired": false,
                      "isDoctorsLetterProvided": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionAdd' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionAdd"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionAdd",
                      "id": "1",
                      "attributes": {
                        "name": "Add",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "isInattentive": false,
                        "isHyperactive": false,
                        "isMedicationRequired": false,
                        "isDoctorsLetterProvided": false,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteMedicalChangeRequestConditionAdd",
      "summary": "Delete Medical Change Request Condition Add",
      "description": "Removes existing 'medicalChangeConditionAdd' details of a yet-unapproved 'medicalChangeRequest'",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medicalChangeRequest of which condition should be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionAdd belonging to the medicalChangeRequest to be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-add/{conditionId}/care-plan-file": {
    "post": {
      "operationId": "postMedicalChangeRequestConditionAddCarePlanFile",
      "summary": "Post Medical Change Request Condition Add Care Plan File",
      "description": "Attachs a care plan file to a medical condition submission, provided no file was uploaded yet. The file should be uploaded via 'multipart/form-data' and should be sent under key 'carePlan'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionAdd which care plan file to retrieve [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "File upload was successful"
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangeRequestConditionAddCarePlanFile",
      "summary": "Get Medical Change Request Condition Add Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionAdd which care plan file to retrieve [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-allergy": {
    "get": {
      "operationId": "getMedicalChangeRequestConditionsAllergy",
      "summary": "Get Medical Change Request Conditions Allergy",
      "description": "Retrieves all of the instances of ``, the relation `conditionsAllergy` of `medicalChangeConditionAllergy`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalChangeConditionAllergy' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalChangeConditionAllergy' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalChangeConditionAllergy"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalChangeConditionAllergy",
                        "id": "1",
                        "attributes": {
                          "name": "Allergy",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "allergyName": "Dust allergy",
                          "severity": "moderate",
                          "isPrescribedAntihistamine": false,
                          "isPrescribedEpiPen": false,
                          "hasEpiPenRegistered": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionAllergy",
                        "id": "1",
                        "attributes": {
                          "name": "Allergy",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "allergyName": "Dust allergy",
                          "severity": "moderate",
                          "isPrescribedAntihistamine": false,
                          "isPrescribedEpiPen": false,
                          "hasEpiPenRegistered": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionAllergy",
                        "id": "1",
                        "attributes": {
                          "name": "Allergy",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "allergyName": "Dust allergy",
                          "severity": "moderate",
                          "isPrescribedAntihistamine": false,
                          "isPrescribedEpiPen": false,
                          "hasEpiPenRegistered": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalChangeRequestConditionAllergy",
      "summary": "Post Medical Change Request Condition Allergy",
      "description": "Adds condition allergy details to a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionAllergy`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `allergyName` → String Name of the allergy. [optional] [example: \"Dust allergy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `severity` → String Should be one of the following values: not stated, mild, moderate, severe, life threatening. It'll accept any string but those won't work correctly in the UI. [optional] [example: \"mild\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `isPrescribedAntihistamine` → Boolean Has been Prescribed with Antihistamine [example: FALSE]\n   * `isPrescribedEpiPen` → Boolean Has an Epipen Adrenaline Auto-injector been Prescribed [example: FALSE]\n   * `hasEpiPenRegistered` → Boolean Has been registered with EpiClub [example: FALSE]\n * Relationships\n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionAllergy`. ",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medical change requests to which a condition ALLERGY should be allergyed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "allergyName": {
                              "type": "string",
                              "description": "String Name of the allergy. [example: \"Dust allergy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "severity": {
                              "type": "string",
                              "description": "String Should be one of the following values: not stated, mild, moderate, severe, life threatening. It'll accept any string but those won't work correctly in the UI. [example: \"mild\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "isPrescribedAntihistamine": {
                              "type": "boolean",
                              "description": "Boolean Has been Prescribed with Antihistamine [example: FALSE]"
                            },
                            "isPrescribedEpiPen": {
                              "type": "boolean",
                              "description": "Boolean Has an Epipen Adrenaline Auto-injector been Prescribed [example: FALSE]"
                            },
                            "hasEpiPenRegistered": {
                              "type": "boolean",
                              "description": "Boolean Has been registered with EpiClub [example: FALSE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionAllergy",
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "isMarkedForDeletion": true,
                      "details": "Lorem ipsum dolor",
                      "allergyName": "Dust allergy",
                      "severity": "mild",
                      "isPrescribedAntihistamine": false,
                      "isPrescribedEpiPen": false,
                      "hasEpiPenRegistered": false
                    },
                    "relationships": {
                      "enrolmentCondition": {
                        "data": {
                          "id": 1,
                          "type": "medicalConditionAllergy"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionAllergy' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionAllergy"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionAllergy",
                      "id": "1",
                      "attributes": {
                        "name": "Allergy",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "allergyName": "Dust allergy",
                        "severity": "moderate",
                        "isPrescribedAntihistamine": false,
                        "isPrescribedEpiPen": false,
                        "hasEpiPenRegistered": false,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-allergy/{conditionId}": {
    "get": {
      "operationId": "getMedicalChangeRequestConditionAllergy",
      "summary": "Get Medical Change Request Condition Allergy",
      "description": "Retrieves a single instances of medicalChangeConditionAllergy based on the specified ID.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionAllergy to retrieve, must belong to the specific medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionAllergy' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionAllergy"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionAllergy",
                      "id": "1",
                      "attributes": {
                        "name": "Allergy",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "allergyName": "Dust allergy",
                        "severity": "moderate",
                        "isPrescribedAntihistamine": false,
                        "isPrescribedEpiPen": false,
                        "hasEpiPenRegistered": false,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchMedicalChangeRequestCondition",
      "summary": "Patch Medical Change Request Condition",
      "description": "Updates existing `medicalChangeConditionAllergy` details of a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionAllergy`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `allergyName` → String Name of the allergy. [optional] [example: \"Dust allergy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `severity` → String Should be one of the following values: not stated, mild, moderate, severe, life threatening. It'll accept any string but those won't work correctly in the UI. [optional] [example: \"mild\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `isPrescribedAntihistamine` → Boolean Has been Prescribed with Antihistamine [example: FALSE]\n   * `isPrescribedEpiPen` → Boolean Has an Epipen Adrenaline Auto-injector been Prescribed [example: FALSE]\n   * `hasEpiPenRegistered` → Boolean Has been registered with EpiClub [example: FALSE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of `medicalChangeRequest` of which `medicalChangeConditionAllergy` should be modified. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the `medicalChangeConditionAllergy` to modify, must belong to the specified `medicalChangeRequest` [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "allergyName": {
                              "type": "string",
                              "description": "String Name of the allergy. [optional] [example: \"Dust allergy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "severity": {
                              "type": "string",
                              "description": "String Should be one of the following values: not stated, mild, moderate, severe, life threatening. It'll accept any string but those won't work correctly in the UI. [optional] [example: \"mild\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "isPrescribedAntihistamine": {
                              "type": "boolean",
                              "description": "Boolean Has been Prescribed with Antihistamine [optional] [example: FALSE]"
                            },
                            "isPrescribedEpiPen": {
                              "type": "boolean",
                              "description": "Boolean Has an Epipen Adrenaline Auto-injector been Prescribed [optional] [example: FALSE]"
                            },
                            "hasEpiPenRegistered": {
                              "type": "boolean",
                              "description": "Boolean Has been registered with EpiClub [optional] [example: FALSE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionAllergy",
                    "id": 1,
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "details": "Lorem ipsum dolor",
                      "allergyName": "Dust allergy",
                      "severity": "mild",
                      "isPrescribedAntihistamine": false,
                      "isPrescribedEpiPen": false,
                      "hasEpiPenRegistered": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionAllergy' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionAllergy"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionAllergy",
                      "id": "1",
                      "attributes": {
                        "name": "Allergy",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "allergyName": "Dust allergy",
                        "severity": "moderate",
                        "isPrescribedAntihistamine": false,
                        "isPrescribedEpiPen": false,
                        "hasEpiPenRegistered": false,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteMedicalChangeRequestConditionAllergy",
      "summary": "Delete Medical Change Request Condition Allergy",
      "description": "Removes existing 'medicalChangeConditionAllergy' details of a yet-unapproved 'medicalChangeRequest'",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medicalChangeRequest of which condition should be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionAllergy belonging to the medicalChangeRequest to be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-allergy/{conditionId}/care-plan-file": {
    "get": {
      "operationId": "getMedicalChangeRequestConditionAllergyCarePlanFile",
      "summary": "Get Medical Change Request Condition Allergy Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionAllergy which care plan file to retrieve [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalChangeRequestConditionAllergyCarePlanFile",
      "summary": "Post Medical Change Request Condition Allergy Care Plan File",
      "description": "Attachs a care plan file to a medical condition submission, provided no file was uploaded yet. The file should be uploaded via 'multipart/form-data' and should be sent under key 'carePlan'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionAllergy which care plan file to retrieve [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "File upload was successful"
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-asthma": {
    "get": {
      "operationId": "getMedicalChangeRequestConditionsAsthma",
      "summary": "Get Medical Change Request Conditions Asthma",
      "description": "Retrieves all of the instances of ``, the relation `conditionsAsthma` of `medicalChangeConditionAsthma`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalChangeConditionAsthma' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalChangeConditionAsthma' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalChangeConditionAsthma"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalChangeConditionAsthma",
                        "id": "1",
                        "attributes": {
                          "name": "Asthma",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "severity": "moderate",
                          "isPrescribedSalbutamol": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionAsthma",
                        "id": "1",
                        "attributes": {
                          "name": "Asthma",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "severity": "moderate",
                          "isPrescribedSalbutamol": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionAsthma",
                        "id": "1",
                        "attributes": {
                          "name": "Asthma",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "severity": "moderate",
                          "isPrescribedSalbutamol": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalChangeRequestConditionAsthma",
      "summary": "Post Medical Change Request Condition Asthma",
      "description": "Asthmas condition asthma details to a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionAsthma`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `severity` → String {DESCRIPTION-MISSING} [optional] [example: \"mild\"] \nValue constraints:\nAllowed values: \"mild\", \"moderate\", \"severe\"\n   * `isPrescribedSalbutamol` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n * Relationships\n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionAsthma`. ",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medical change requests to which a condition ASTHMA should be asthmaed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "severity": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"mild\"] \nValue constraints:\nAllowed values: \"mild\", \"moderate\", \"severe\""
                            },
                            "isPrescribedSalbutamol": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionAsthma",
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "isMarkedForDeletion": true,
                      "details": "Lorem ipsum dolor",
                      "severity": "mild",
                      "isPrescribedSalbutamol": true
                    },
                    "relationships": {
                      "enrolmentCondition": {
                        "data": {
                          "id": 1,
                          "type": "medicalConditionAsthma"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionAsthma' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionAsthma"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionAsthma",
                      "id": "1",
                      "attributes": {
                        "name": "Asthma",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "severity": "moderate",
                        "isPrescribedSalbutamol": false,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-asthma/{conditionId}": {
    "get": {
      "operationId": "getMedicalChangeRequestConditionAsthma",
      "summary": "Get Medical Change Request Condition Asthma",
      "description": "Retrieves a single instances of medicalChangeConditionAsthma based on the specified ID.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionAsthma to retrieve, must belong to the specific medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionAsthma' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionAsthma"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionAsthma",
                      "id": "1",
                      "attributes": {
                        "name": "Asthma",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "severity": "moderate",
                        "isPrescribedSalbutamol": false,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchMedicalChangeRequestConditionAsthma",
      "summary": "Patch Medical Change Request Condition Asthma",
      "description": "Updates existing `medicalChangeConditionAsthma` details of a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionAsthma`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `severity` → String {DESCRIPTION-MISSING} [optional] [example: \"mild\"] \nValue constraints:\nAllowed values: \"mild\", \"moderate\", \"severe\"\n   * `isPrescribedSalbutamol` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of `medicalChangeRequest` of which `medicalChangeConditionAsthma` should be modified. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the `medicalChangeConditionAsthma` to modify, must belong to the specified `medicalChangeRequest` [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "severity": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"mild\"] \nValue constraints:\nAllowed values: \"mild\", \"moderate\", \"severe\""
                            },
                            "isPrescribedSalbutamol": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionAsthma",
                    "id": 1,
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "details": "Lorem ipsum dolor",
                      "severity": "mild",
                      "isPrescribedSalbutamol": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionAsthma' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionAsthma"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionAsthma",
                      "id": "1",
                      "attributes": {
                        "name": "Asthma",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "severity": "moderate",
                        "isPrescribedSalbutamol": false,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteMedicalChangeRequestConditionAsthma",
      "summary": "Delete Medical Change Request Condition Asthma",
      "description": "Removes existing 'medicalChangeConditionAsthma' details of a yet-unapproved 'medicalChangeRequest'",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medicalChangeRequest of which condition should be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionAsthma belonging to the medicalChangeRequest to be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-asthma/{conditionId}/care-plan-file": {
    "get": {
      "operationId": "getMedicalChangeRequestConditionAsthmaCarePlanFile",
      "summary": "Get Medical Change Request Condition Asthma Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionAsthma which care plan file to retrieve [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalChangeRequestConditionAsthmaCarePlanFile",
      "summary": "Post Medical Change Request Condition Asthma Care Plan File",
      "description": "Attachs a care plan file to a medical condition submission, provided no file was uploaded yet. The file should be uploaded via 'multipart/form-data' and should be sent under key 'carePlan'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionAsthma which care plan file to retrieve [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "File upload was successful"
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-diabetes": {
    "post": {
      "operationId": "postMedicalChangeRequestConditionDiabetes",
      "summary": "Post Medical Change Request Condition Diabetes",
      "description": "Diabetess condition diabetes details to a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionDiabetes`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `hasInsulinInjections` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasInsulinPump` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasGlucagon` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n * Relationships\n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionDiabetes`. ",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medical change requests to which a condition DIABETES should be diabetesed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "hasInsulinInjections": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            },
                            "hasInsulinPump": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            },
                            "hasGlucagon": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionDiabetes",
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "isMarkedForDeletion": true,
                      "details": "Lorem ipsum dolor",
                      "hasInsulinInjections": true,
                      "hasInsulinPump": true,
                      "hasGlucagon": true
                    },
                    "relationships": {
                      "enrolmentCondition": {
                        "data": {
                          "id": 1,
                          "type": "medicalConditionDiabetes"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionDiabetes' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionDiabetes"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionDiabetes",
                      "id": "1",
                      "attributes": {
                        "name": "Diabetes",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "hasInsulinInjections": false,
                        "hasInsulinPump": false,
                        "hasGlucagon": false,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangeRequestConditionsDiabetes",
      "summary": "Get Medical Change Request Conditions Diabetes",
      "description": "Retrieves all of the instances of ``, the relation `conditionsDiabetes` of `medicalChangeConditionDiabetes`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalChangeConditionDiabetes' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalChangeConditionDiabetes' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalChangeConditionDiabetes"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalChangeConditionDiabetes",
                        "id": "1",
                        "attributes": {
                          "name": "Diabetes",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "hasInsulinInjections": false,
                          "hasInsulinPump": false,
                          "hasGlucagon": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionDiabetes",
                        "id": "1",
                        "attributes": {
                          "name": "Diabetes",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "hasInsulinInjections": false,
                          "hasInsulinPump": false,
                          "hasGlucagon": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionDiabetes",
                        "id": "1",
                        "attributes": {
                          "name": "Diabetes",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "hasInsulinInjections": false,
                          "hasInsulinPump": false,
                          "hasGlucagon": false,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-diabetes/{conditionId}": {
    "get": {
      "operationId": "getMedicalChangeRequestConditionDiabetes",
      "summary": "Get Medical Change Request Condition Diabetes",
      "description": "Retrieves a single instances of medicalChangeConditionDiabetes based on the specified ID.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionDiabetes to retrieve, must belong to the specific medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionDiabetes' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionDiabetes"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionDiabetes",
                      "id": "1",
                      "attributes": {
                        "name": "Diabetes",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "hasInsulinInjections": false,
                        "hasInsulinPump": false,
                        "hasGlucagon": false,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchMedicalChangeRequestConditionDiabetes",
      "summary": "Patch Medical Change Request Condition Diabetes",
      "description": "Updates existing `medicalChangeConditionDiabetes` details of a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionDiabetes`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `hasInsulinInjections` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasInsulinPump` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasGlucagon` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of `medicalChangeRequest` of which `medicalChangeConditionDiabetes` should be modified. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the `medicalChangeConditionDiabetes` to modify, must belong to the specified `medicalChangeRequest` [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "hasInsulinInjections": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "hasInsulinPump": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "hasGlucagon": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionDiabetes",
                    "id": 1,
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "details": "Lorem ipsum dolor",
                      "hasInsulinInjections": true,
                      "hasInsulinPump": true,
                      "hasGlucagon": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionDiabetes' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionDiabetes"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionDiabetes",
                      "id": "1",
                      "attributes": {
                        "name": "Diabetes",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "hasInsulinInjections": false,
                        "hasInsulinPump": false,
                        "hasGlucagon": false,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteMedicalChangeRequestConditionDiabetes",
      "summary": "Delete Medical Change Request Condition Diabetes",
      "description": "Removes existing 'medicalChangeConditionDiabetes' details of a yet-unapproved 'medicalChangeRequest'",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medicalChangeRequest of which condition should be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionDiabetes belonging to the medicalChangeRequest to be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-diabetes/{conditionId}/care-plan-file": {
    "get": {
      "operationId": "getMedicalChangeRequestConditionDiabetesCarePlanFile",
      "summary": "Get Medical Change Request Condition Diabetes Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionDiabetes which care plan file to retrieve [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalChangeRequestConditionDiabetesCarePlanFile",
      "summary": "Post Medical Change Request Condition Diabetes Care Plan File",
      "description": "Attachs a care plan file to a medical condition submission, provided no file was uploaded yet. The file should be uploaded via 'multipart/form-data' and should be sent under key 'carePlan'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionDiabetes which care plan file to retrieve [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "File upload was successful"
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-epilepsy": {
    "post": {
      "operationId": "postMedicalChangeRequestConditionEpilepsy",
      "summary": "Post Medical Change Request Condition Epilepsy",
      "description": "Epilepsys condition epilepsy details to a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionEpilepsy`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `type` → String {DESCRIPTION-MISSING} [optional] [example: \"Random epilepsy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n * Relationships\n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionEpilepsy`. ",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medical change requests to which a condition EPILEPSY should be epilepsyed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "type": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"Random epilepsy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionEpilepsy",
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "isMarkedForDeletion": true,
                      "details": "Lorem ipsum dolor",
                      "type": "Random epilepsy"
                    },
                    "relationships": {
                      "enrolmentCondition": {
                        "data": {
                          "id": 1,
                          "type": "medicalConditionEpilepsy"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionEpilepsy' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionEpilepsy"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionEpilepsy",
                      "id": "1",
                      "attributes": {
                        "name": "Epilepsy",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "type": "unknown",
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangeRequestConditionsEpilepsy",
      "summary": "Get Medical Change Request Conditions Epilepsy",
      "description": "Retrieves all of the instances of ``, the relation `conditionsEpilepsy` of `medicalChangeConditionEpilepsy`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalChangeConditionEpilepsy' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalChangeConditionEpilepsy' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalChangeConditionEpilepsy"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalChangeConditionEpilepsy",
                        "id": "1",
                        "attributes": {
                          "name": "Epilepsy",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "type": "unknown",
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionEpilepsy",
                        "id": "1",
                        "attributes": {
                          "name": "Epilepsy",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "type": "unknown",
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionEpilepsy",
                        "id": "1",
                        "attributes": {
                          "name": "Epilepsy",
                          "details": null,
                          "additionalInformation": null,
                          "hasCarePlanProvided": false,
                          "type": "unknown",
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-epilepsy/{conditionId}": {
    "delete": {
      "operationId": "deleteMedicalChangeRequestConditionEpilepsy",
      "summary": "Delete Medical Change Request Condition Epilepsy",
      "description": "Removes existing 'medicalChangeConditionEpilepsy' details of a yet-unapproved 'medicalChangeRequest'",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medicalChangeRequest of which condition should be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionEpilepsy belonging to the medicalChangeRequest to be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    },
    "patch": {
      "operationId": "patchMedicalChangeRequestConditionEpilepsy",
      "summary": "Patch Medical Change Request Condition Epilepsy",
      "description": "Updates existing `medicalChangeConditionEpilepsy` details of a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionEpilepsy`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `type` → String {DESCRIPTION-MISSING} [optional] [example: \"Random epilepsy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of `medicalChangeRequest` of which `medicalChangeConditionEpilepsy` should be modified. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the `medicalChangeConditionEpilepsy` to modify, must belong to the specified `medicalChangeRequest` [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "type": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"Random epilepsy\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionEpilepsy",
                    "id": 1,
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "details": "Lorem ipsum dolor",
                      "type": "Random epilepsy"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionEpilepsy' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionEpilepsy"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionEpilepsy",
                      "id": "1",
                      "attributes": {
                        "name": "Epilepsy",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "type": "unknown",
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangeRequestConditionEpilepsy",
      "summary": "Get Medical Change Request Condition Epilepsy",
      "description": "Retrieves a single instances of medicalChangeConditionEpilepsy based on the specified ID.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionEpilepsy to retrieve, must belong to the specific medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionEpilepsy' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionEpilepsy"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionEpilepsy",
                      "id": "1",
                      "attributes": {
                        "name": "Epilepsy",
                        "details": null,
                        "additionalInformation": null,
                        "hasCarePlanProvided": false,
                        "type": "unknown",
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-epilepsy/{conditionId}/care-plan-file": {
    "post": {
      "operationId": "postMedicalChangeRequestConditionEpilepsyCarePlanFile",
      "summary": "Post Medical Change Request Condition Epilepsy Care Plan File",
      "description": "Attachs a care plan file to a medical condition submission, provided no file was uploaded yet. The file should be uploaded via 'multipart/form-data' and should be sent under key 'carePlan'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionEpilepsy which care plan file to retrieve [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "File upload was successful"
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangeRequestConditionEpilepsyCarePlanFile",
      "summary": "Get Medical Change Request Condition Epilepsy Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionEpilepsy which care plan file to retrieve [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-other": {
    "get": {
      "operationId": "getMedicalChangeRequestConditionsOther",
      "summary": "Get Medical Change Request Conditions Other",
      "description": "Retrieves all of the instances of ``, the relation `conditionsOther` of `medicalChangeConditionOther`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalChangeConditionOther' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalChangeConditionOther' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalChangeConditionOther"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalChangeConditionOther",
                        "id": "1",
                        "attributes": {
                          "hasCarePlanProvided": false,
                          "name": "Chronic Sneezing",
                          "details": "Random sneezing bouts",
                          "additionalInformation": null,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionOther",
                        "id": "1",
                        "attributes": {
                          "hasCarePlanProvided": false,
                          "name": "Chronic Sneezing",
                          "details": "Random sneezing bouts",
                          "additionalInformation": null,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      },
                      {
                        "type": "medicalChangeConditionOther",
                        "id": "1",
                        "attributes": {
                          "hasCarePlanProvided": false,
                          "name": "Chronic Sneezing",
                          "details": "Random sneezing bouts",
                          "additionalInformation": null,
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "changeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-condition/1",
                          "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalChangeRequestConditionOther",
      "summary": "Post Medical Change Request Condition Other",
      "description": "Others condition other details to a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionOther`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `isMarkedForDeletion` → Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `name` → String Name for the condition. it cannot be any of the built-in custom types (Add, Asthma, Epilepsy, etc). [example: \"Chronic sleep deprivation\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n * Relationships\n   * `enrolmentCondition` → [optional] [single] expected type is `medicalConditionOther`. ",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medical change requests to which a condition OTHER should be othered. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentCondition` is required, all other attributes are unnecessary and on approval the referenced condition will be deleted. [optional] [default: false] [example: TRUE]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "name": {
                              "type": "string",
                              "description": "String Name for the condition. it cannot be any of the built-in custom types (Add, Asthma, Epilepsy, etc). [example: \"Chronic sleep deprivation\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentCondition": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionOther",
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "isMarkedForDeletion": true,
                      "details": "Lorem ipsum dolor",
                      "name": "Chronic sleep deprivation"
                    },
                    "relationships": {
                      "enrolmentCondition": {
                        "data": {
                          "id": 1,
                          "type": "medicalConditionOther"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionOther' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionOther"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionOther",
                      "id": "1",
                      "attributes": {
                        "hasCarePlanProvided": false,
                        "name": "Chronic Sneezing",
                        "details": "Random sneezing bouts",
                        "additionalInformation": null,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-other/{conditionId}": {
    "delete": {
      "operationId": "deleteMedicalChangeRequestConditionOther",
      "summary": "Delete Medical Change Request Condition Other",
      "description": "Removes existing 'medicalChangeConditionOther' details of a yet-unapproved 'medicalChangeRequest'",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medicalChangeRequest of which condition should be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionOther belonging to the medicalChangeRequest to be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangeRequestConditionOther",
      "summary": "Get Medical Change Request Condition Other",
      "description": "Retrieves a single instances of medicalChangeConditionOther based on the specified ID.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionOther to retrieve, must belong to the specific medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionOther' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionOther"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionOther",
                      "id": "1",
                      "attributes": {
                        "hasCarePlanProvided": false,
                        "name": "Chronic Sneezing",
                        "details": "Random sneezing bouts",
                        "additionalInformation": null,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchMedicalChangeRequestConditionOther",
      "summary": "Patch Medical Change Request Condition Other",
      "description": "Updates existing `medicalChangeConditionOther` details of a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeConditionOther`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `additionalInformation` → String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]\n   * `details` → String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive\n   * `name` → String Name for the condition. it cannot be any of the built-in custom types (Add, Asthma, Epilepsy, etc). [example: \"Chronic sleep deprivation\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of `medicalChangeRequest` of which `medicalChangeConditionOther` should be modified. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the `medicalChangeConditionOther` to modify, must belong to the specified `medicalChangeRequest` [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "additionalInformation": {
                              "type": "string",
                              "description": "String Additional information that can be attached to this condition. [optional] [default: \"\"] [example: \"Condition is serious\"]"
                            },
                            "details": {
                              "type": "string",
                              "description": "String Additional detail about the condition [optional] [default: \"\"] [example: \"Lorem ipsum dolor\"] \nValue constraints:\nLength must be between 1 and 65025 characters, inclusive"
                            },
                            "name": {
                              "type": "string",
                              "description": "String Name for the condition. it cannot be any of the built-in custom types (Add, Asthma, Epilepsy, etc). [optional] [example: \"Chronic sleep deprivation\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeConditionOther",
                    "id": 1,
                    "attributes": {
                      "additionalInformation": "Condition is serious",
                      "details": "Lorem ipsum dolor",
                      "name": "Chronic sleep deprivation"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeConditionOther' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeConditionOther"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeConditionOther",
                      "id": "1",
                      "attributes": {
                        "hasCarePlanProvided": false,
                        "name": "Chronic Sneezing",
                        "details": "Random sneezing bouts",
                        "additionalInformation": null,
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "changeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-condition/1",
                        "carePlanFile": "/v1/portal/medical-change-condition/1/care-plan-file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/condition-other/{conditionId}/care-plan-file": {
    "get": {
      "operationId": "getMedicalChangeRequestConditionOtherCarePlanFile",
      "summary": "Get Medical Change Request Condition Other Care Plan File",
      "description": "Returns the care plan file of the condition",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionOther which care plan file to retrieve [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the care plan file",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalChangeRequestConditionOtherCarePlanFile",
      "summary": "Post Medical Change Request Condition Other Care Plan File",
      "description": "Attachs a care plan file to a medical condition submission, provided no file was uploaded yet. The file should be uploaded via 'multipart/form-data' and should be sent under key 'carePlan'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "conditionId",
          "required": true,
          "description": "Number ID of the medicalChangeConditionOther which care plan file to retrieve [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "File upload was successful"
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/doctor": {
    "get": {
      "operationId": "getMedicalChangeRequestDoctors",
      "summary": "Get Medical Change Request Doctors",
      "description": "Retrieves all of the instances of ``, the relation `doctors` of `medicalChangeDoctor`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalChangeDoctor' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalChangeDoctor' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalChangeDoctor"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalChangeDoctor",
                        "id": "1",
                        "attributes": {
                          "type": "dentist",
                          "name": "John",
                          "practiceName": null,
                          "phone": "(03) 8070 5665",
                          "address": null,
                          "consentToContact": false,
                          "isMarkedForDeletion": false
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-request/1/doctor/1"
                        }
                      },
                      {
                        "type": "medicalChangeDoctor",
                        "id": "1",
                        "attributes": {
                          "type": "dentist",
                          "name": "John",
                          "practiceName": null,
                          "phone": "(03) 8070 5665",
                          "address": null,
                          "consentToContact": false,
                          "isMarkedForDeletion": false
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-request/1/doctor/1"
                        }
                      },
                      {
                        "type": "medicalChangeDoctor",
                        "id": "1",
                        "attributes": {
                          "type": "dentist",
                          "name": "John",
                          "practiceName": null,
                          "phone": "(03) 8070 5665",
                          "address": null,
                          "consentToContact": false,
                          "isMarkedForDeletion": false
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-request/1/doctor/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalChangeRequestDoctor",
      "summary": "Post Medical Change Request Doctor",
      "description": "Adds doctor details to a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeDoctor`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `type` → String Type of the doctor [optional] [example: \"other\"] \nValue constraints:\nAllowed values: \"other\", \"gp\", \"specialist\", \"dentist\"\n   * `name` → String Name of the doctor. [optional] [example: \"Dr John Doe\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `practiceName` → String Name of the doctor's practice. [optional] [example: \"Doe's Laryngology\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `phone` → String Phone to the doctor. [optional] [example: \"+48 123-123-123\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `address` → String Address of the doctor. [optional] [example: \"Doctor Street 73/12, Medicalville\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `consentToContact` → Boolean Whether the doctor has given permission to be contacted by school. [example: TRUE]\n   * `isMarkedForDeletion` → Boolean If true `affectedDoctor` is required, all other attributes are unnecessary and on approval the referenced doctor will be deleted. [optional] [default: false] [example: TRUE]\n * Relationships\n   * `affectedDoctor` → [optional] [single] expected type is `doctor`. When provided this medical change will modify the affected doctor rather than create a new record.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medical change requests to which a doctor should be added. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "String Type of the doctor [optional] [example: \"other\"] \nValue constraints:\nAllowed values: \"other\", \"gp\", \"specialist\", \"dentist\""
                            },
                            "name": {
                              "type": "string",
                              "description": "String Name of the doctor. [optional] [example: \"Dr John Doe\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "practiceName": {
                              "type": "string",
                              "description": "String Name of the doctor's practice. [optional] [example: \"Doe's Laryngology\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "phone": {
                              "type": "string",
                              "description": "String Phone to the doctor. [optional] [example: \"+48 123-123-123\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "address": {
                              "type": "string",
                              "description": "String Address of the doctor. [optional] [example: \"Doctor Street 73/12, Medicalville\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "consentToContact": {
                              "type": "boolean",
                              "description": "Boolean Whether the doctor has given permission to be contacted by school. [optional] [example: TRUE]"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `affectedDoctor` is required, all other attributes are unnecessary and on approval the referenced doctor will be deleted. [optional] [default: false] [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "affectedDoctor": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeDoctor",
                    "attributes": {
                      "type": "other",
                      "name": "Dr John Doe",
                      "practiceName": "Doe's Laryngology",
                      "phone": "+48 123-123-123",
                      "address": "Doctor Street 73/12, Medicalville",
                      "consentToContact": true,
                      "isMarkedForDeletion": true
                    },
                    "relationships": {
                      "affectedDoctor": {
                        "data": {
                          "id": 1,
                          "type": "doctor"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeDoctor' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeDoctor"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeDoctor",
                      "id": "1",
                      "attributes": {
                        "type": "dentist",
                        "name": "John",
                        "practiceName": null,
                        "phone": "(03) 8070 5665",
                        "address": null,
                        "consentToContact": false,
                        "isMarkedForDeletion": false
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-request/1/doctor/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/doctor/{doctorId}": {
    "delete": {
      "operationId": "deleteMedicalChangeRequestDoctor",
      "summary": "Delete Medical Change Request Doctor",
      "description": "Removes an existing doctor details of a yet-unapproved medicalChangeRequest",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medical change requests of which doctor should be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "doctorId",
          "required": true,
          "description": "Number ID of the doctor belonging to the medicalChangeRequest to be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangeRequestDoctor",
      "summary": "Get Medical Change Request Doctor",
      "description": "Retrieves a single instances of medicalChangeDoctor based on the specified ID.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "doctorId",
          "required": true,
          "description": "Number ID of the medicalChangeDoctor to retrieve, must belong to the specific medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeDoctor' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeDoctor"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeDoctor",
                      "id": "1",
                      "attributes": {
                        "type": "dentist",
                        "name": "John",
                        "practiceName": null,
                        "phone": "(03) 8070 5665",
                        "address": null,
                        "consentToContact": false,
                        "isMarkedForDeletion": false
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-request/1/doctor/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchMedicalChangeRequestDoctor",
      "summary": "Patch Medical Change Request Doctor",
      "description": "Updates existing `medicalChangeDoctor` details of a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeDoctor`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `type` → String Type of the doctor [optional] [example: \"other\"] \nValue constraints:\nAllowed values: \"other\", \"gp\", \"specialist\", \"dentist\"\n   * `name` → String Name of the doctor. [optional] [example: \"Dr John Doe\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `practiceName` → String Name of the doctor's practice. [optional] [example: \"Doe's Laryngology\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `phone` → String Phone to the doctor. [optional] [example: \"+48 123-123-123\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `address` → String Address of the doctor. [optional] [example: \"Doctor Street 73/12, Medicalville\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `consentToContact` → Boolean Whether the doctor has given permission to be contacted by school. [example: TRUE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of `medicalChangeRequest` of which `medicalChangeDoctor` should be modified. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "doctorId",
          "required": true,
          "description": "Number ID of the `medicalChangeDoctor` to modify, must belong to the specified `medicalChangeRequest` [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "String Type of the doctor [optional] [example: \"other\"] \nValue constraints:\nAllowed values: \"other\", \"gp\", \"specialist\", \"dentist\""
                            },
                            "name": {
                              "type": "string",
                              "description": "String Name of the doctor. [optional] [example: \"Dr John Doe\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "practiceName": {
                              "type": "string",
                              "description": "String Name of the doctor's practice. [optional] [example: \"Doe's Laryngology\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "phone": {
                              "type": "string",
                              "description": "String Phone to the doctor. [optional] [example: \"+48 123-123-123\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "address": {
                              "type": "string",
                              "description": "String Address of the doctor. [optional] [example: \"Doctor Street 73/12, Medicalville\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "consentToContact": {
                              "type": "boolean",
                              "description": "Boolean Whether the doctor has given permission to be contacted by school. [optional] [example: TRUE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeDoctor",
                    "id": 1,
                    "attributes": {
                      "type": "other",
                      "name": "Dr John Doe",
                      "practiceName": "Doe's Laryngology",
                      "phone": "+48 123-123-123",
                      "address": "Doctor Street 73/12, Medicalville",
                      "consentToContact": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeDoctor' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeDoctor"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeDoctor",
                      "id": "1",
                      "attributes": {
                        "type": "dentist",
                        "name": "John",
                        "practiceName": null,
                        "phone": "(03) 8070 5665",
                        "address": null,
                        "consentToContact": false,
                        "isMarkedForDeletion": false
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-request/1/doctor/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/misc": {
    "delete": {
      "operationId": "deleteMedicalChangeRequestMisc",
      "summary": "Delete Medical Change Request Misc",
      "description": "Removes an existing miscellaneous details of a yet-unapproved medical change request",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medical change requests of which miscellanous details should be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    },
    "patch": {
      "operationId": "patchMedicalChangeRequestMisc",
      "summary": "Patch Medical Change Request Misc",
      "description": "Updates existing miscellaneous details of a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeMisc`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `wasMedicationAdviceFormReceived` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `canOverCounterSalbutamol` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `canOverCounterParacetamol` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `canOverCounterIbuprofen` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `canOverCounterAntihistamine` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasParentAcknowledged` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasLongTermMedication` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `areVaccinationsUpToDate` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasMeaslesExclusion` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `lastDateOfTetanusInjection` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"] \nValue constraints:\nMaximum value: today [inclusive]\n   * `privateMedicalFundExpiryDate` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"]\n   * `medicareExpiryDate` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"]\n   * `ambulanceCoverProvider` → String {DESCRIPTION-MISSING} [optional] [example: \"Bupa HI Pty Ltd\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `medicareNumber` → String {DESCRIPTION-MISSING} [optional] [example: \"4173158231/1\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `medicarePositionOnCard` → String {DESCRIPTION-MISSING} [optional] [example: \"7\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `privateMedicalFund` → String {DESCRIPTION-MISSING} [optional] [example: \"ahm Health Insurance\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `privateMedicalFundNumber` → String {DESCRIPTION-MISSING} [optional] [example: \"1237124691\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `hasAmbulanceCover` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medical change requests of which miscellanous details should be modified. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "wasMedicationAdviceFormReceived": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "canOverCounterSalbutamol": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "canOverCounterParacetamol": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "canOverCounterIbuprofen": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "canOverCounterAntihistamine": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "hasParentAcknowledged": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "hasLongTermMedication": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "areVaccinationsUpToDate": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "hasMeaslesExclusion": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "lastDateOfTetanusInjection": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"] \nValue constraints:\nMaximum value: today [inclusive]"
                            },
                            "privateMedicalFundExpiryDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"]"
                            },
                            "medicareExpiryDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"]"
                            },
                            "ambulanceCoverProvider": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"Bupa HI Pty Ltd\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "medicareNumber": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"4173158231/1\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "medicarePositionOnCard": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"7\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "privateMedicalFund": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"ahm Health Insurance\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "privateMedicalFundNumber": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"1237124691\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "hasAmbulanceCover": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeMisc",
                    "attributes": {
                      "wasMedicationAdviceFormReceived": true,
                      "canOverCounterSalbutamol": true,
                      "canOverCounterParacetamol": true,
                      "canOverCounterIbuprofen": true,
                      "canOverCounterAntihistamine": true,
                      "hasParentAcknowledged": true,
                      "hasLongTermMedication": true,
                      "areVaccinationsUpToDate": true,
                      "hasMeaslesExclusion": true,
                      "lastDateOfTetanusInjection": "2016-01-01",
                      "privateMedicalFundExpiryDate": "2016-01-01",
                      "medicareExpiryDate": "2016-01-01",
                      "ambulanceCoverProvider": "Bupa HI Pty Ltd",
                      "medicareNumber": "4173158231/1",
                      "medicarePositionOnCard": "7",
                      "privateMedicalFund": "ahm Health Insurance",
                      "privateMedicalFundNumber": "1237124691",
                      "hasAmbulanceCover": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeMisc' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeMisc"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeMisc",
                      "id": "1",
                      "attributes": {
                        "hasLongTermMedication": false,
                        "wasMedicationAdviceFormReceived": false,
                        "lastDateOfTetanusInjection": "2017-01-01",
                        "canOverCounterMedicineSalbutamol": false,
                        "canOverCounterMedicineParacetamol": false,
                        "canOverCounterMedicineIbuprofen": false,
                        "canOverCounterMedicineAntihistamine": false,
                        "ambulanceCoverProvider": null,
                        "medicareNumber": null,
                        "medicareExpiryDate": null,
                        "medicarePositionOnCard": null,
                        "privateMedicalFund": null,
                        "privateMedicalFundNumber": null,
                        "privateMedicalFundExpiryDate": null,
                        "hasParentAcknowledged": false,
                        "areVaccinationsUpToDate": false,
                        "hasMeaslesExclusion": false,
                        "hasAmbulanceCover": false
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-request/1/misc"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getMedicalChangeRequestMisc",
      "summary": "Get Medical Change Request Misc",
      "description": "Retrieves a single instance of ``, the relation `misc` of `medicalChangeMisc`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalChangeMisc' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeMisc' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeMisc"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeMisc",
                      "id": "1",
                      "attributes": {
                        "hasLongTermMedication": false,
                        "wasMedicationAdviceFormReceived": false,
                        "lastDateOfTetanusInjection": "2017-01-01",
                        "canOverCounterMedicineSalbutamol": false,
                        "canOverCounterMedicineParacetamol": false,
                        "canOverCounterMedicineIbuprofen": false,
                        "canOverCounterMedicineAntihistamine": false,
                        "ambulanceCoverProvider": null,
                        "medicareNumber": null,
                        "medicareExpiryDate": null,
                        "medicarePositionOnCard": null,
                        "privateMedicalFund": null,
                        "privateMedicalFundNumber": null,
                        "privateMedicalFundExpiryDate": null,
                        "hasParentAcknowledged": false,
                        "areVaccinationsUpToDate": false,
                        "hasMeaslesExclusion": false,
                        "hasAmbulanceCover": false
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-request/1/misc"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalChangeRequestMisc",
      "summary": "Post Medical Change Request Misc",
      "description": "Adds miscellaneous details to a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeMisc`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `wasMedicationAdviceFormReceived` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `canOverCounterSalbutamol` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `canOverCounterParacetamol` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `canOverCounterIbuprofen` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `canOverCounterAntihistamine` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasParentAcknowledged` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasLongTermMedication` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `areVaccinationsUpToDate` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `hasMeaslesExclusion` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n   * `lastDateOfTetanusInjection` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"] \nValue constraints:\nMaximum value: today [inclusive]\n   * `privateMedicalFundExpiryDate` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"]\n   * `medicareExpiryDate` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"]\n   * `ambulanceCoverProvider` → String {DESCRIPTION-MISSING} [optional] [example: \"Bupa HI Pty Ltd\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `medicareNumber` → String {DESCRIPTION-MISSING} [optional] [example: \"4173158231/1\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `medicarePositionOnCard` → String {DESCRIPTION-MISSING} [optional] [example: \"7\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `privateMedicalFund` → String {DESCRIPTION-MISSING} [optional] [example: \"ahm Health Insurance\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `privateMedicalFundNumber` → String {DESCRIPTION-MISSING} [optional] [example: \"1237124691\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `hasAmbulanceCover` → Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medical change requests to which miscellanous details should be added. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "wasMedicationAdviceFormReceived": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "canOverCounterSalbutamol": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "canOverCounterParacetamol": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "canOverCounterIbuprofen": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "canOverCounterAntihistamine": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "hasParentAcknowledged": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "hasLongTermMedication": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "areVaccinationsUpToDate": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "hasMeaslesExclusion": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            },
                            "lastDateOfTetanusInjection": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"] \nValue constraints:\nMaximum value: today [inclusive]"
                            },
                            "privateMedicalFundExpiryDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"]"
                            },
                            "medicareExpiryDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [optional] [example: \"2016-01-01\"]"
                            },
                            "ambulanceCoverProvider": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"Bupa HI Pty Ltd\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "medicareNumber": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"4173158231/1\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "medicarePositionOnCard": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"7\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "privateMedicalFund": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"ahm Health Insurance\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "privateMedicalFundNumber": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [example: \"1237124691\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "hasAmbulanceCover": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [optional] [example: TRUE]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeMisc",
                    "attributes": {
                      "wasMedicationAdviceFormReceived": true,
                      "canOverCounterSalbutamol": true,
                      "canOverCounterParacetamol": true,
                      "canOverCounterIbuprofen": true,
                      "canOverCounterAntihistamine": true,
                      "hasParentAcknowledged": true,
                      "hasLongTermMedication": true,
                      "areVaccinationsUpToDate": true,
                      "hasMeaslesExclusion": true,
                      "lastDateOfTetanusInjection": "2016-01-01",
                      "privateMedicalFundExpiryDate": "2016-01-01",
                      "medicareExpiryDate": "2016-01-01",
                      "ambulanceCoverProvider": "Bupa HI Pty Ltd",
                      "medicareNumber": "4173158231/1",
                      "medicarePositionOnCard": "7",
                      "privateMedicalFund": "ahm Health Insurance",
                      "privateMedicalFundNumber": "1237124691",
                      "hasAmbulanceCover": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeMisc' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeMisc"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeMisc",
                      "id": "1",
                      "attributes": {
                        "hasLongTermMedication": false,
                        "wasMedicationAdviceFormReceived": false,
                        "lastDateOfTetanusInjection": "2017-01-01",
                        "canOverCounterMedicineSalbutamol": false,
                        "canOverCounterMedicineParacetamol": false,
                        "canOverCounterMedicineIbuprofen": false,
                        "canOverCounterMedicineAntihistamine": false,
                        "ambulanceCoverProvider": null,
                        "medicareNumber": null,
                        "medicareExpiryDate": null,
                        "medicarePositionOnCard": null,
                        "privateMedicalFund": null,
                        "privateMedicalFundNumber": null,
                        "privateMedicalFundExpiryDate": null,
                        "hasParentAcknowledged": false,
                        "areVaccinationsUpToDate": false,
                        "hasMeaslesExclusion": false,
                        "hasAmbulanceCover": false
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-request/1/misc"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/vaccination": {
    "get": {
      "operationId": "getMedicalChangeRequestVaccinations",
      "summary": "Get Medical Change Request Vaccinations",
      "description": "Retrieves all of the instances of ``, the relation `vaccinations` of `medicalChangeVaccination`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'medicalChangeVaccination' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'medicalChangeVaccination' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/medicalChangeVaccination"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "medicalChangeVaccination",
                        "id": "1",
                        "attributes": {
                          "name": "Smallpox",
                          "dateOfVaccination": "2018-01-01",
                          "comment": "Vaccination was done without any issues",
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "medicalChangeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-request/1/vaccination/1"
                        }
                      },
                      {
                        "type": "medicalChangeVaccination",
                        "id": "1",
                        "attributes": {
                          "name": "Smallpox",
                          "dateOfVaccination": "2018-01-01",
                          "comment": "Vaccination was done without any issues",
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "medicalChangeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-request/1/vaccination/1"
                        }
                      },
                      {
                        "type": "medicalChangeVaccination",
                        "id": "1",
                        "attributes": {
                          "name": "Smallpox",
                          "dateOfVaccination": "2018-01-01",
                          "comment": "Vaccination was done without any issues",
                          "isMarkedForDeletion": false
                        },
                        "relationships": {
                          "medicalChangeRequest": {
                            "data": {
                              "id": "1",
                              "type": "medicalChangeRequest"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/medical-change-request/1/vaccination/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postMedicalChangeRequestVaccination",
      "summary": "Post Medical Change Request Vaccination",
      "description": "Adds vaccination details to a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeVaccination`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `name` → String Name of the vaccine. [optional] [example: \"Placebon\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `dateOfVaccination` → Date (, eg. 20190102) Date of the vaccination [optional] [example: \"2015-01-01\"]\n   * `comment` → String Additional comments about the vaccination. [optional] [example: \"Vaccine does nothing, used for a medical trial\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive\n   * `isMarkedForDeletion` → Boolean If true `enrolmentVaccination` is required, all other attributes are unnecessary and on approval the referenced vaccination will be deleted. [optional] [default: false] [example: TRUE]\n * Relationships\n   * `enrolmentVaccination` → [optional] [single] expected type is `vaccination`. When provided this medical change will modify the affected vaccination rather than create a new record.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medical change requests to which a vaccination should be added. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "String Name of the vaccine. [example: \"Placebon\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "dateOfVaccination": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date of the vaccination [example: \"2015-01-01\"]"
                            },
                            "comment": {
                              "type": "string",
                              "description": "String Additional comments about the vaccination. [example: \"Vaccine does nothing, used for a medical trial\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive"
                            },
                            "isMarkedForDeletion": {
                              "type": "boolean",
                              "description": "Boolean If true `enrolmentVaccination` is required, all other attributes are unnecessary and on approval the referenced vaccination will be deleted. [optional] [default: false] [example: TRUE]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "enrolmentVaccination": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeVaccination",
                    "attributes": {
                      "name": "Placebon",
                      "dateOfVaccination": "2015-01-01",
                      "comment": "Vaccine does nothing, used for a medical trial",
                      "isMarkedForDeletion": true
                    },
                    "relationships": {
                      "enrolmentVaccination": {
                        "data": {
                          "id": 1,
                          "type": "vaccination"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeVaccination' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeVaccination"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeVaccination",
                      "id": "1",
                      "attributes": {
                        "name": "Smallpox",
                        "dateOfVaccination": "2018-01-01",
                        "comment": "Vaccination was done without any issues",
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "medicalChangeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-request/1/vaccination/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/medical-change-request/{id}/vaccination/{vaccinationId}": {
    "get": {
      "operationId": "getMedicalChangeRequestVaccination",
      "summary": "Get Medical Change Request Vaccination",
      "description": "Retrieves a single instances of medicalChangeVaccination based on the specified ID.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "vaccinationId",
          "required": true,
          "description": "Number ID of the medicalChangeVaccination to retrieve, must belong to the specific medicalChangeRequest [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeVaccination' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeVaccination"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeVaccination",
                      "id": "1",
                      "attributes": {
                        "name": "Smallpox",
                        "dateOfVaccination": "2018-01-01",
                        "comment": "Vaccination was done without any issues",
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "medicalChangeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-request/1/vaccination/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteMedicalChangeRequestVaccination",
      "summary": "Delete Medical Change Request Vaccination",
      "description": "deleteMedicalChangeRequestVaccination",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of medical change requests of which vaccination should be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "vaccinationId",
          "required": true,
          "description": "Number ID of the vaccination belonging to the medicalChangeRequest to be removed. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    },
    "patch": {
      "operationId": "patchMedicalChangeRequestVaccination",
      "summary": "Patch Medical Change Request Vaccination",
      "description": "Updates existing `medicalChangeVaccination` details of a yet-unapproved medical change request\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`medicalChangeVaccination`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `name` → String Name of the vaccine. [optional] [example: \"Placebon\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive\n   * `dateOfVaccination` → Date (, eg. 20190102) Date of the vaccination [optional] [example: \"2015-01-01\"]\n   * `comment` → String Additional comments about the vaccination. [optional] [example: \"Vaccine does nothing, used for a medical trial\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of `medicalChangeRequest` of which `medicalChangeVaccination` should be modified. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "vaccinationId",
          "required": true,
          "description": "Number ID of the `medicalChangeVaccination` to modify, must belong to the specified `medicalChangeRequest` [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "String Name of the vaccine. [optional] [example: \"Placebon\"] \nValue constraints:\nLength must be between 1 and 255 characters, inclusive"
                            },
                            "dateOfVaccination": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date of the vaccination [optional] [example: \"2015-01-01\"]"
                            },
                            "comment": {
                              "type": "string",
                              "description": "String Additional comments about the vaccination. [optional] [example: \"Vaccine does nothing, used for a medical trial\"] \nValue constraints:\nLength must be between 0 and 65536 characters, inclusive"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "medicalChangeVaccination",
                    "id": 1,
                    "attributes": {
                      "name": "Placebon",
                      "dateOfVaccination": "2015-01-01",
                      "comment": "Vaccine does nothing, used for a medical trial"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'medicalChangeVaccination' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/medicalChangeVaccination"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "medicalChangeVaccination",
                      "id": "1",
                      "attributes": {
                        "name": "Smallpox",
                        "dateOfVaccination": "2018-01-01",
                        "comment": "Vaccination was done without any issues",
                        "isMarkedForDeletion": false
                      },
                      "relationships": {
                        "medicalChangeRequest": {
                          "data": {
                            "id": "1",
                            "type": "medicalChangeRequest"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/medical-change-request/1/vaccination/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/student-enrolment-draft": {
    "get": {
      "operationId": "getStudentEnrolmentDrafts",
      "summary": "Get Student Enrolment Drafts",
      "description": "Retrieves a page of instances of `studentEnrolmentDraft`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "createdByIds",
          "required": false,
          "description": "String Comma-separated list of `createdBy` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentEnrolmentDraft' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentEnrolmentDraft"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentEnrolmentDraft",
                        "id": "1",
                        "attributes": {
                          "status": "Under Review",
                          "createdAt": "2021-04-21",
                          "data": "{\"test\":[\"value1\",\"value2\"]}"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/student-enrolment-draft/1"
                        }
                      },
                      {
                        "type": "studentEnrolmentDraft",
                        "id": "1",
                        "attributes": {
                          "status": "Under Review",
                          "createdAt": "2021-04-21",
                          "data": "{\"test\":[\"value1\",\"value2\"]}"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/student-enrolment-draft/1"
                        }
                      },
                      {
                        "type": "studentEnrolmentDraft",
                        "id": "1",
                        "attributes": {
                          "status": "Under Review",
                          "createdAt": "2021-04-21",
                          "data": "{\"test\":[\"value1\",\"value2\"]}"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/portal/student-enrolment-draft/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postStudentEnrolmentDraft",
      "summary": "Post Student Enrolment Draft",
      "description": "Registers a new student enrolment draft.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`studentEnrolmentDraft`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `data` → String Refer to the description of the `studentEnrolmentDraft` model for information what structure this attribute expects. [example: \"See description of `studentEnrolmentDraft` for actual example JSON\"]\n * Relationships\n   * `createdBy` → [optional] [single] expected type is `portalUser`. ",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "string",
                              "description": "String Refer to the description of the `studentEnrolmentDraft` model for information what structure this attribute expects. [example: \"See description of `studentEnrolmentDraft` for actual example JSON\"]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "createdBy": {
                              "description": "String [optional]",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "studentEnrolmentDraft",
                    "attributes": {
                      "data": "See description of `studentEnrolmentDraft` for actual example JSON"
                    },
                    "relationships": {
                      "createdBy": {
                        "data": {
                          "id": 1,
                          "type": "portalUser"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentEnrolmentDraft' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentEnrolmentDraft"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentEnrolmentDraft",
                      "id": "1",
                      "attributes": {
                        "status": "Under Review",
                        "createdAt": "2021-04-21",
                        "data": "{\"test\":[\"value1\",\"value2\"]}"
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/student-enrolment-draft/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/portal/student-enrolment-draft/{id}": {
    "get": {
      "operationId": "getStudentEnrolmentDraft",
      "summary": "Get Student Enrolment Draft",
      "description": "Retrieves a single instance of `studentEnrolmentDraft`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentEnrolmentDraft' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentEnrolmentDraft' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentEnrolmentDraft"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentEnrolmentDraft",
                      "id": "1",
                      "attributes": {
                        "status": "Under Review",
                        "createdAt": "2021-04-21",
                        "data": "{\"test\":[\"value1\",\"value2\"]}"
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/student-enrolment-draft/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchStudentEnrolmentDraft",
      "summary": "Patch Student Enrolment Draft",
      "description": "Method disabled.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`studentEnrolmentDraft`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `data` → String Refer to the description of the `studentEnrolmentDraft` model for information what structure this attribute expects. [example: \"See description of `studentEnrolmentDraft` for actual example JSON\"]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of 'studentEnrolmentDraft' to update.",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "string",
                              "description": "String Refer to the description of the `studentEnrolmentDraft` model for information what structure this attribute expects. [optional] [example: \"See description of `studentEnrolmentDraft` for actual example JSON\"]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "studentEnrolmentDraft",
                    "id": 1,
                    "attributes": {
                      "data": "See description of `studentEnrolmentDraft` for actual example JSON"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentEnrolmentDraft' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentEnrolmentDraft"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentEnrolmentDraft",
                      "id": "1",
                      "attributes": {
                        "status": "Under Review",
                        "createdAt": "2021-04-21",
                        "data": "{\"test\":[\"value1\",\"value2\"]}"
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/portal/student-enrolment-draft/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteStudentEnrolmentDraft",
      "summary": "Delete Student Enrolment Draft",
      "description": "Removes existing 'studentEnrolmentDraft' provided it is still in SUBMITTED status",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of 'studentEnrolmentDraft' to remove. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/portal/student-enrolment-draft/{id}/attachment": {
    "get": {
      "operationId": "getStudentEnrolmentDraftAttachments",
      "summary": "Get Student Enrolment Draft Attachments",
      "description": "Retrieves all of the instances of ``, the relation `attachments` of `studentDocument`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentDocument' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentDocument' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentDocument"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentDocument",
                        "id": "1",
                        "attributes": {
                          "fileName": null,
                          "isConfidential": true
                        },
                        "links": {
                          "self": "/v1/enrolments/student-document/1",
                          "file": "/v1/enrolments/student-document/1/file"
                        }
                      },
                      {
                        "type": "studentDocument",
                        "id": "1",
                        "attributes": {
                          "fileName": null,
                          "isConfidential": true
                        },
                        "links": {
                          "self": "/v1/enrolments/student-document/1",
                          "file": "/v1/enrolments/student-document/1/file"
                        }
                      },
                      {
                        "type": "studentDocument",
                        "id": "1",
                        "attributes": {
                          "fileName": null,
                          "isConfidential": true
                        },
                        "links": {
                          "self": "/v1/enrolments/student-document/1",
                          "file": "/v1/enrolments/student-document/1/file"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postStudentEnrolmentDraftAttachment",
      "summary": "Post Student Enrolment Draft Attachment",
      "description": "Adds a new 'studentDocument' to a 'studentEnrolmentDraft'. The file should be uploaded via 'multipart/form-data' and should be sent under key 'attachment'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentEnrolmentDraft' to which the attachment should be added. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "isConfidential",
          "required": false,
          "description": "Boolean Controls whether the newly created file should be confidential or not. [optional] [default: false]",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "in": "query",
          "name": "studentDocumentCategoryId",
          "required": false,
          "description": "Number Category to which this document belongs. [optional] [default: Oldest active category ID.]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentDocument' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentDocument"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentDocument",
                      "id": "1",
                      "attributes": {
                        "fileName": null,
                        "isConfidential": true
                      },
                      "links": {
                        "self": "/v1/enrolments/student-document/1",
                        "file": "/v1/enrolments/student-document/1/file"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/reports/student-academic-report": {
    "get": {
      "operationId": "getStudentAcademicReports",
      "summary": "Get Student Academic Reports",
      "description": "Retrieves a page of instances of `studentAcademicReport`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: period. [optional] [default: null] [example: \"period\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "studentIds",
          "required": false,
          "description": "String Comma-separated list of `student` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentAcademicReport' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentAcademicReport"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentAcademicReport",
                        "id": "1",
                        "attributes": {
                          "publishedDateTime": null,
                          "year": "2018",
                          "semester": "1",
                          "reportingPeriod": "First semester 2018",
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/reports/student-academic-report/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "studentAcademicReport",
                        "id": "1",
                        "attributes": {
                          "publishedDateTime": null,
                          "year": "2018",
                          "semester": "1",
                          "reportingPeriod": "First semester 2018",
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/reports/student-academic-report/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "studentAcademicReport",
                        "id": "1",
                        "attributes": {
                          "publishedDateTime": null,
                          "year": "2018",
                          "semester": "1",
                          "reportingPeriod": "First semester 2018",
                          "isActive": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/reports/student-academic-report/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/reports/student-academic-report-period": {
    "get": {
      "operationId": "getStudentAcademicReportPeriods",
      "summary": "Get Student Academic Report Periods",
      "description": "Retrieves a page of instances of `studentAcademicReportPeriod`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentAcademicReportPeriod' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentAcademicReportPeriod"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentAcademicReportPeriod",
                        "id": "1",
                        "attributes": {
                          "name": "First semester 2018",
                          "year": "2018",
                          "semester": "1"
                        },
                        "links": {
                          "self": "/v1/reports/student-academic-report-period/1"
                        }
                      },
                      {
                        "type": "studentAcademicReportPeriod",
                        "id": "1",
                        "attributes": {
                          "name": "First semester 2018",
                          "year": "2018",
                          "semester": "1"
                        },
                        "links": {
                          "self": "/v1/reports/student-academic-report-period/1"
                        }
                      },
                      {
                        "type": "studentAcademicReportPeriod",
                        "id": "1",
                        "attributes": {
                          "name": "First semester 2018",
                          "year": "2018",
                          "semester": "1"
                        },
                        "links": {
                          "self": "/v1/reports/student-academic-report-period/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/reports/student-academic-report-period/{id}": {
    "get": {
      "operationId": "getStudentAcademicReportPeriod",
      "summary": "Get Student Academic Report Period",
      "description": "Retrieves a single instance of `studentAcademicReportPeriod`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentAcademicReportPeriod' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentAcademicReportPeriod' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentAcademicReportPeriod"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentAcademicReportPeriod",
                      "id": "1",
                      "attributes": {
                        "name": "First semester 2018",
                        "year": "2018",
                        "semester": "1"
                      },
                      "links": {
                        "self": "/v1/reports/student-academic-report-period/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/reports/student-academic-report/{id}": {
    "get": {
      "operationId": "getStudentAcademicReport",
      "summary": "Get Student Academic Report",
      "description": "Retrieves a single instance of `studentAcademicReport`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentAcademicReport' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: period. [optional] [default: null] [example: \"period\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentAcademicReport' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentAcademicReport"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentAcademicReport",
                      "id": "1",
                      "attributes": {
                        "publishedDateTime": null,
                        "year": "2018",
                        "semester": "1",
                        "reportingPeriod": "First semester 2018",
                        "isActive": true
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/reports/student-academic-report/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/reports/student-academic-report/{id}/file": {
    "get": {
      "operationId": "getStudentAcademicReportFile",
      "summary": "Get Student Academic Report File",
      "description": "Returns the actual file of the given student academic report",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `studentAcademicReport` which file to retrieve",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the report requested",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/restapi/restapi-exception-log": {
    "get": {
      "operationId": "getRestapiExceptionLogs",
      "summary": "Get Restapi Exception Logs",
      "description": "Retrieves a page of instances of `restapiExceptionLog`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "path",
          "required": false,
          "description": "String `path` to filter by [optional] [example: \"/v1/enrolments/student?offset=212\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "from",
          "required": false,
          "description": "Date (Y-m-d H:i:s, eg. 20190102) Datetime from which to return exceptions. [optional] [example: \"2018-01-01 00:01:02\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "to",
          "required": false,
          "description": "Date (Y-m-d H:i:s, eg. 20190102) Datetime to which to return exceptions. [optional] [example: \"2018-12-01 23:40:32\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'restapiExceptionLog' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/restapiExceptionLog"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "restapiExceptionLog",
                        "id": "1",
                        "attributes": {
                          "type": "Exception",
                          "path": null,
                          "body": "Invalid argument",
                          "stacktrace": "#0 /homepages/10/d586858977/htdocs/phponline.com/index.php(99) : eval()'d code(10): func()\n#1 /homepages/10/d586858977/htdocs/phponline.com/index.php(99): eval()\n#2 {main}",
                          "previousExceptions": null,
                          "createdAt": {
                            "timestamp": 1618989781,
                            "iso8601": "2021-04-21T07:23:01+0000"
                          }
                        },
                        "links": {
                          "self": "/v1/webhooks/restapi-exception/1"
                        }
                      },
                      {
                        "type": "restapiExceptionLog",
                        "id": "1",
                        "attributes": {
                          "type": "Exception",
                          "path": null,
                          "body": "Invalid argument",
                          "stacktrace": "#0 /homepages/10/d586858977/htdocs/phponline.com/index.php(99) : eval()'d code(10): func()\n#1 /homepages/10/d586858977/htdocs/phponline.com/index.php(99): eval()\n#2 {main}",
                          "previousExceptions": null,
                          "createdAt": {
                            "timestamp": 1618989781,
                            "iso8601": "2021-04-21T07:23:01+0000"
                          }
                        },
                        "links": {
                          "self": "/v1/webhooks/restapi-exception/1"
                        }
                      },
                      {
                        "type": "restapiExceptionLog",
                        "id": "1",
                        "attributes": {
                          "type": "Exception",
                          "path": null,
                          "body": "Invalid argument",
                          "stacktrace": "#0 /homepages/10/d586858977/htdocs/phponline.com/index.php(99) : eval()'d code(10): func()\n#1 /homepages/10/d586858977/htdocs/phponline.com/index.php(99): eval()\n#2 {main}",
                          "previousExceptions": null,
                          "createdAt": {
                            "timestamp": 1618989781,
                            "iso8601": "2021-04-21T07:23:01+0000"
                          }
                        },
                        "links": {
                          "self": "/v1/webhooks/restapi-exception/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/restapi/restapi-exception-log/{id}": {
    "get": {
      "operationId": "getRestapiExceptionLog",
      "summary": "Get Restapi Exception Log",
      "description": "Retrieves a single instance of `restapiExceptionLog`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'restapiExceptionLog' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'restapiExceptionLog' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/restapiExceptionLog"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "restapiExceptionLog",
                      "id": "1",
                      "attributes": {
                        "type": "Exception",
                        "path": null,
                        "body": "Invalid argument",
                        "stacktrace": "#0 /homepages/10/d586858977/htdocs/phponline.com/index.php(99) : eval()'d code(10): func()\n#1 /homepages/10/d586858977/htdocs/phponline.com/index.php(99): eval()\n#2 {main}",
                        "previousExceptions": null,
                        "createdAt": {
                          "timestamp": 1618989781,
                          "iso8601": "2021-04-21T07:23:01+0000"
                        }
                      },
                      "links": {
                        "self": "/v1/webhooks/restapi-exception/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/sentral/key-info": {
    "get": {
      "operationId": "getKeyInformation",
      "summary": "Get Key Information",
      "description": "Retrieves information about the passed Tenant ID and API Key as well as the user who owns the API key.",
      "responses": {
        "200": {
          "description": "Returns information about the key provided as freeform JSON (PROPER DOCUMENTATION MISSING)"
        }
      }
    }
  },
  "/v1/sentral/ping": {
    "get": {
      "operationId": "ping",
      "summary": "Ping",
      "description": "Responds with no content and header 204 No Content.",
      "responses": {
        "204": {
          "description": ""
        }
      }
    }
  },
  "/v1/sentral/schema": {
    "get": {
      "operationId": "getSchema",
      "summary": "Get Schema",
      "description": "Retrieves the schema of this API.",
      "parameters": [
        {
          "in": "query",
          "name": "actionNamespaces",
          "required": false,
          "description": "String Comma-separated list of action namespaces to filter by. Matching is case-insensitive. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "operationIds",
          "required": false,
          "description": "String Comma-separated list of operation IDs to filter by. Search is case insensitive and supports one-character wildcard '?' and multi-character wildcard '*'. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "modelNames",
          "required": false,
          "description": "String Comma-separated list of model names to filter by. Search is case insensitive and supports one-character wildcard '?' and multi-character wildcard '*'. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Freeform JSON of the API schema in OpenApi3 format"
        }
      }
    }
  },
  "/v1/sentral/schema/action-summary": {
    "get": {
      "operationId": "getSchemaActionSummary",
      "summary": "Get Schema Action Summary",
      "description": "Retrieves the names and descriptions of every action exposed in the API, grouped by namespace.",
      "responses": {
        "200": {
          "description": "A map of namespace to a map of action ID and its description: Map<Namespace, Map<ActionId, ActionDescription >>."
        }
      }
    }
  },
  "/v1/sentral/schema/model-summary": {
    "get": {
      "operationId": "getSchemaModelSummary",
      "summary": "Get Schema Model Summary",
      "description": "Retrieves the names and descriptions of every model exposed in the API, grouped by namespace.",
      "responses": {
        "200": {
          "description": "A map of namespace to a map of model name and its description: Map<Namespace, Map<ModelName, ModelDescription>>."
        }
      }
    }
  },
  "/v1/sentral/schema/namespaces": {
    "get": {
      "operationId": "getSchemaNamespaces",
      "summary": "Get Schema Namespaces",
      "description": "Retrieves the list of all namespaces",
      "responses": {
        "200": {
          "description": "An array of namespaces as strings."
        }
      }
    }
  },
  "/v1/sentral/status": {
    "get": {
      "operationId": "getStatus",
      "summary": "Get Status",
      "description": "Retrieves the status of the server.",
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'apiHealth' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/apiHealth"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "apiHealth",
                      "id": "api",
                      "attributes": {
                        "serverTime": {
                          "timestamp": 1618989781,
                          "iso8601": "2021-04-21T07:23:01+0000"
                        },
                        "webhooks": {
                          "scheduledCommands": {
                            "lastEventParsingExecution": {
                              "timestamp": 1514889021,
                              "iso8601": "2018-01-02T10:30:21+0000"
                            },
                            "lastMessageSendingExecution": {
                              "timestamp": 1517554831,
                              "iso8601": "2018-02-02T07:00:31+0000"
                            }
                          },
                          "events": {
                            "numberOfUnparsed": 33,
                            "oldestUnparsed": {
                              "timestamp": 1533820455,
                              "iso8601": "2018-08-09T13:14:15+0000"
                            },
                            "newestUnparsed": {
                              "timestamp": 1520278943,
                              "iso8601": "2018-03-05T19:42:23+0000"
                            }
                          },
                          "pendingMessages": {
                            "numberOfPending": 73,
                            "oldestPending": {
                              "timestamp": 1520034840,
                              "iso8601": "2018-03-02T23:54:00+0000"
                            },
                            "newestPending": {
                              "timestamp": 1520380802,
                              "iso8601": "2018-03-07T00:00:02+0000"
                            }
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/sentral/status"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/staff/absence": {
    "post": {
      "operationId": "postStaffAbsence",
      "summary": "Post Staff Absence",
      "description": "Creates a new staff absence.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`staffAbsence`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `type` → String {DESCRIPTION-MISSING} [example: \"whole\"] \nValue constraints:\nAllowed values: \"whole\", \"early\", \"late\", \"timed\"\n   * `startDate` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [example: \"2018-01-01\"]\n   * `endDate` → Date (, eg. 20190102) {DESCRIPTION-MISSING} [example: \"2018-01-02\"]\n   * `startTime` → Time (H:i, eg 03:08) {DESCRIPTION-MISSING} [optional] [default: null] [example: \"08:15:00\"]\n   * `endTime` → Time (H:i, eg 03:08) {DESCRIPTION-MISSING} [optional] [default: null] [example: \"16:30:00\"]\n   * `reason` → String {DESCRIPTION-MISSING} [optional] [default: null] [example: \"Struck down by flu\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `notes` → String {DESCRIPTION-MISSING} [optional] [default: null] [example: \"Pending confirmation from a doctor\"] \nValue constraints:\nLength must be between 0 and 65025 characters, inclusive\n   * `hasReceivedMedicalCertificate` → Boolean {DESCRIPTION-MISSING} [optional] [default: false] [example: FALSE]\n   * `externalSource` → String {DESCRIPTION-MISSING} [optional] [default: null] [example: \"PAPER-RECORDS\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `externalId` → String {DESCRIPTION-MISSING} [optional] [default: null] [example: \"P/73/112\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n * Relationships\n   * `staff` → [required] [single] expected type is `staff`. \n   * `leaveType` → [required] [single] expected type is `staffAbsenceLeaveType`. ",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [example: \"whole\"] \nValue constraints:\nAllowed values: \"whole\", \"early\", \"late\", \"timed\""
                            },
                            "startDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [example: \"2018-01-01\"]"
                            },
                            "endDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) {DESCRIPTION-MISSING} [example: \"2018-01-02\"]"
                            },
                            "startTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) {DESCRIPTION-MISSING} [optional] [default: null] [example: \"08:15:00\"]"
                            },
                            "endTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) {DESCRIPTION-MISSING} [optional] [default: null] [example: \"16:30:00\"]"
                            },
                            "reason": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [default: null] [example: \"Struck down by flu\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "notes": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [default: null] [example: \"Pending confirmation from a doctor\"] \nValue constraints:\nLength must be between 0 and 65025 characters, inclusive"
                            },
                            "hasReceivedMedicalCertificate": {
                              "type": "boolean",
                              "description": "Boolean {DESCRIPTION-MISSING} [default: false] [example: FALSE]"
                            },
                            "externalSource": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [default: null] [example: \"PAPER-RECORDS\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "externalId": {
                              "type": "string",
                              "description": "String {DESCRIPTION-MISSING} [optional] [default: null] [example: \"P/73/112\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "staff": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            },
                            "leaveType": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "staffAbsence",
                    "attributes": {
                      "type": "whole",
                      "startDate": "2018-01-01",
                      "endDate": "2018-01-02",
                      "startTime": "08:15:00",
                      "endTime": "16:30:00",
                      "reason": "Struck down by flu",
                      "notes": "Pending confirmation from a doctor",
                      "hasReceivedMedicalCertificate": false,
                      "externalSource": "PAPER-RECORDS",
                      "externalId": "P/73/112"
                    },
                    "relationships": {
                      "staff": {
                        "data": {
                          "id": 1,
                          "type": "staff"
                        }
                      },
                      "leaveType": {
                        "data": {
                          "id": 1,
                          "type": "staffAbsenceLeaveType"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'staffAbsence' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/staffAbsence"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "staffAbsence",
                      "id": "1",
                      "attributes": {
                        "type": "whole",
                        "startDate": "2018-02-01",
                        "endDate": "2021-04-21",
                        "startTime": "08:00:00",
                        "endTime": null,
                        "leaveType": "Sickness",
                        "reason": null,
                        "notes": null,
                        "hasReceivedMedicalCertificate": false,
                        "externalSource": null,
                        "externalId": null,
                        "isApproved": true
                      },
                      "relationships": {
                        "staff": {
                          "data": {
                            "id": "1",
                            "type": "staff"
                          }
                        },
                        "leaveType": {
                          "data": {
                            "id": "1",
                            "type": "staffAbsenceLeaveType"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/staff/absence/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getStaffAbsences",
      "summary": "Get Staff Absences",
      "description": "Retrieves a page of instances of `staffAbsence`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'staffAbsence' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/staffAbsence"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "staffAbsence",
                        "id": "1",
                        "attributes": {
                          "type": "whole",
                          "startDate": "2018-02-01",
                          "endDate": "2021-04-21",
                          "startTime": "08:00:00",
                          "endTime": null,
                          "leaveType": "Sickness",
                          "reason": null,
                          "notes": null,
                          "hasReceivedMedicalCertificate": false,
                          "externalSource": null,
                          "externalId": null,
                          "isApproved": true
                        },
                        "relationships": {
                          "staff": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          },
                          "leaveType": {
                            "data": {
                              "id": "1",
                              "type": "staffAbsenceLeaveType"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/staff/absence/1"
                        }
                      },
                      {
                        "type": "staffAbsence",
                        "id": "1",
                        "attributes": {
                          "type": "whole",
                          "startDate": "2018-02-01",
                          "endDate": "2021-04-21",
                          "startTime": "08:00:00",
                          "endTime": null,
                          "leaveType": "Sickness",
                          "reason": null,
                          "notes": null,
                          "hasReceivedMedicalCertificate": false,
                          "externalSource": null,
                          "externalId": null,
                          "isApproved": true
                        },
                        "relationships": {
                          "staff": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          },
                          "leaveType": {
                            "data": {
                              "id": "1",
                              "type": "staffAbsenceLeaveType"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/staff/absence/1"
                        }
                      },
                      {
                        "type": "staffAbsence",
                        "id": "1",
                        "attributes": {
                          "type": "whole",
                          "startDate": "2018-02-01",
                          "endDate": "2021-04-21",
                          "startTime": "08:00:00",
                          "endTime": null,
                          "leaveType": "Sickness",
                          "reason": null,
                          "notes": null,
                          "hasReceivedMedicalCertificate": false,
                          "externalSource": null,
                          "externalId": null,
                          "isApproved": true
                        },
                        "relationships": {
                          "staff": {
                            "data": {
                              "id": "1",
                              "type": "staff"
                            }
                          },
                          "leaveType": {
                            "data": {
                              "id": "1",
                              "type": "staffAbsenceLeaveType"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/staff/absence/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/staff/absence/{id}": {
    "get": {
      "operationId": "getStaffAbsence",
      "summary": "Get Staff Absence",
      "description": "Retrieves a single instance of `staffAbsence`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'staffAbsence' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'staffAbsence' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/staffAbsence"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "staffAbsence",
                      "id": "1",
                      "attributes": {
                        "type": "whole",
                        "startDate": "2018-02-01",
                        "endDate": "2021-04-21",
                        "startTime": "08:00:00",
                        "endTime": null,
                        "leaveType": "Sickness",
                        "reason": null,
                        "notes": null,
                        "hasReceivedMedicalCertificate": false,
                        "externalSource": null,
                        "externalId": null,
                        "isApproved": true
                      },
                      "relationships": {
                        "staff": {
                          "data": {
                            "id": "1",
                            "type": "staff"
                          }
                        },
                        "leaveType": {
                          "data": {
                            "id": "1",
                            "type": "staffAbsenceLeaveType"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/staff/absence/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/staff/absence/{id}/attachment": {
    "post": {
      "operationId": "postStaffAbsenceAttachment",
      "summary": "Post Staff Absence Attachment",
      "description": "Adds a new 'staffAbsenceAttachment' to a 'staffAbsence'. The file should be uploaded via 'multipart/form-data' and should be sent under key 'attachment'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'staffAbsence' to which the attachment should be added. [example: 1]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "uploaderId",
          "required": true,
          "description": "Number ID of the `administrativeUser` who uploaded the file, corresponds to relation `uploader` in the resulting model. [example: \"13\"]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "displayName",
          "required": true,
          "description": "String Displayed name of the file. [example: \"Learning plan\"] \nValue constraints:\nLength must be between 0 and 100 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'staffAbsenceAttachment' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/staffAbsenceAttachment"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "staffAbsenceAttachment",
                      "id": "1",
                      "attributes": {
                        "displayName": "Learning plan"
                      },
                      "relationships": {
                        "absence": {
                          "data": {
                            "id": "2",
                            "type": "staffAbsence"
                          }
                        },
                        "uploader": {
                          "data": {
                            "id": "1",
                            "type": "administrativeUser"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/staff/staff-absence-attachment/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/staff/absence/{id}/attachments": {
    "get": {
      "operationId": "getStaffAbsenceRelatedAttachments",
      "summary": "Get Staff Absence Related Attachments",
      "description": "Retrieves a page of the instances of ``, the relation `attachments` of `staffAbsenceAttachment`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'staffAbsenceAttachment' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'staffAbsenceAttachment' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/staffAbsenceAttachment"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "staffAbsenceAttachment",
                        "id": "1",
                        "attributes": {
                          "displayName": "Learning plan"
                        },
                        "relationships": {
                          "absence": {
                            "data": {
                              "id": "2",
                              "type": "staffAbsence"
                            }
                          },
                          "uploader": {
                            "data": {
                              "id": "1",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/staff/staff-absence-attachment/1"
                        }
                      },
                      {
                        "type": "staffAbsenceAttachment",
                        "id": "1",
                        "attributes": {
                          "displayName": "Learning plan"
                        },
                        "relationships": {
                          "absence": {
                            "data": {
                              "id": "2",
                              "type": "staffAbsence"
                            }
                          },
                          "uploader": {
                            "data": {
                              "id": "1",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/staff/staff-absence-attachment/1"
                        }
                      },
                      {
                        "type": "staffAbsenceAttachment",
                        "id": "1",
                        "attributes": {
                          "displayName": "Learning plan"
                        },
                        "relationships": {
                          "absence": {
                            "data": {
                              "id": "2",
                              "type": "staffAbsence"
                            }
                          },
                          "uploader": {
                            "data": {
                              "id": "1",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/staff/staff-absence-attachment/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/staff/staff-absence-attachment": {
    "get": {
      "operationId": "getStaffAbsenceAttachments",
      "summary": "Get Staff Absence Attachments",
      "description": "Retrieves a page of instances of `staffAbsenceAttachment`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of `leaveType` IDs. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "absenceIds",
          "required": false,
          "description": "String Comma-separated list of `absence` IDs. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "uploaderIds",
          "required": false,
          "description": "String Comma-separated list of `uploader` IDs. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'staffAbsenceAttachment' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/staffAbsenceAttachment"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "staffAbsenceAttachment",
                        "id": "1",
                        "attributes": {
                          "displayName": "Learning plan"
                        },
                        "relationships": {
                          "absence": {
                            "data": {
                              "id": "2",
                              "type": "staffAbsence"
                            }
                          },
                          "uploader": {
                            "data": {
                              "id": "1",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/staff/staff-absence-attachment/1"
                        }
                      },
                      {
                        "type": "staffAbsenceAttachment",
                        "id": "1",
                        "attributes": {
                          "displayName": "Learning plan"
                        },
                        "relationships": {
                          "absence": {
                            "data": {
                              "id": "2",
                              "type": "staffAbsence"
                            }
                          },
                          "uploader": {
                            "data": {
                              "id": "1",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/staff/staff-absence-attachment/1"
                        }
                      },
                      {
                        "type": "staffAbsenceAttachment",
                        "id": "1",
                        "attributes": {
                          "displayName": "Learning plan"
                        },
                        "relationships": {
                          "absence": {
                            "data": {
                              "id": "2",
                              "type": "staffAbsence"
                            }
                          },
                          "uploader": {
                            "data": {
                              "id": "1",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/staff/staff-absence-attachment/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/staff/staff-absence-attachment/{id}": {
    "get": {
      "operationId": "getStaffAbsenceAttachment",
      "summary": "Get Staff Absence Attachment",
      "description": "Retrieves a single instance of `staffAbsenceAttachment`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'staffAbsenceAttachment' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'staffAbsenceAttachment' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/staffAbsenceAttachment"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "staffAbsenceAttachment",
                      "id": "1",
                      "attributes": {
                        "displayName": "Learning plan"
                      },
                      "relationships": {
                        "absence": {
                          "data": {
                            "id": "2",
                            "type": "staffAbsence"
                          }
                        },
                        "uploader": {
                          "data": {
                            "id": "1",
                            "type": "administrativeUser"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/staff/staff-absence-attachment/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/staff/staff-absence-attachment/{id}/file": {
    "get": {
      "operationId": "getStaffAbsenceAttachmentFile",
      "summary": "Get Staff Absence Attachment File",
      "description": "Returns the actual file of the given `staffAbsenceAttachment",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `staffAbsenceAttachment` which file to retrieve [example: \"1\"]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Binary data of the attachment requested",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "/v1/staff/staff-absence-leave-type": {
    "get": {
      "operationId": "getStaffAbsenceLeaveTypes",
      "summary": "Get Staff Absence Leave Types",
      "description": "Retrieves a page of instances of `staffAbsenceLeaveType`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of `leaveType` IDs. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'staffAbsenceLeaveType' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/staffAbsenceLeaveType"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "staffAbsenceLeaveType",
                        "id": "0",
                        "attributes": {
                          "name": "Sickness",
                          "sequence": 0,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/staff/staff-absence-leave-type/0"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "staffAbsenceLeaveType",
                        "id": "0",
                        "attributes": {
                          "name": "Sickness",
                          "sequence": 0,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/staff/staff-absence-leave-type/0"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "staffAbsenceLeaveType",
                        "id": "0",
                        "attributes": {
                          "name": "Sickness",
                          "sequence": 0,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/staff/staff-absence-leave-type/0"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/staff/staff-absence-leave-type/{id}": {
    "get": {
      "operationId": "getStaffAbsenceLeaveType",
      "summary": "Get Staff Absence Leave Type",
      "description": "Retrieves a single instance of `staffAbsenceLeaveType`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'staffAbsenceLeaveType' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'staffAbsenceLeaveType' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/staffAbsenceLeaveType"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "staffAbsenceLeaveType",
                      "id": "0",
                      "attributes": {
                        "name": "Sickness",
                        "sequence": 0,
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/staff/staff-absence-leave-type/0"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/staff/{id}/timetable-lessons": {
    "get": {
      "operationId": "getStaffTimetableLessons",
      "summary": "Get Staff Timetable Lessons",
      "description": "Retrieves all instances of timetableLesson.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `staff` which timetable should be retrieved for a given date.",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "fromDate",
          "required": false,
          "description": "Date (Y-m-d, eg. 20190102) Date from which to retrieve timetable lessons, inclusive range. When not specified it defaults to today. [optional] [default: Today]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "toDate",
          "required": false,
          "description": "Date (Y-m-d, eg. 20190102) Date to which to retrieve timetable lessons, inclusive range. When not specified it uses `fromDate`. Max allowed number of days to fetch data is 31. [optional]",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableLesson' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableLesson"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      },
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      },
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/staff/{id}/timetable-lessons/{date}": {
    "get": {
      "operationId": "getStaffTimetableLessonsLegacy",
      "summary": "Get Staff Timetable Lessons Legacy",
      "description": "Retrieves all instances of timetableLesson.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `staff` which timetable should be retrieved for a given date.",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "date",
          "required": true,
          "description": "Date (Y-m-d, eg. 20190102) Date for which the timetable should be retrieved.",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableLesson' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableLesson"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      },
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      },
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/student/{id}/timetable-lessons": {
    "get": {
      "operationId": "getStudentTimetableLessons",
      "summary": "Get Student Timetable Lessons",
      "description": "Retrieves all instances of timetableLesson.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `student` which timetable should be retrieved for a given date.",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "fromDate",
          "required": false,
          "description": "Date (Y-m-d, eg. 20190102) Date from which to retrieve timetable lessons, inclusive range. When not specified it defaults to today. [optional] [default: Today]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "toDate",
          "required": false,
          "description": "Date (Y-m-d, eg. 20190102) Date to which to retrieve timetable lessons, inclusive range. When not specified it uses `fromDate`. Max allowed number of days to fetch data is 31. [optional]",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableLesson' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableLesson"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      },
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      },
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/student/{id}/timetable-lessons/{date}": {
    "get": {
      "operationId": "getStudentTimetableLessonsLegacy",
      "summary": "Get Student Timetable Lessons Legacy",
      "description": "Retrieves all instances of timetableLesson.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `student` which timetable should be retrieved for a given date.",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "path",
          "name": "date",
          "required": true,
          "description": "Date (Y-m-d, eg. 20190102) Date for which the timetable should be retrieved.",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableLesson' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableLesson"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      },
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      },
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-calendar-date": {
    "get": {
      "operationId": "getTimetableCalendarDates",
      "summary": "Get Timetable Calendar Dates",
      "description": "Retrieves a page of instances of `timetableCalendarDate`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "from",
          "required": false,
          "description": "Date (, eg. 20190102) Date from which to return calendar dates. [optional] [example: \"2018-01-01\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "to",
          "required": false,
          "description": "Date (, eg. 20190102) Date to which to return calendar dates. [optional] [example: \"2018-12-01\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableCalendarDate' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableCalendarDate"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableCalendarDate",
                        "id": "2019",
                        "attributes": {
                          "date": "2019-01-01",
                          "cycle": 1,
                          "interval": 1,
                          "isDailyTimetable": false
                        },
                        "relationships": {
                          "day": {
                            "data": {
                              "id": "2",
                              "type": "timetableDay"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-calendar-date/2019"
                        }
                      },
                      {
                        "type": "timetableCalendarDate",
                        "id": "2019",
                        "attributes": {
                          "date": "2019-01-01",
                          "cycle": 1,
                          "interval": 1,
                          "isDailyTimetable": false
                        },
                        "relationships": {
                          "day": {
                            "data": {
                              "id": "2",
                              "type": "timetableDay"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-calendar-date/2019"
                        }
                      },
                      {
                        "type": "timetableCalendarDate",
                        "id": "2019",
                        "attributes": {
                          "date": "2019-01-01",
                          "cycle": 1,
                          "interval": 1,
                          "isDailyTimetable": false
                        },
                        "relationships": {
                          "day": {
                            "data": {
                              "id": "2",
                              "type": "timetableDay"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-calendar-date/2019"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-calendar-date/{id}": {
    "get": {
      "operationId": "getTimetableCalendarDate",
      "summary": "Get Timetable Calendar Date",
      "description": "Retrieves a single instance of `timetableCalendarDate`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Date (, eg. 20190102) ID of the 'timetableCalendarDate' to retrieve [example: 17]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'timetableCalendarDate' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/timetableCalendarDate"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "timetableCalendarDate",
                      "id": "2019",
                      "attributes": {
                        "date": "2019-01-01",
                        "cycle": 1,
                        "interval": 1,
                        "isDailyTimetable": false
                      },
                      "relationships": {
                        "day": {
                          "data": {
                            "id": "2",
                            "type": "timetableDay"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/timetables/timetable-calendar-date/2019"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-class": {
    "get": {
      "operationId": "getTimetableClasses",
      "summary": "Get Timetable Classes",
      "description": "Retrieves a page of instances of `timetableClass`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: timetableStudents. [optional] [default: null] [example: \"timetableStudents\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "coreStudentIds",
          "required": false,
          "description": "String Comma-separated list of `coreStudent` IDs that are assigned to this class to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "enrolmentStudentIds",
          "required": false,
          "description": "String Comma-separated list of `student` IDs that are assigned to this class to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "subjectIds",
          "required": false,
          "description": "String Comma-separated list of `subject` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableClass' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableClass"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableClass",
                        "id": "1",
                        "attributes": {
                          "name": "BIOLOGY Y4",
                          "type": null
                        },
                        "relationships": {
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "timetableSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-class/1"
                        }
                      },
                      {
                        "type": "timetableClass",
                        "id": "1",
                        "attributes": {
                          "name": "BIOLOGY Y4",
                          "type": null
                        },
                        "relationships": {
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "timetableSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-class/1"
                        }
                      },
                      {
                        "type": "timetableClass",
                        "id": "1",
                        "attributes": {
                          "name": "BIOLOGY Y4",
                          "type": null
                        },
                        "relationships": {
                          "subject": {
                            "data": {
                              "id": "1",
                              "type": "timetableSubject"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-class/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-class-lesson": {
    "get": {
      "operationId": "getTimetableClassLessons",
      "summary": "Get Timetable Class Lessons",
      "description": "Retrieves a page of instances of `timetableClassLesson`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: class, room, periodInDay, timetableTeachers. [optional] [default: null] [example: \"class\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "roomIds",
          "required": false,
          "description": "String Comma-separated list of `room` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "periodInDayIds",
          "required": false,
          "description": "String Comma-separated list of `periodInDay` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "classIds",
          "required": false,
          "description": "String Comma-separated list of `class` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableClassLesson' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableClassLesson"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableClassLesson",
                        "id": "1",
                        "relationships": {
                          "class": {
                            "data": {
                              "id": "3",
                              "type": "timetableClass"
                            }
                          },
                          "room": {
                            "data": {
                              "id": "2",
                              "type": "timetableRoom"
                            }
                          },
                          "periodInDay": {
                            "data": {
                              "id": "4",
                              "type": "timetablePeriodInDay"
                            }
                          },
                          "timetableStudents": {
                            "links": {
                              "related": "/v1/timetables/timetable-class-lesson/1/timetable-students"
                            }
                          },
                          "timetableTeachers": {
                            "links": {
                              "related": "/v1/timetables/timetable-class-lesson/1/timetable-teachers"
                            }
                          },
                          "coreStudents": {
                            "links": {
                              "related": "/v1/timetables/timetable-class-lesson/1/core-students"
                            }
                          },
                          "coreStaff": {
                            "links": {
                              "related": "/v1/timetables/timetable-class-lesson/1/core-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-class-lesson/1"
                        }
                      },
                      {
                        "type": "timetableClassLesson",
                        "id": "1",
                        "relationships": {
                          "class": {
                            "data": {
                              "id": "3",
                              "type": "timetableClass"
                            }
                          },
                          "room": {
                            "data": {
                              "id": "2",
                              "type": "timetableRoom"
                            }
                          },
                          "periodInDay": {
                            "data": {
                              "id": "4",
                              "type": "timetablePeriodInDay"
                            }
                          },
                          "timetableStudents": {
                            "links": {
                              "related": "/v1/timetables/timetable-class-lesson/1/timetable-students"
                            }
                          },
                          "timetableTeachers": {
                            "links": {
                              "related": "/v1/timetables/timetable-class-lesson/1/timetable-teachers"
                            }
                          },
                          "coreStudents": {
                            "links": {
                              "related": "/v1/timetables/timetable-class-lesson/1/core-students"
                            }
                          },
                          "coreStaff": {
                            "links": {
                              "related": "/v1/timetables/timetable-class-lesson/1/core-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-class-lesson/1"
                        }
                      },
                      {
                        "type": "timetableClassLesson",
                        "id": "1",
                        "relationships": {
                          "class": {
                            "data": {
                              "id": "3",
                              "type": "timetableClass"
                            }
                          },
                          "room": {
                            "data": {
                              "id": "2",
                              "type": "timetableRoom"
                            }
                          },
                          "periodInDay": {
                            "data": {
                              "id": "4",
                              "type": "timetablePeriodInDay"
                            }
                          },
                          "timetableStudents": {
                            "links": {
                              "related": "/v1/timetables/timetable-class-lesson/1/timetable-students"
                            }
                          },
                          "timetableTeachers": {
                            "links": {
                              "related": "/v1/timetables/timetable-class-lesson/1/timetable-teachers"
                            }
                          },
                          "coreStudents": {
                            "links": {
                              "related": "/v1/timetables/timetable-class-lesson/1/core-students"
                            }
                          },
                          "coreStaff": {
                            "links": {
                              "related": "/v1/timetables/timetable-class-lesson/1/core-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-class-lesson/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-class-lesson/{id}": {
    "get": {
      "operationId": "getTimetableClassLesson",
      "summary": "Get Timetable Class Lesson",
      "description": "Retrieves a single instance of `timetableClassLesson`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetableClassLesson' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: class, room, periodInDay, timetableTeachers. [optional] [default: null] [example: \"class\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'timetableClassLesson' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/timetableClassLesson"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "timetableClassLesson",
                      "id": "1",
                      "relationships": {
                        "class": {
                          "data": {
                            "id": "3",
                            "type": "timetableClass"
                          }
                        },
                        "room": {
                          "data": {
                            "id": "2",
                            "type": "timetableRoom"
                          }
                        },
                        "periodInDay": {
                          "data": {
                            "id": "4",
                            "type": "timetablePeriodInDay"
                          }
                        },
                        "timetableStudents": {
                          "links": {
                            "related": "/v1/timetables/timetable-class-lesson/1/timetable-students"
                          }
                        },
                        "timetableTeachers": {
                          "links": {
                            "related": "/v1/timetables/timetable-class-lesson/1/timetable-teachers"
                          }
                        },
                        "coreStudents": {
                          "links": {
                            "related": "/v1/timetables/timetable-class-lesson/1/core-students"
                          }
                        },
                        "coreStaff": {
                          "links": {
                            "related": "/v1/timetables/timetable-class-lesson/1/core-staff"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/timetables/timetable-class-lesson/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-class-lesson/{id}/core-staff": {
    "get": {
      "operationId": "getTimetableClassLessonRelatedCoreStaff",
      "summary": "Get Timetable Class Lesson Related Core Staff",
      "description": "Retrieves a page of the instances of ``, the relation `coreStaff` of `coreStaff`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreStaff' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: assignedClasses. [optional] [default: null] [example: \"assignedClasses\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreStaff' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreStaff"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreStaff",
                        "id": "1",
                        "attributes": {
                          "title": "Ms",
                          "givenNames": "Jane Matilda",
                          "lastName": "Lizbona-Moscow",
                          "preferredTitle": "Miss",
                          "preferredFirstName": "Jane",
                          "preferredLastName": "Lizbona",
                          "gender": "F",
                          "dateOfBirth": null,
                          "mobilePhone": null,
                          "email": "jane.lizbona@example.com",
                          "username": null,
                          "employmentStatus": null,
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": "100ecf7b-30b5-411d-910a-27892f5d1722",
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStaff": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "assignedClasses": {
                            "links": {
                              "related": "/v1/core/core-staff/1/assigned-classes"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStaff",
                        "id": "1",
                        "attributes": {
                          "title": "Ms",
                          "givenNames": "Jane Matilda",
                          "lastName": "Lizbona-Moscow",
                          "preferredTitle": "Miss",
                          "preferredFirstName": "Jane",
                          "preferredLastName": "Lizbona",
                          "gender": "F",
                          "dateOfBirth": null,
                          "mobilePhone": null,
                          "email": "jane.lizbona@example.com",
                          "username": null,
                          "employmentStatus": null,
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": "100ecf7b-30b5-411d-910a-27892f5d1722",
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStaff": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "assignedClasses": {
                            "links": {
                              "related": "/v1/core/core-staff/1/assigned-classes"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStaff",
                        "id": "1",
                        "attributes": {
                          "title": "Ms",
                          "givenNames": "Jane Matilda",
                          "lastName": "Lizbona-Moscow",
                          "preferredTitle": "Miss",
                          "preferredFirstName": "Jane",
                          "preferredLastName": "Lizbona",
                          "gender": "F",
                          "dateOfBirth": null,
                          "mobilePhone": null,
                          "email": "jane.lizbona@example.com",
                          "username": null,
                          "employmentStatus": null,
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": "100ecf7b-30b5-411d-910a-27892f5d1722",
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStaff": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "assignedClasses": {
                            "links": {
                              "related": "/v1/core/core-staff/1/assigned-classes"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-class-lesson/{id}/core-students": {
    "get": {
      "operationId": "getTimetableClassLessonRelatedCoreStudents",
      "summary": "Get Timetable Class Lesson Related Core Students",
      "description": "Retrieves a page of the instances of ``, the relation `coreStudents` of `coreStudent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreStudent' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: additionalDetails, coreRollclass, attendedClasses, holidays, studentRelationships, coreHouse, contacts. [optional] [default: null] [example: \"additionalDetails\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreStudent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreStudent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreStudent",
                        "id": "2",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Smith",
                          "preferredName": "Jane",
                          "gender": null,
                          "barcode": "B000007001",
                          "examId": null,
                          "schoolYear": null,
                          "dateOfBirth": null,
                          "allergies": null,
                          "medicalConditions": null,
                          "externalId": "EXT_123",
                          "externalSource": "SentralEnrolment",
                          "username": null,
                          "email": null,
                          "mobile": null,
                          "refId": "8b6447c6-49e1-44f7-952c-12006df6dfab",
                          "eslSupportNeeded": false,
                          "eslDateAssessed": null,
                          "isEslSupportReceived": false,
                          "enrolDate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "additionalDetails": {
                            "data": {
                              "id": "1",
                              "type": "corePerson"
                            }
                          },
                          "attendedClasses": {
                            "links": {
                              "related": "/v1/core/core-student/2/attended-classes"
                            }
                          },
                          "studentRelationships": {
                            "links": {
                              "related": "/v1/core/core-student-relationships?studentIds=2"
                            }
                          },
                          "coreHouse": {
                            "data": {
                              "id": "1",
                              "type": "coreHouse"
                            }
                          },
                          "contacts": {
                            "links": {
                              "related": "/v1/core/core-student/2/contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student/2"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStudent",
                        "id": "2",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Smith",
                          "preferredName": "Jane",
                          "gender": null,
                          "barcode": "B000007001",
                          "examId": null,
                          "schoolYear": null,
                          "dateOfBirth": null,
                          "allergies": null,
                          "medicalConditions": null,
                          "externalId": "EXT_123",
                          "externalSource": "SentralEnrolment",
                          "username": null,
                          "email": null,
                          "mobile": null,
                          "refId": "8b6447c6-49e1-44f7-952c-12006df6dfab",
                          "eslSupportNeeded": false,
                          "eslDateAssessed": null,
                          "isEslSupportReceived": false,
                          "enrolDate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "additionalDetails": {
                            "data": {
                              "id": "1",
                              "type": "corePerson"
                            }
                          },
                          "attendedClasses": {
                            "links": {
                              "related": "/v1/core/core-student/2/attended-classes"
                            }
                          },
                          "studentRelationships": {
                            "links": {
                              "related": "/v1/core/core-student-relationships?studentIds=2"
                            }
                          },
                          "coreHouse": {
                            "data": {
                              "id": "1",
                              "type": "coreHouse"
                            }
                          },
                          "contacts": {
                            "links": {
                              "related": "/v1/core/core-student/2/contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student/2"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStudent",
                        "id": "2",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Smith",
                          "preferredName": "Jane",
                          "gender": null,
                          "barcode": "B000007001",
                          "examId": null,
                          "schoolYear": null,
                          "dateOfBirth": null,
                          "allergies": null,
                          "medicalConditions": null,
                          "externalId": "EXT_123",
                          "externalSource": "SentralEnrolment",
                          "username": null,
                          "email": null,
                          "mobile": null,
                          "refId": "8b6447c6-49e1-44f7-952c-12006df6dfab",
                          "eslSupportNeeded": false,
                          "eslDateAssessed": null,
                          "isEslSupportReceived": false,
                          "enrolDate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "additionalDetails": {
                            "data": {
                              "id": "1",
                              "type": "corePerson"
                            }
                          },
                          "attendedClasses": {
                            "links": {
                              "related": "/v1/core/core-student/2/attended-classes"
                            }
                          },
                          "studentRelationships": {
                            "links": {
                              "related": "/v1/core/core-student-relationships?studentIds=2"
                            }
                          },
                          "coreHouse": {
                            "data": {
                              "id": "1",
                              "type": "coreHouse"
                            }
                          },
                          "contacts": {
                            "links": {
                              "related": "/v1/core/core-student/2/contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student/2"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-class-lesson/{id}/timetable-students": {
    "get": {
      "operationId": "getTimetableClassLessonRelatedTimetableStudents",
      "summary": "Get Timetable Class Lesson Related Timetable Students",
      "description": "Retrieves a page of the instances of ``, the relation `timetableStudents` of `timetableStudent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetableStudent' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableStudent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableStudent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableStudent",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "year": "12",
                          "gender": "F"
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-student/1"
                        }
                      },
                      {
                        "type": "timetableStudent",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "year": "12",
                          "gender": "F"
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-student/1"
                        }
                      },
                      {
                        "type": "timetableStudent",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "year": "12",
                          "gender": "F"
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-student/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-class-lesson/{id}/timetable-teachers": {
    "get": {
      "operationId": "getTimetableClassLessonRelatedTimetableTeachers",
      "summary": "Get Timetable Class Lesson Related Timetable Teachers",
      "description": "Retrieves a page of the instances of ``, the relation `timetableTeachers` of `timetableTeacher`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetableTeacher' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableTeacher' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableTeacher"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableTeacher",
                        "id": "1",
                        "attributes": {
                          "title": "Mrs",
                          "firstName": "Jane",
                          "lastName": "Doe"
                        },
                        "relationships": {
                          "coreStaff": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-teacher/1"
                        }
                      },
                      {
                        "type": "timetableTeacher",
                        "id": "1",
                        "attributes": {
                          "title": "Mrs",
                          "firstName": "Jane",
                          "lastName": "Doe"
                        },
                        "relationships": {
                          "coreStaff": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-teacher/1"
                        }
                      },
                      {
                        "type": "timetableTeacher",
                        "id": "1",
                        "attributes": {
                          "title": "Mrs",
                          "firstName": "Jane",
                          "lastName": "Doe"
                        },
                        "relationships": {
                          "coreStaff": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-teacher/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-class/{id}": {
    "get": {
      "operationId": "getTimetableClass",
      "summary": "Get Timetable Class",
      "description": "Retrieves a single instance of `timetableClass`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetableClass' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: timetableStudents. [optional] [default: null] [example: \"timetableStudents\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'timetableClass' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/timetableClass"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "timetableClass",
                      "id": "1",
                      "attributes": {
                        "name": "BIOLOGY Y4",
                        "type": null
                      },
                      "relationships": {
                        "subject": {
                          "data": {
                            "id": "1",
                            "type": "timetableSubject"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/timetables/timetable-class/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-class/{id}/timetable-students": {
    "get": {
      "operationId": "getTimetableClassRelatedTimetableStudents",
      "summary": "Get Timetable Class Related Timetable Students",
      "description": "Retrieves a page of the instances of ``, the relation `timetableStudents` of `timetableStudent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetableStudent' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableStudent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableStudent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableStudent",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "year": "12",
                          "gender": "F"
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-student/1"
                        }
                      },
                      {
                        "type": "timetableStudent",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "year": "12",
                          "gender": "F"
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-student/1"
                        }
                      },
                      {
                        "type": "timetableStudent",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "year": "12",
                          "gender": "F"
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-student/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-daily-lesson": {
    "get": {
      "operationId": "getTimetableDailyLessons",
      "summary": "Get Timetable Daily Lessons",
      "description": "Retrieves a page of instances of `timetableDailyLesson`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: class, periodInDay, room, timetableTeachers. [optional] [default: null] [example: \"class\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "periodIds",
          "required": false,
          "description": "String Comma-separated list of `period` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "classIds",
          "required": false,
          "description": "String Comma-separated list of `class` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "from",
          "required": false,
          "description": "Date (, eg. 20190102) Date from which to return changes (inclusive). [optional] [example: \"2018-01-01\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "to",
          "required": false,
          "description": "Date (, eg. 20190102) Date to which to return changes (inclusive). [optional] [example: \"2018-12-01\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableDailyLesson' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableDailyLesson"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableDailyLesson",
                        "id": "1",
                        "attributes": {
                          "name": "Class override",
                          "type": "Class",
                          "date": "2018-01-01",
                          "startTime": "12:00:00",
                          "endTime": "13:00:00"
                        },
                        "relationships": {
                          "class": {
                            "data": {
                              "id": "3",
                              "type": "timetableClass"
                            }
                          },
                          "period": {
                            "data": {
                              "id": "2",
                              "type": "timetablePeriod"
                            }
                          },
                          "periodInDay": {
                            "data": {
                              "id": "4",
                              "type": "timetablePeriodInDay"
                            }
                          },
                          "room": {
                            "data": {
                              "id": "2",
                              "type": "timetableRoom"
                            }
                          },
                          "timetableStudents": {
                            "links": {
                              "related": "/v1/timetables/timetable-daily-lesson/1/timetable-students"
                            }
                          },
                          "timetableTeachers": {
                            "links": {
                              "related": "/v1/timetables/timetable-daily-lesson/1/timetable-staff"
                            }
                          },
                          "coreStudents": {
                            "links": {
                              "related": "/v1/timetables/timetable-daily-lesson/1/core-students"
                            }
                          },
                          "coreStaff": {
                            "links": {
                              "related": "/v1/timetables/timetable-daily-lesson/1/core-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-daily-lesson/1"
                        }
                      },
                      {
                        "type": "timetableDailyLesson",
                        "id": "1",
                        "attributes": {
                          "name": "Class override",
                          "type": "Class",
                          "date": "2018-01-01",
                          "startTime": "12:00:00",
                          "endTime": "13:00:00"
                        },
                        "relationships": {
                          "class": {
                            "data": {
                              "id": "3",
                              "type": "timetableClass"
                            }
                          },
                          "period": {
                            "data": {
                              "id": "2",
                              "type": "timetablePeriod"
                            }
                          },
                          "periodInDay": {
                            "data": {
                              "id": "4",
                              "type": "timetablePeriodInDay"
                            }
                          },
                          "room": {
                            "data": {
                              "id": "2",
                              "type": "timetableRoom"
                            }
                          },
                          "timetableStudents": {
                            "links": {
                              "related": "/v1/timetables/timetable-daily-lesson/1/timetable-students"
                            }
                          },
                          "timetableTeachers": {
                            "links": {
                              "related": "/v1/timetables/timetable-daily-lesson/1/timetable-staff"
                            }
                          },
                          "coreStudents": {
                            "links": {
                              "related": "/v1/timetables/timetable-daily-lesson/1/core-students"
                            }
                          },
                          "coreStaff": {
                            "links": {
                              "related": "/v1/timetables/timetable-daily-lesson/1/core-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-daily-lesson/1"
                        }
                      },
                      {
                        "type": "timetableDailyLesson",
                        "id": "1",
                        "attributes": {
                          "name": "Class override",
                          "type": "Class",
                          "date": "2018-01-01",
                          "startTime": "12:00:00",
                          "endTime": "13:00:00"
                        },
                        "relationships": {
                          "class": {
                            "data": {
                              "id": "3",
                              "type": "timetableClass"
                            }
                          },
                          "period": {
                            "data": {
                              "id": "2",
                              "type": "timetablePeriod"
                            }
                          },
                          "periodInDay": {
                            "data": {
                              "id": "4",
                              "type": "timetablePeriodInDay"
                            }
                          },
                          "room": {
                            "data": {
                              "id": "2",
                              "type": "timetableRoom"
                            }
                          },
                          "timetableStudents": {
                            "links": {
                              "related": "/v1/timetables/timetable-daily-lesson/1/timetable-students"
                            }
                          },
                          "timetableTeachers": {
                            "links": {
                              "related": "/v1/timetables/timetable-daily-lesson/1/timetable-staff"
                            }
                          },
                          "coreStudents": {
                            "links": {
                              "related": "/v1/timetables/timetable-daily-lesson/1/core-students"
                            }
                          },
                          "coreStaff": {
                            "links": {
                              "related": "/v1/timetables/timetable-daily-lesson/1/core-staff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-daily-lesson/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-daily-lesson/{id}": {
    "get": {
      "operationId": "getTimetableDailyLesson",
      "summary": "Get Timetable Daily Lesson",
      "description": "Retrieves a single instance of `timetableDailyLesson`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetableDailyLesson' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: class, periodInDay, room, timetableTeachers. [optional] [default: null] [example: \"class\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'timetableDailyLesson' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/timetableDailyLesson"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "timetableDailyLesson",
                      "id": "1",
                      "attributes": {
                        "name": "Class override",
                        "type": "Class",
                        "date": "2018-01-01",
                        "startTime": "12:00:00",
                        "endTime": "13:00:00"
                      },
                      "relationships": {
                        "class": {
                          "data": {
                            "id": "3",
                            "type": "timetableClass"
                          }
                        },
                        "period": {
                          "data": {
                            "id": "2",
                            "type": "timetablePeriod"
                          }
                        },
                        "periodInDay": {
                          "data": {
                            "id": "4",
                            "type": "timetablePeriodInDay"
                          }
                        },
                        "room": {
                          "data": {
                            "id": "2",
                            "type": "timetableRoom"
                          }
                        },
                        "timetableStudents": {
                          "links": {
                            "related": "/v1/timetables/timetable-daily-lesson/1/timetable-students"
                          }
                        },
                        "timetableTeachers": {
                          "links": {
                            "related": "/v1/timetables/timetable-daily-lesson/1/timetable-staff"
                          }
                        },
                        "coreStudents": {
                          "links": {
                            "related": "/v1/timetables/timetable-daily-lesson/1/core-students"
                          }
                        },
                        "coreStaff": {
                          "links": {
                            "related": "/v1/timetables/timetable-daily-lesson/1/core-staff"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/timetables/timetable-daily-lesson/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-daily-lesson/{id}/core-staff": {
    "get": {
      "operationId": "getTimetableDailyLessonRelatedCoreStaff",
      "summary": "Get Timetable Daily Lesson Related Core Staff",
      "description": "Retrieves a page of the instances of ``, the relation `coreStaff` of `coreStaff`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreStaff' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: assignedClasses. [optional] [default: null] [example: \"assignedClasses\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreStaff' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreStaff"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreStaff",
                        "id": "1",
                        "attributes": {
                          "title": "Ms",
                          "givenNames": "Jane Matilda",
                          "lastName": "Lizbona-Moscow",
                          "preferredTitle": "Miss",
                          "preferredFirstName": "Jane",
                          "preferredLastName": "Lizbona",
                          "gender": "F",
                          "dateOfBirth": null,
                          "mobilePhone": null,
                          "email": "jane.lizbona@example.com",
                          "username": null,
                          "employmentStatus": null,
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": "100ecf7b-30b5-411d-910a-27892f5d1722",
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStaff": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "assignedClasses": {
                            "links": {
                              "related": "/v1/core/core-staff/1/assigned-classes"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStaff",
                        "id": "1",
                        "attributes": {
                          "title": "Ms",
                          "givenNames": "Jane Matilda",
                          "lastName": "Lizbona-Moscow",
                          "preferredTitle": "Miss",
                          "preferredFirstName": "Jane",
                          "preferredLastName": "Lizbona",
                          "gender": "F",
                          "dateOfBirth": null,
                          "mobilePhone": null,
                          "email": "jane.lizbona@example.com",
                          "username": null,
                          "employmentStatus": null,
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": "100ecf7b-30b5-411d-910a-27892f5d1722",
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStaff": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "assignedClasses": {
                            "links": {
                              "related": "/v1/core/core-staff/1/assigned-classes"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStaff",
                        "id": "1",
                        "attributes": {
                          "title": "Ms",
                          "givenNames": "Jane Matilda",
                          "lastName": "Lizbona-Moscow",
                          "preferredTitle": "Miss",
                          "preferredFirstName": "Jane",
                          "preferredLastName": "Lizbona",
                          "gender": "F",
                          "dateOfBirth": null,
                          "mobilePhone": null,
                          "email": "jane.lizbona@example.com",
                          "username": null,
                          "employmentStatus": null,
                          "externalId": null,
                          "externalSource": "INTERNAL",
                          "refId": "100ecf7b-30b5-411d-910a-27892f5d1722",
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStaff": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "assignedClasses": {
                            "links": {
                              "related": "/v1/core/core-staff/1/assigned-classes"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-staff/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-daily-lesson/{id}/core-students": {
    "get": {
      "operationId": "getTimetableDailyLessonRelatedCoreStudents",
      "summary": "Get Timetable Daily Lesson Related Core Students",
      "description": "Retrieves a page of the instances of ``, the relation `coreStudents` of `coreStudent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'coreStudent' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: additionalDetails, coreRollclass, attendedClasses, holidays, studentRelationships, coreHouse, contacts. [optional] [default: null] [example: \"additionalDetails\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'coreStudent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/coreStudent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "coreStudent",
                        "id": "2",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Smith",
                          "preferredName": "Jane",
                          "gender": null,
                          "barcode": "B000007001",
                          "examId": null,
                          "schoolYear": null,
                          "dateOfBirth": null,
                          "allergies": null,
                          "medicalConditions": null,
                          "externalId": "EXT_123",
                          "externalSource": "SentralEnrolment",
                          "username": null,
                          "email": null,
                          "mobile": null,
                          "refId": "8b6447c6-49e1-44f7-952c-12006df6dfab",
                          "eslSupportNeeded": false,
                          "eslDateAssessed": null,
                          "isEslSupportReceived": false,
                          "enrolDate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "additionalDetails": {
                            "data": {
                              "id": "1",
                              "type": "corePerson"
                            }
                          },
                          "attendedClasses": {
                            "links": {
                              "related": "/v1/core/core-student/2/attended-classes"
                            }
                          },
                          "studentRelationships": {
                            "links": {
                              "related": "/v1/core/core-student-relationships?studentIds=2"
                            }
                          },
                          "coreHouse": {
                            "data": {
                              "id": "1",
                              "type": "coreHouse"
                            }
                          },
                          "contacts": {
                            "links": {
                              "related": "/v1/core/core-student/2/contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student/2"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStudent",
                        "id": "2",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Smith",
                          "preferredName": "Jane",
                          "gender": null,
                          "barcode": "B000007001",
                          "examId": null,
                          "schoolYear": null,
                          "dateOfBirth": null,
                          "allergies": null,
                          "medicalConditions": null,
                          "externalId": "EXT_123",
                          "externalSource": "SentralEnrolment",
                          "username": null,
                          "email": null,
                          "mobile": null,
                          "refId": "8b6447c6-49e1-44f7-952c-12006df6dfab",
                          "eslSupportNeeded": false,
                          "eslDateAssessed": null,
                          "isEslSupportReceived": false,
                          "enrolDate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "additionalDetails": {
                            "data": {
                              "id": "1",
                              "type": "corePerson"
                            }
                          },
                          "attendedClasses": {
                            "links": {
                              "related": "/v1/core/core-student/2/attended-classes"
                            }
                          },
                          "studentRelationships": {
                            "links": {
                              "related": "/v1/core/core-student-relationships?studentIds=2"
                            }
                          },
                          "coreHouse": {
                            "data": {
                              "id": "1",
                              "type": "coreHouse"
                            }
                          },
                          "contacts": {
                            "links": {
                              "related": "/v1/core/core-student/2/contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student/2"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "coreStudent",
                        "id": "2",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Smith",
                          "preferredName": "Jane",
                          "gender": null,
                          "barcode": "B000007001",
                          "examId": null,
                          "schoolYear": null,
                          "dateOfBirth": null,
                          "allergies": null,
                          "medicalConditions": null,
                          "externalId": "EXT_123",
                          "externalSource": "SentralEnrolment",
                          "username": null,
                          "email": null,
                          "mobile": null,
                          "refId": "8b6447c6-49e1-44f7-952c-12006df6dfab",
                          "eslSupportNeeded": false,
                          "eslDateAssessed": null,
                          "isEslSupportReceived": false,
                          "enrolDate": null,
                          "createdAt": null,
                          "updatedAt": null,
                          "isActive": true
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "additionalDetails": {
                            "data": {
                              "id": "1",
                              "type": "corePerson"
                            }
                          },
                          "attendedClasses": {
                            "links": {
                              "related": "/v1/core/core-student/2/attended-classes"
                            }
                          },
                          "studentRelationships": {
                            "links": {
                              "related": "/v1/core/core-student-relationships?studentIds=2"
                            }
                          },
                          "coreHouse": {
                            "data": {
                              "id": "1",
                              "type": "coreHouse"
                            }
                          },
                          "contacts": {
                            "links": {
                              "related": "/v1/core/core-student/2/contacts"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/core/core-student/2"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-daily-lesson/{id}/timetable-students": {
    "get": {
      "operationId": "getTimetableDailyLessonRelatedTimetableStudents",
      "summary": "Get Timetable Daily Lesson Related Timetable Students",
      "description": "Retrieves a page of the instances of ``, the relation `timetableStudents` of `timetableStudent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetableStudent' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableStudent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableStudent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableStudent",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "year": "12",
                          "gender": "F"
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-student/1"
                        }
                      },
                      {
                        "type": "timetableStudent",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "year": "12",
                          "gender": "F"
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-student/1"
                        }
                      },
                      {
                        "type": "timetableStudent",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "year": "12",
                          "gender": "F"
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-student/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-daily-lesson/{id}/timetable-teachers": {
    "get": {
      "operationId": "getTimetableDailyLessonRelatedTimetableTeachers",
      "summary": "Get Timetable Daily Lesson Related Timetable Teachers",
      "description": "Retrieves a page of the instances of ``, the relation `timetableTeachers` of `timetableTeacher`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetableTeacher' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableTeacher' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableTeacher"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableTeacher",
                        "id": "1",
                        "attributes": {
                          "title": "Mrs",
                          "firstName": "Jane",
                          "lastName": "Doe"
                        },
                        "relationships": {
                          "coreStaff": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-teacher/1"
                        }
                      },
                      {
                        "type": "timetableTeacher",
                        "id": "1",
                        "attributes": {
                          "title": "Mrs",
                          "firstName": "Jane",
                          "lastName": "Doe"
                        },
                        "relationships": {
                          "coreStaff": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-teacher/1"
                        }
                      },
                      {
                        "type": "timetableTeacher",
                        "id": "1",
                        "attributes": {
                          "title": "Mrs",
                          "firstName": "Jane",
                          "lastName": "Doe"
                        },
                        "relationships": {
                          "coreStaff": {
                            "data": {
                              "id": "2",
                              "type": "coreStaff"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-teacher/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-day": {
    "get": {
      "operationId": "getTimetableDays",
      "summary": "Get Timetable Days",
      "description": "Retrieves a page of instances of `timetableDay`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableDay' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableDay"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableDay",
                        "id": "1",
                        "attributes": {
                          "name": "Mon",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-day/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "timetableDay",
                        "id": "1",
                        "attributes": {
                          "name": "Mon",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-day/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "timetableDay",
                        "id": "1",
                        "attributes": {
                          "name": "Mon",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-day/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-day/{id}": {
    "get": {
      "operationId": "getTimetableDay",
      "summary": "Get Timetable Day",
      "description": "Retrieves a single instance of `timetableDay`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetableDay' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'timetableDay' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/timetableDay"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "timetableDay",
                      "id": "1",
                      "attributes": {
                        "name": "Mon",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/timetables/timetable-day/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-lesson": {
    "get": {
      "operationId": "getTimetableLessons",
      "summary": "Get Timetable Lessons",
      "description": "Retrieves all instances of timetableLesson.\nThis is very computationally intensive endpoint, use it sparingly and cache the results. The value of `(studentIds.length + staffIds.length + classIds.length) * days` must be at most 500, to avoid fetching too many data points at once.",
      "parameters": [
        {
          "in": "query",
          "name": "studentIds",
          "required": false,
          "description": "String Comma-separated list of student IDs to filter by.. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "staffIds",
          "required": false,
          "description": "String Comma-separated list of staff IDs to filter by.. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "classIds",
          "required": false,
          "description": "String Comma-separated list of timetableClass IDs to filter by.. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "fromDate",
          "required": false,
          "description": "Date (Y-m-d, eg. 20190102) Date from which to retrieve timetable lessons, inclusive range. When not specified it defaults to today. [optional] [default: Today]",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "toDate",
          "required": false,
          "description": "Date (Y-m-d, eg. 20190102) Date to which to retrieve timetable lessons, inclusive range. When not specified it uses `fromDate`. [optional]",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableLesson' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableLesson"
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      },
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      },
                      {
                        "type": "timetableLesson",
                        "id": "1-20180101",
                        "attributes": {
                          "className": null,
                          "subject": "Biology",
                          "roomName": null,
                          "teacherName": "Jane McDoe, John Seagull",
                          "teacherIds": [
                            1,
                            2
                          ],
                          "date": "2018-01-01",
                          "dayName": null,
                          "dayOrder": 0,
                          "periodName": null,
                          "periodOrder": null,
                          "startTime": "08:00:00",
                          "endTime": "08:00:00",
                          "colour": "#FFFFFF",
                          "classType": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-period": {
    "get": {
      "operationId": "getTimetablePeriods",
      "summary": "Get Timetable Periods",
      "description": "Retrieves a page of instances of `timetablePeriod`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetablePeriod' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetablePeriod"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetablePeriod",
                        "id": "1",
                        "attributes": {
                          "name": "Mon",
                          "order": 1,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-period/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "timetablePeriod",
                        "id": "1",
                        "attributes": {
                          "name": "Mon",
                          "order": 1,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-period/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "timetablePeriod",
                        "id": "1",
                        "attributes": {
                          "name": "Mon",
                          "order": 1,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-period/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-period-in-day": {
    "get": {
      "operationId": "getTimetablePeriodInDays",
      "summary": "Get Timetable Period In Days",
      "description": "Retrieves a page of instances of `timetablePeriodInDay`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "dayIds",
          "required": false,
          "description": "String Comma-separated list of `day` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "periodIds",
          "required": false,
          "description": "String Comma-separated list of `period` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetablePeriodInDay' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetablePeriodInDay"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetablePeriodInDay",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "order": 2,
                          "startTime": "08:15:00",
                          "endTime": "09:00:00",
                          "isActive": true
                        },
                        "relationships": {
                          "day": {
                            "data": {
                              "id": "2",
                              "type": "timetableDay"
                            }
                          },
                          "period": {
                            "data": {
                              "id": "3",
                              "type": "timetablePeriod"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-period-in-day/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "timetablePeriodInDay",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "order": 2,
                          "startTime": "08:15:00",
                          "endTime": "09:00:00",
                          "isActive": true
                        },
                        "relationships": {
                          "day": {
                            "data": {
                              "id": "2",
                              "type": "timetableDay"
                            }
                          },
                          "period": {
                            "data": {
                              "id": "3",
                              "type": "timetablePeriod"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-period-in-day/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "timetablePeriodInDay",
                        "id": "1",
                        "attributes": {
                          "name": null,
                          "order": 2,
                          "startTime": "08:15:00",
                          "endTime": "09:00:00",
                          "isActive": true
                        },
                        "relationships": {
                          "day": {
                            "data": {
                              "id": "2",
                              "type": "timetableDay"
                            }
                          },
                          "period": {
                            "data": {
                              "id": "3",
                              "type": "timetablePeriod"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-period-in-day/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-period-in-day/{id}": {
    "get": {
      "operationId": "getTimetablePeriodInDay",
      "summary": "Get Timetable Period In Day",
      "description": "Retrieves a single instance of `timetablePeriodInDay`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetablePeriodInDay' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'timetablePeriodInDay' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/timetablePeriodInDay"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "timetablePeriodInDay",
                      "id": "1",
                      "attributes": {
                        "name": null,
                        "order": 2,
                        "startTime": "08:15:00",
                        "endTime": "09:00:00",
                        "isActive": true
                      },
                      "relationships": {
                        "day": {
                          "data": {
                            "id": "2",
                            "type": "timetableDay"
                          }
                        },
                        "period": {
                          "data": {
                            "id": "3",
                            "type": "timetablePeriod"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/timetables/timetable-period-in-day/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-period/{id}": {
    "get": {
      "operationId": "getTimetablePeriod",
      "summary": "Get Timetable Period",
      "description": "Retrieves a single instance of `timetablePeriod`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetablePeriod' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'timetablePeriod' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/timetablePeriod"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "timetablePeriod",
                      "id": "1",
                      "attributes": {
                        "name": "Mon",
                        "order": 1,
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/timetables/timetable-period/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-room": {
    "get": {
      "operationId": "getTimetableRooms",
      "summary": "Get Timetable Rooms",
      "description": "Retrieves a page of instances of `timetableRoom`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableRoom' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableRoom"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableRoom",
                        "id": "1",
                        "attributes": {
                          "name": "F1C13B",
                          "capacity": 31,
                          "comment": "Room has access to projector",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-room/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "timetableRoom",
                        "id": "1",
                        "attributes": {
                          "name": "F1C13B",
                          "capacity": 31,
                          "comment": "Room has access to projector",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-room/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "timetableRoom",
                        "id": "1",
                        "attributes": {
                          "name": "F1C13B",
                          "capacity": 31,
                          "comment": "Room has access to projector",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-room/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-room/{id}": {
    "get": {
      "operationId": "getTimetableRoom",
      "summary": "Get Timetable Room",
      "description": "Retrieves a single instance of `timetableRoom`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetableRoom' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'timetableRoom' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/timetableRoom"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "timetableRoom",
                      "id": "1",
                      "attributes": {
                        "name": "F1C13B",
                        "capacity": 31,
                        "comment": "Room has access to projector",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/timetables/timetable-room/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-student": {
    "get": {
      "operationId": "getTimetableStudents",
      "summary": "Get Timetable Students",
      "description": "Retrieves a page of instances of `timetableStudent`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "coreStudentIds",
          "required": false,
          "description": "String Comma-separated list of `coreStudent` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "enrolmentStudentIds",
          "required": false,
          "description": "String Comma-separated list of `enrolmentStudent` linked through `coreStudent` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableStudent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableStudent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableStudent",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "year": "12",
                          "gender": "F"
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-student/1"
                        }
                      },
                      {
                        "type": "timetableStudent",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "year": "12",
                          "gender": "F"
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-student/1"
                        }
                      },
                      {
                        "type": "timetableStudent",
                        "id": "1",
                        "attributes": {
                          "firstName": "Jane",
                          "lastName": "Doe",
                          "year": "12",
                          "gender": "F"
                        },
                        "relationships": {
                          "coreStudent": {
                            "data": {
                              "id": "2",
                              "type": "coreStudent"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-student/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-student/{id}": {
    "get": {
      "operationId": "getTimetableStudent",
      "summary": "Get Timetable Student",
      "description": "Retrieves a single instance of `timetableStudent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetableStudent' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'timetableStudent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/timetableStudent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "timetableStudent",
                      "id": "1",
                      "attributes": {
                        "firstName": "Jane",
                        "lastName": "Doe",
                        "year": "12",
                        "gender": "F"
                      },
                      "relationships": {
                        "coreStudent": {
                          "data": {
                            "id": "2",
                            "type": "coreStudent"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/timetables/timetable-student/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-subject": {
    "get": {
      "operationId": "getTimetableSubjects",
      "summary": "Get Timetable Subjects",
      "description": "Retrieves a page of instances of `timetableSubject`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'timetableSubject' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetableSubject"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "timetableSubject",
                        "id": "1",
                        "attributes": {
                          "name": "Biology"
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-subject/1"
                        }
                      },
                      {
                        "type": "timetableSubject",
                        "id": "1",
                        "attributes": {
                          "name": "Biology"
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-subject/1"
                        }
                      },
                      {
                        "type": "timetableSubject",
                        "id": "1",
                        "attributes": {
                          "name": "Biology"
                        },
                        "links": {
                          "self": "/v1/timetables/timetable-subject/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/timetables/timetable-subject/{id}": {
    "get": {
      "operationId": "getTimetableSubject",
      "summary": "Get Timetable Subject",
      "description": "Retrieves a single instance of `timetableSubject`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'timetableSubject' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'timetableSubject' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/timetableSubject"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "timetableSubject",
                      "id": "1",
                      "attributes": {
                        "name": "Biology"
                      },
                      "links": {
                        "self": "/v1/timetables/timetable-subject/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/webcal/webcal-calendar": {
    "get": {
      "operationId": "getWebcalCalendars",
      "summary": "Get Webcal Calendars",
      "description": "Retrieves a page of instances of `webcalCalendar`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "ownerIds",
          "required": false,
          "description": "String Comma-separated list of `owner` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'webcalCalendar' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/webcalCalendar"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "webcalCalendar",
                        "id": "1",
                        "attributes": {
                          "calendarName": "Holidays",
                          "externalSource": "com.example.calendars"
                        },
                        "links": {
                          "self": "/v1/webcal/webcal-calendar/1"
                        }
                      },
                      {
                        "type": "webcalCalendar",
                        "id": "1",
                        "attributes": {
                          "calendarName": "Holidays",
                          "externalSource": "com.example.calendars"
                        },
                        "links": {
                          "self": "/v1/webcal/webcal-calendar/1"
                        }
                      },
                      {
                        "type": "webcalCalendar",
                        "id": "1",
                        "attributes": {
                          "calendarName": "Holidays",
                          "externalSource": "com.example.calendars"
                        },
                        "links": {
                          "self": "/v1/webcal/webcal-calendar/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "operationId": "postWebcalCalendar",
      "summary": "Post Webcal Calendar",
      "description": "Creates a new `webcalCalendar`\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`webcalCalendar`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `calendarName` → String Name of the calendar [example: \"John Doe's Calendar\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `externalSource` → String External source of this row [optional] [example: \"Google Calendar\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n * Relationships\n   * `owner` → [required] [single] expected type is `coreAdministrativeUser`. User who owns the calendar",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "calendarName": {
                              "type": "string",
                              "description": "String Name of the calendar [example: \"John Doe's Calendar\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "externalSource": {
                              "type": "string",
                              "description": "String External source of this row [example: \"Google Calendar\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "owner": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "webcalCalendar",
                    "attributes": {
                      "calendarName": "John Doe's Calendar",
                      "externalSource": "Google Calendar"
                    },
                    "relationships": {
                      "owner": {
                        "data": {
                          "id": 1,
                          "type": "coreAdministrativeUser"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webcalCalendar' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webcalCalendar"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webcalCalendar",
                      "id": "1",
                      "attributes": {
                        "calendarName": "Holidays",
                        "externalSource": "com.example.calendars"
                      },
                      "links": {
                        "self": "/v1/webcal/webcal-calendar/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/webcal/webcal-calendar-event": {
    "post": {
      "operationId": "postWebcalCalendarEvent",
      "summary": "Post Webcal Calendar Event",
      "description": "Creates a new `webcalCalendarEvent`\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`webcalCalendarEvent`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `title` → String Title of the event [example: \"Pizza Meeting\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `notes` → String Notes about the meeting (agenda, plan, requirements, etc) [optional] [example: \"Remember to bring your pizza sauces!\"] \nValue constraints:\nLength must be between 0 and 65535 characters, inclusive\n   * `link` → String Link that contains more information or the online meetup [optional] [example: \"https://zoom.us/test\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `date` → Date (, eg. 20190102) date of the event [example: \"2020-02-01\"]\n   * `startTime` → Time (H:i, eg 03:08) Time when the event starts [example: \"14:00:00\"]\n   * `endTime` → Time (H:i, eg 03:08) Time when the event ends [example: \"15:30:00\"]\n   * `category` → String One of the categories as defined in the calendar to which the event is added. It will happily accept other values, as there is no validation. [optional] [example: \"Tasks\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `otherDates` → Array of <Date (, eg. 20190102)> An array of additional dates when the event should occur. When modifying an existing event, if you provide this attribute it WILL REMOVE the old `otherDates` and REPLACE all of them with  [optional] [example: \"Google Calendar\"]\n * Relationships\n   * `calendar` → [required] [single] expected type is `webcalCalendar`. Calendar to which the event will be added",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "String Title of the event [example: \"Pizza Meeting\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "notes": {
                              "type": "string",
                              "description": "String Notes about the meeting (agenda, plan, requirements, etc) [example: \"Remember to bring your pizza sauces!\"] \nValue constraints:\nLength must be between 0 and 65535 characters, inclusive"
                            },
                            "link": {
                              "type": "string",
                              "description": "String Link that contains more information or the online meetup [example: \"https://zoom.us/test\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "date": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) date of the event [example: \"2020-02-01\"]"
                            },
                            "startTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) Time when the event starts [example: \"14:00:00\"]"
                            },
                            "endTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) Time when the event ends [example: \"15:30:00\"]"
                            },
                            "category": {
                              "type": "string",
                              "description": "String One of the categories as defined in the calendar to which the event is added. It will happily accept other values, as there is no validation. [example: \"Tasks\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "otherDates": {
                              "type": "array",
                              "description": "Array of <Date (, eg. 20190102)> An array of additional dates when the event should occur. When modifying an existing event, if you provide this attribute it WILL REMOVE the old `otherDates` and REPLACE all of them with  [optional] [example: \"Google Calendar\"]",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "calendar": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "webcalCalendarEvent",
                    "attributes": {
                      "title": "Pizza Meeting",
                      "notes": "Remember to bring your pizza sauces!",
                      "link": "https://zoom.us/test",
                      "date": "2020-02-01",
                      "startTime": "14:00:00",
                      "endTime": "15:30:00",
                      "category": "Tasks",
                      "otherDates": "Google Calendar"
                    },
                    "relationships": {
                      "calendar": {
                        "data": {
                          "id": 1,
                          "type": "webcalCalendar"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webcalCalendarEvent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webcalCalendarEvent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webcalCalendarEvent",
                      "id": "1",
                      "attributes": {
                        "title": "Meeting with the principal",
                        "notes": "Bring Doe's notes",
                        "link": null,
                        "date": "2019-03-01",
                        "otherDates": [],
                        "startTime": "12:00:00",
                        "endTime": "12:30:00",
                        "category": "Meetings"
                      },
                      "links": {
                        "self": "/v1/webcal/webcal-calendar-event/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getWebcalCalendarEvents",
      "summary": "Get Webcal Calendar Events",
      "description": "Retrieves a page of instances of `webcalCalendarEvent`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "calendarIds",
          "required": false,
          "description": "String Comma-separated list of `calendar` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "dates",
          "required": false,
          "description": "String Comma-separated list of dates to filter by. Checks both `date` and `otherDates`.. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'webcalCalendarEvent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/webcalCalendarEvent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "webcalCalendarEvent",
                        "id": "1",
                        "attributes": {
                          "title": "Meeting with the principal",
                          "notes": "Bring Doe's notes",
                          "link": null,
                          "date": "2019-03-01",
                          "otherDates": [],
                          "startTime": "12:00:00",
                          "endTime": "12:30:00",
                          "category": "Meetings"
                        },
                        "links": {
                          "self": "/v1/webcal/webcal-calendar-event/1"
                        }
                      },
                      {
                        "type": "webcalCalendarEvent",
                        "id": "1",
                        "attributes": {
                          "title": "Meeting with the principal",
                          "notes": "Bring Doe's notes",
                          "link": null,
                          "date": "2019-03-01",
                          "otherDates": [],
                          "startTime": "12:00:00",
                          "endTime": "12:30:00",
                          "category": "Meetings"
                        },
                        "links": {
                          "self": "/v1/webcal/webcal-calendar-event/1"
                        }
                      },
                      {
                        "type": "webcalCalendarEvent",
                        "id": "1",
                        "attributes": {
                          "title": "Meeting with the principal",
                          "notes": "Bring Doe's notes",
                          "link": null,
                          "date": "2019-03-01",
                          "otherDates": [],
                          "startTime": "12:00:00",
                          "endTime": "12:30:00",
                          "category": "Meetings"
                        },
                        "links": {
                          "self": "/v1/webcal/webcal-calendar-event/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/webcal/webcal-calendar-event/{id}": {
    "get": {
      "operationId": "getWebcalCalendarEvent",
      "summary": "Get Webcal Calendar Event",
      "description": "Retrieves a single instance of `webcalCalendarEvent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'webcalCalendarEvent' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webcalCalendarEvent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webcalCalendarEvent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webcalCalendarEvent",
                      "id": "1",
                      "attributes": {
                        "title": "Meeting with the principal",
                        "notes": "Bring Doe's notes",
                        "link": null,
                        "date": "2019-03-01",
                        "otherDates": [],
                        "startTime": "12:00:00",
                        "endTime": "12:30:00",
                        "category": "Meetings"
                      },
                      "links": {
                        "self": "/v1/webcal/webcal-calendar-event/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchWebcalCalendarEvent",
      "summary": "Patch Webcal Calendar Event",
      "description": "Updates an existing `webcalCalendarEvent`\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`webcalCalendarEvent`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `title` → String Title of the event [example: \"Pizza Meeting\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `notes` → String Notes about the meeting (agenda, plan, requirements, etc) [optional] [example: \"Remember to bring your pizza sauces!\"] \nValue constraints:\nLength must be between 0 and 65535 characters, inclusive\n   * `link` → String Link that contains more information or the online meetup [optional] [example: \"https://zoom.us/test\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `date` → Date (, eg. 20190102) date of the event [example: \"2020-02-01\"]\n   * `startTime` → Time (H:i, eg 03:08) Time when the event starts [example: \"14:00:00\"]\n   * `endTime` → Time (H:i, eg 03:08) Time when the event ends [example: \"15:30:00\"]\n   * `category` → String One of the categories as defined in the calendar to which the event is added. It will happily accept other values, as there is no validation. [optional] [example: \"Tasks\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `otherDates` → Array of <Date (, eg. 20190102)> An array of additional dates when the event should occur. When modifying an existing event, if you provide this attribute it WILL REMOVE the old `otherDates` and REPLACE all of them with  [optional] [example: \"Google Calendar\"]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `webcalCalendarEvent` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "String Title of the event [optional] [example: \"Pizza Meeting\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "notes": {
                              "type": "string",
                              "description": "String Notes about the meeting (agenda, plan, requirements, etc) [optional] [example: \"Remember to bring your pizza sauces!\"] \nValue constraints:\nLength must be between 0 and 65535 characters, inclusive"
                            },
                            "link": {
                              "type": "string",
                              "description": "String Link that contains more information or the online meetup [optional] [example: \"https://zoom.us/test\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "date": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) date of the event [optional] [example: \"2020-02-01\"]"
                            },
                            "startTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) Time when the event starts [optional] [example: \"14:00:00\"]"
                            },
                            "endTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) Time when the event ends [optional] [example: \"15:30:00\"]"
                            },
                            "category": {
                              "type": "string",
                              "description": "String One of the categories as defined in the calendar to which the event is added. It will happily accept other values, as there is no validation. [optional] [example: \"Tasks\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "otherDates": {
                              "type": "array",
                              "description": "Array of <Date (, eg. 20190102)> An array of additional dates when the event should occur. When modifying an existing event, if you provide this attribute it WILL REMOVE the old `otherDates` and REPLACE all of them with  [optional] [example: \"Google Calendar\"]",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "webcalCalendarEvent",
                    "id": 1,
                    "attributes": {
                      "title": "Pizza Meeting",
                      "notes": "Remember to bring your pizza sauces!",
                      "link": "https://zoom.us/test",
                      "date": "2020-02-01",
                      "startTime": "14:00:00",
                      "endTime": "15:30:00",
                      "category": "Tasks",
                      "otherDates": "Google Calendar"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webcalCalendarEvent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webcalCalendarEvent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webcalCalendarEvent",
                      "id": "1",
                      "attributes": {
                        "title": "Meeting with the principal",
                        "notes": "Bring Doe's notes",
                        "link": null,
                        "date": "2019-03-01",
                        "otherDates": [],
                        "startTime": "12:00:00",
                        "endTime": "12:30:00",
                        "category": "Meetings"
                      },
                      "links": {
                        "self": "/v1/webcal/webcal-calendar-event/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "operationId": "deleteWebcalCalendarEvent",
      "summary": "Delete Webcal Calendar Event",
      "description": "Deletes `webcalCalendarEvent` by ID",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `webcalCalendarEvent` to delete. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    }
  },
  "/v1/webcal/webcal-calendar-recurring-event": {
    "post": {
      "operationId": "postWebcalCalendarRecurringEvent",
      "summary": "Post Webcal Calendar Recurring Event",
      "description": "Creates a new `webcalCalendarRecurringEvent`\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`webcalCalendarRecurringEvent`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `title` → String Title of the event [example: \"Pizza Meeting\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `notes` → String Notes about the meeting (agenda, plan, requirements, etc) [optional] [example: \"Remember to bring your pizza sauces!\"] \nValue constraints:\nLength must be between 0 and 65535 characters, inclusive\n   * `link` → String Link that contains more information or the online meetup [optional] [example: \"https://zoom.us/test\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `startDate` → Date (, eg. 20190102) Date which signifies the start of the range during which the occurences happen [example: \"2020-02-01\"]\n   * `endDate` → Date (, eg. 20190102) Date which signifies the end of the range during which the occurences happen [example: \"2020-02-01\"]\n   * `startTime` → Time (H:i, eg 03:08) Time when the event starts [example: \"14:00:00\"]\n   * `endTime` → Time (H:i, eg 03:08) Time when the event ends [example: \"15:30:00\"]\n   * `category` → String One of the categories as defined in the calendar to which the event is added. It will happily accept other values, as there is no validation. [optional] [example: \"Tasks\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `recurrence` → String Type of the event recurrence. The details are explained in the description of `webcalCalendarRecurringEvent` attributes. [optional] [example: \"fortnight_even\"] \nValue constraints:\nAllowed values: \"day1\", \"day2\", \"day3\", \"day4\", \"day5\", \"week\", \"fortnight_even\", \"fortnight_odd\", null\n   * `recurrenceMonthDay` → Number When `recurrence` is null, this can be either `null` to make the event recur daily, or a number between 1 and 31 (inclusive) to to have the event recur once a month, on the provided day of the month. For other values of `recurrence` it MUST be `null`. [optional] [example: NULL] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 31 [inclusive]\n   * `recurrenceWeekDay` → Number When `recurrence` is not null, this indicates the day of the week on which the repetition happens. 1=Monday, 7=Sunday. [optional] [example: \"3\"] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 7 [inclusive]\n * Relationships\n   * `calendar` → [required] [single] expected type is `webcalCalendar`. Calendar to which the event will be added",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "String Title of the event [example: \"Pizza Meeting\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "notes": {
                              "type": "string",
                              "description": "String Notes about the meeting (agenda, plan, requirements, etc) [example: \"Remember to bring your pizza sauces!\"] \nValue constraints:\nLength must be between 0 and 65535 characters, inclusive"
                            },
                            "link": {
                              "type": "string",
                              "description": "String Link that contains more information or the online meetup [example: \"https://zoom.us/test\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "startDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date which signifies the start of the range during which the occurences happen [example: \"2020-02-01\"]"
                            },
                            "endDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date which signifies the end of the range during which the occurences happen [example: \"2020-02-01\"]"
                            },
                            "startTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) Time when the event starts [example: \"14:00:00\"]"
                            },
                            "endTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) Time when the event ends [example: \"15:30:00\"]"
                            },
                            "category": {
                              "type": "string",
                              "description": "String One of the categories as defined in the calendar to which the event is added. It will happily accept other values, as there is no validation. [example: \"Tasks\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "recurrence": {
                              "type": "string",
                              "description": "String Type of the event recurrence. The details are explained in the description of `webcalCalendarRecurringEvent` attributes. [example: \"fortnight_even\"] \nValue constraints:\nAllowed values: \"day1\", \"day2\", \"day3\", \"day4\", \"day5\", \"week\", \"fortnight_even\", \"fortnight_odd\", null"
                            },
                            "recurrenceMonthDay": {
                              "type": "number",
                              "description": "Number When `recurrence` is null, this can be either `null` to make the event recur daily, or a number between 1 and 31 (inclusive) to to have the event recur once a month, on the provided day of the month. For other values of `recurrence` it MUST be `null`. [optional] [example: NULL] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 31 [inclusive]"
                            },
                            "recurrenceWeekDay": {
                              "type": "number",
                              "description": "Number When `recurrence` is not null, this indicates the day of the week on which the repetition happens. 1=Monday, 7=Sunday. [optional] [example: \"3\"] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 7 [inclusive]"
                            }
                          }
                        },
                        "relationships": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "calendar": {
                              "description": "String",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "data": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "webcalCalendarRecurringEvent",
                    "attributes": {
                      "title": "Pizza Meeting",
                      "notes": "Remember to bring your pizza sauces!",
                      "link": "https://zoom.us/test",
                      "startDate": "2020-02-01",
                      "endDate": "2020-02-01",
                      "startTime": "14:00:00",
                      "endTime": "15:30:00",
                      "category": "Tasks",
                      "recurrence": "fortnight_even",
                      "recurrenceMonthDay": null,
                      "recurrenceWeekDay": "3"
                    },
                    "relationships": {
                      "calendar": {
                        "data": {
                          "id": 1,
                          "type": "webcalCalendar"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webcalCalendarRecurringEvent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webcalCalendarRecurringEvent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webcalCalendarRecurringEvent",
                      "id": "1",
                      "attributes": {
                        "title": "Monthly status update",
                        "notes": "Bring the notebook",
                        "link": null,
                        "startDate": "2019-01-01",
                        "endDate": "2019-12-31",
                        "startTime": null,
                        "endTime": null,
                        "recurrence": "day1",
                        "recurrenceMonth": null,
                        "recurrenceMonthDay": null,
                        "recurrenceWeekDay": 1,
                        "category": "Meetings",
                        "recurrenceDates": [
                          "2019-01-07",
                          "2019-02-04",
                          "2019-03-04",
                          "2019-04-01",
                          "2019-05-06",
                          "2019-06-03",
                          "2019-07-01",
                          "2019-08-05",
                          "2019-09-02",
                          "2019-10-07",
                          "2019-11-04",
                          "2019-12-02"
                        ]
                      },
                      "links": {
                        "self": "/v1/webcal/webcal-calendar-recurring-event/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getWebcalCalendarRecurringEvents",
      "summary": "Get Webcal Calendar Recurring Events",
      "description": "Retrieves a page of instances of `webcalCalendarRecurringEvent`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "calendarIds",
          "required": false,
          "description": "String Comma-separated list of `calendar` realtion IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'webcalCalendarRecurringEvent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/webcalCalendarRecurringEvent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "webcalCalendarRecurringEvent",
                        "id": "1",
                        "attributes": {
                          "title": "Monthly status update",
                          "notes": "Bring the notebook",
                          "link": null,
                          "startDate": "2019-01-01",
                          "endDate": "2019-12-31",
                          "startTime": null,
                          "endTime": null,
                          "recurrence": "day1",
                          "recurrenceMonth": null,
                          "recurrenceMonthDay": null,
                          "recurrenceWeekDay": 1,
                          "category": "Meetings",
                          "recurrenceDates": [
                            "2019-01-07",
                            "2019-02-04",
                            "2019-03-04",
                            "2019-04-01",
                            "2019-05-06",
                            "2019-06-03",
                            "2019-07-01",
                            "2019-08-05",
                            "2019-09-02",
                            "2019-10-07",
                            "2019-11-04",
                            "2019-12-02"
                          ]
                        },
                        "links": {
                          "self": "/v1/webcal/webcal-calendar-recurring-event/1"
                        }
                      },
                      {
                        "type": "webcalCalendarRecurringEvent",
                        "id": "1",
                        "attributes": {
                          "title": "Monthly status update",
                          "notes": "Bring the notebook",
                          "link": null,
                          "startDate": "2019-01-01",
                          "endDate": "2019-12-31",
                          "startTime": null,
                          "endTime": null,
                          "recurrence": "day1",
                          "recurrenceMonth": null,
                          "recurrenceMonthDay": null,
                          "recurrenceWeekDay": 1,
                          "category": "Meetings",
                          "recurrenceDates": [
                            "2019-01-07",
                            "2019-02-04",
                            "2019-03-04",
                            "2019-04-01",
                            "2019-05-06",
                            "2019-06-03",
                            "2019-07-01",
                            "2019-08-05",
                            "2019-09-02",
                            "2019-10-07",
                            "2019-11-04",
                            "2019-12-02"
                          ]
                        },
                        "links": {
                          "self": "/v1/webcal/webcal-calendar-recurring-event/1"
                        }
                      },
                      {
                        "type": "webcalCalendarRecurringEvent",
                        "id": "1",
                        "attributes": {
                          "title": "Monthly status update",
                          "notes": "Bring the notebook",
                          "link": null,
                          "startDate": "2019-01-01",
                          "endDate": "2019-12-31",
                          "startTime": null,
                          "endTime": null,
                          "recurrence": "day1",
                          "recurrenceMonth": null,
                          "recurrenceMonthDay": null,
                          "recurrenceWeekDay": 1,
                          "category": "Meetings",
                          "recurrenceDates": [
                            "2019-01-07",
                            "2019-02-04",
                            "2019-03-04",
                            "2019-04-01",
                            "2019-05-06",
                            "2019-06-03",
                            "2019-07-01",
                            "2019-08-05",
                            "2019-09-02",
                            "2019-10-07",
                            "2019-11-04",
                            "2019-12-02"
                          ]
                        },
                        "links": {
                          "self": "/v1/webcal/webcal-calendar-recurring-event/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/webcal/webcal-calendar-recurring-event/{id}": {
    "delete": {
      "operationId": "deleteWebcalCalendarRecurringEvent",
      "summary": "Delete Webcal Calendar Recurring Event",
      "description": "Deletes `webcalCalendarRecurringEvent` by ID",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `webcalCalendarRecurringEvent` to delete. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    },
    "get": {
      "operationId": "getWebcalCalendarRecurringEvent",
      "summary": "Get Webcal Calendar Recurring Event",
      "description": "Retrieves a single instance of `webcalCalendarRecurringEvent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'webcalCalendarRecurringEvent' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webcalCalendarRecurringEvent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webcalCalendarRecurringEvent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webcalCalendarRecurringEvent",
                      "id": "1",
                      "attributes": {
                        "title": "Monthly status update",
                        "notes": "Bring the notebook",
                        "link": null,
                        "startDate": "2019-01-01",
                        "endDate": "2019-12-31",
                        "startTime": null,
                        "endTime": null,
                        "recurrence": "day1",
                        "recurrenceMonth": null,
                        "recurrenceMonthDay": null,
                        "recurrenceWeekDay": 1,
                        "category": "Meetings",
                        "recurrenceDates": [
                          "2019-01-07",
                          "2019-02-04",
                          "2019-03-04",
                          "2019-04-01",
                          "2019-05-06",
                          "2019-06-03",
                          "2019-07-01",
                          "2019-08-05",
                          "2019-09-02",
                          "2019-10-07",
                          "2019-11-04",
                          "2019-12-02"
                        ]
                      },
                      "links": {
                        "self": "/v1/webcal/webcal-calendar-recurring-event/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "patch": {
      "operationId": "patchWebcalCalendarRecurringEvent",
      "summary": "Patch Webcal Calendar Recurring Event",
      "description": "Updates an existing `webcalCalendarRecurringEvent`\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`webcalCalendarRecurringEvent`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `title` → String Title of the event [example: \"Pizza Meeting\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `notes` → String Notes about the meeting (agenda, plan, requirements, etc) [optional] [example: \"Remember to bring your pizza sauces!\"] \nValue constraints:\nLength must be between 0 and 65535 characters, inclusive\n   * `link` → String Link that contains more information or the online meetup [optional] [example: \"https://zoom.us/test\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `startDate` → Date (, eg. 20190102) Date which signifies the start of the range during which the occurences happen [example: \"2020-02-01\"]\n   * `endDate` → Date (, eg. 20190102) Date which signifies the end of the range during which the occurences happen [example: \"2020-02-01\"]\n   * `startTime` → Time (H:i, eg 03:08) Time when the event starts [example: \"14:00:00\"]\n   * `endTime` → Time (H:i, eg 03:08) Time when the event ends [example: \"15:30:00\"]\n   * `category` → String One of the categories as defined in the calendar to which the event is added. It will happily accept other values, as there is no validation. [optional] [example: \"Tasks\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `recurrence` → String Type of the event recurrence. The details are explained in the description of `webcalCalendarRecurringEvent` attributes. [optional] [example: \"fortnight_even\"] \nValue constraints:\nAllowed values: \"day1\", \"day2\", \"day3\", \"day4\", \"day5\", \"week\", \"fortnight_even\", \"fortnight_odd\", null\n   * `recurrenceMonthDay` → Number When `recurrence` is null, this can be either `null` to make the event recur daily, or a number between 1 and 31 (inclusive) to to have the event recur once a month, on the provided day of the month. For other values of `recurrence` it MUST be `null`. [optional] [example: NULL] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 31 [inclusive]\n   * `recurrenceWeekDay` → Number When `recurrence` is not null, this indicates the day of the week on which the repetition happens. 1=Monday, 7=Sunday. [optional] [example: \"3\"] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 7 [inclusive]\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `webcalCalendarRecurringEvent` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "String Title of the event [optional] [example: \"Pizza Meeting\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "notes": {
                              "type": "string",
                              "description": "String Notes about the meeting (agenda, plan, requirements, etc) [optional] [example: \"Remember to bring your pizza sauces!\"] \nValue constraints:\nLength must be between 0 and 65535 characters, inclusive"
                            },
                            "link": {
                              "type": "string",
                              "description": "String Link that contains more information or the online meetup [optional] [example: \"https://zoom.us/test\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "startDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date which signifies the start of the range during which the occurences happen [optional] [example: \"2020-02-01\"]"
                            },
                            "endDate": {
                              "type": "string",
                              "description": "Date (, eg. 20190102) Date which signifies the end of the range during which the occurences happen [optional] [example: \"2020-02-01\"]"
                            },
                            "startTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) Time when the event starts [optional] [example: \"14:00:00\"]"
                            },
                            "endTime": {
                              "type": "string",
                              "description": "Time (H:i, eg 03:08) Time when the event ends [optional] [example: \"15:30:00\"]"
                            },
                            "category": {
                              "type": "string",
                              "description": "String One of the categories as defined in the calendar to which the event is added. It will happily accept other values, as there is no validation. [optional] [example: \"Tasks\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "recurrence": {
                              "type": "string",
                              "description": "String Type of the event recurrence. The details are explained in the description of `webcalCalendarRecurringEvent` attributes. [optional] [example: \"fortnight_even\"] \nValue constraints:\nAllowed values: \"day1\", \"day2\", \"day3\", \"day4\", \"day5\", \"week\", \"fortnight_even\", \"fortnight_odd\", null"
                            },
                            "recurrenceMonthDay": {
                              "type": "number",
                              "description": "Number When `recurrence` is null, this can be either `null` to make the event recur daily, or a number between 1 and 31 (inclusive) to to have the event recur once a month, on the provided day of the month. For other values of `recurrence` it MUST be `null`. [optional] [example: NULL] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 31 [inclusive]"
                            },
                            "recurrenceWeekDay": {
                              "type": "number",
                              "description": "Number When `recurrence` is not null, this indicates the day of the week on which the repetition happens. 1=Monday, 7=Sunday. [optional] [example: \"3\"] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 7 [inclusive]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "webcalCalendarRecurringEvent",
                    "id": 1,
                    "attributes": {
                      "title": "Pizza Meeting",
                      "notes": "Remember to bring your pizza sauces!",
                      "link": "https://zoom.us/test",
                      "startDate": "2020-02-01",
                      "endDate": "2020-02-01",
                      "startTime": "14:00:00",
                      "endTime": "15:30:00",
                      "category": "Tasks",
                      "recurrence": "fortnight_even",
                      "recurrenceMonthDay": null,
                      "recurrenceWeekDay": "3"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webcalCalendarRecurringEvent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webcalCalendarRecurringEvent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webcalCalendarRecurringEvent",
                      "id": "1",
                      "attributes": {
                        "title": "Monthly status update",
                        "notes": "Bring the notebook",
                        "link": null,
                        "startDate": "2019-01-01",
                        "endDate": "2019-12-31",
                        "startTime": null,
                        "endTime": null,
                        "recurrence": "day1",
                        "recurrenceMonth": null,
                        "recurrenceMonthDay": null,
                        "recurrenceWeekDay": 1,
                        "category": "Meetings",
                        "recurrenceDates": [
                          "2019-01-07",
                          "2019-02-04",
                          "2019-03-04",
                          "2019-04-01",
                          "2019-05-06",
                          "2019-06-03",
                          "2019-07-01",
                          "2019-08-05",
                          "2019-09-02",
                          "2019-10-07",
                          "2019-11-04",
                          "2019-12-02"
                        ]
                      },
                      "links": {
                        "self": "/v1/webcal/webcal-calendar-recurring-event/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/webcal/webcal-calendar/{id}": {
    "delete": {
      "operationId": "deleteWebcalCalendar",
      "summary": "Delete Webcal Calendar",
      "description": "Deletes `webcalCalendar` by ID",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `webcalCalendar` to delete. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    },
    "patch": {
      "operationId": "patchWebcalCalendar",
      "summary": "Patch Webcal Calendar",
      "description": "Updates an existing `webcalCalendar`\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`webcalCalendar`\n * ID is required\n * Exactly 1 instance\n * Attributes\n   * `calendarName` → String Name of the calendar [example: \"John Doe's Calendar\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n   * `externalSource` → String External source of this row [optional] [example: \"Google Calendar\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive\n * No relationships",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `webcalCalendar` that should be updated. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "calendarName": {
                              "type": "string",
                              "description": "String Name of the calendar [optional] [example: \"John Doe's Calendar\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            },
                            "externalSource": {
                              "type": "string",
                              "description": "String External source of this row [optional] [example: \"Google Calendar\"] \nValue constraints:\nLength must be between 0 and 255 characters, inclusive"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "webcalCalendar",
                    "id": 1,
                    "attributes": {
                      "calendarName": "John Doe's Calendar",
                      "externalSource": "Google Calendar"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webcalCalendar' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webcalCalendar"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webcalCalendar",
                      "id": "1",
                      "attributes": {
                        "calendarName": "Holidays",
                        "externalSource": "com.example.calendars"
                      },
                      "links": {
                        "self": "/v1/webcal/webcal-calendar/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getWebcalCalendar",
      "summary": "Get Webcal Calendar",
      "description": "Retrieves a single instance of `webcalCalendar`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'webcalCalendar' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webcalCalendar' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webcalCalendar"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webcalCalendar",
                      "id": "1",
                      "attributes": {
                        "calendarName": "Holidays",
                        "externalSource": "com.example.calendars"
                      },
                      "links": {
                        "self": "/v1/webcal/webcal-calendar/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/webhooks/event": {
    "get": {
      "operationId": "getWebhookEvents",
      "summary": "Get Webhook Events",
      "description": "Retrieves a page of instances of `webhookEvent`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'webhookEvent' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/webhookEvent"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "webhookEvent",
                        "id": "1",
                        "attributes": {
                          "model": "student",
                          "modelId": 1,
                          "tenantId": "",
                          "operation": "updated",
                          "createdAt": null
                        },
                        "links": {
                          "self": "/v1/webhooks/event/1"
                        }
                      },
                      {
                        "type": "webhookEvent",
                        "id": "1",
                        "attributes": {
                          "model": "student",
                          "modelId": 1,
                          "tenantId": "",
                          "operation": "updated",
                          "createdAt": null
                        },
                        "links": {
                          "self": "/v1/webhooks/event/1"
                        }
                      },
                      {
                        "type": "webhookEvent",
                        "id": "1",
                        "attributes": {
                          "model": "student",
                          "modelId": 1,
                          "tenantId": "",
                          "operation": "updated",
                          "createdAt": null
                        },
                        "links": {
                          "self": "/v1/webhooks/event/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/webhooks/event/{id}": {
    "get": {
      "operationId": "getWebhookEvent",
      "summary": "Get Webhook Event",
      "description": "Retrieves a single instance of `webhookEvent`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'webhookEvent' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webhookEvent' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webhookEvent"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webhookEvent",
                      "id": "1",
                      "attributes": {
                        "model": "student",
                        "modelId": 1,
                        "tenantId": "",
                        "operation": "updated",
                        "createdAt": null
                      },
                      "links": {
                        "self": "/v1/webhooks/event/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/webhooks/listener": {
    "post": {
      "operationId": "postWebhookListener",
      "summary": "Post Webhook Listener",
      "description": "Registers a new endpoint to receive push notifications from Sentral.\nThe following models are currently supported: activity, attendeeLink, ability, personAbilityLink, person, doctor, emergencyContactLink, medicalConditionAdd, medicalConditionAllergy, medicalConditionAsthma, medicalConditionDiabetes, medicalConditionEpilepsy, medicalConditionOther, prescribedMedication, vaccination, household, householdAddress, student, enrolment, familyChangeRequest, familyChangeRequestDetail, medicalChangeConditionAdd, medicalChangeConditionAllergy, medicalChangeConditionAsthma, medicalChangeConditionDiabetes, medicalChangeConditionEpilepsy, medicalChangeConditionOther, medicalChangeVaccination, medicalChangeDoctor, medicalChangeMisc, medicalChangeRequest, studentEnrolmentDraft, studentSelection, timetableDailyLesson, absence, consent, personConsentLink, activityInstance, activityResponse\nThe following operation are supported: created, updated, deleted\nThe push notification contains the data sent in JSON API format, with the payload being an array of resources of type 'webhookOperation', where the ID is unique for each event and there are three attributes:\n - `op`, the type of operation that was done on the model\n - `model`, the name of the model/resource as defined in schema\n - `modelId`, ID of the affected model/resource\nAt the moment the push notifications are not signed.\n\nPayload has the following requirements:\n * Expects a single resource.\n\nAnd supports these models:\n\n`webhookListener`\n * Must not have ID\n * Exactly 1 instance\n * Attributes\n   * `name` → String Name for the webhook listener [example: \"Client endpoint\"] \nValue constraints:\nLength must be between 1 and 256 characters, inclusive\n   * `endpoint` → String URL to which the push notifications will be sent [example: \"https://example.com/sentral/webhook-push\"] \nValue constraints:\nMust be a valid URL\nLength must be between 1 and 1024 characters, inclusive\n   * `secretKey` → String Secret key used for signing push messages. [example: \"d70a7c4e58e51901d9c7f5fed2d597c6\"] \nValue constraints:\nLength must be between 32 and 256 characters, inclusive\n * No relationships",
      "requestBody": {
        "required": true,
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "String Name for the webhook listener [example: \"Client endpoint\"] \nValue constraints:\nLength must be between 1 and 256 characters, inclusive"
                            },
                            "endpoint": {
                              "type": "string",
                              "description": "String URL to which the push notifications will be sent [example: \"https://example.com/sentral/webhook-push\"] \nValue constraints:\nMust be a valid URL\nLength must be between 1 and 1024 characters, inclusive"
                            },
                            "secretKey": {
                              "type": "string",
                              "description": "String Secret key used for signing push messages. [example: \"d70a7c4e58e51901d9c7f5fed2d597c6\"] \nValue constraints:\nLength must be between 32 and 256 characters, inclusive"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "examples": {
              "validRequest": {
                "value": {
                  "data": {
                    "type": "webhookListener",
                    "attributes": {
                      "name": "Client endpoint",
                      "endpoint": "https://example.com/sentral/webhook-push",
                      "secretKey": "d70a7c4e58e51901d9c7f5fed2d597c6"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webhookListener' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webhookListener"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webhookListener",
                      "id": "1",
                      "attributes": {
                        "name": "Primary endpoint",
                        "endpoint": "https://example.com/endpoint",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/webhooks/listener/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "get": {
      "operationId": "getWebhookListeners",
      "summary": "Get Webhook Listeners",
      "description": "Retrieves a page of instances of `webhookListener`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'webhookListener' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/webhookListener"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "webhookListener",
                        "id": "1",
                        "attributes": {
                          "name": "Primary endpoint",
                          "endpoint": "https://example.com/endpoint",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/webhooks/listener/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "webhookListener",
                        "id": "1",
                        "attributes": {
                          "name": "Primary endpoint",
                          "endpoint": "https://example.com/endpoint",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/webhooks/listener/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "webhookListener",
                        "id": "1",
                        "attributes": {
                          "name": "Primary endpoint",
                          "endpoint": "https://example.com/endpoint",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/webhooks/listener/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/webhooks/listener/{id}": {
    "delete": {
      "operationId": "deleteWebhookListener",
      "summary": "Delete Webhook Listener",
      "description": "Removes existing 'webhookListener'.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the `webhookListener` that should be deleted. [example: 1]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Deletion was successful"
        }
      }
    },
    "get": {
      "operationId": "getWebhookListener",
      "summary": "Get Webhook Listener",
      "description": "Retrieves a single instance of `webhookListener`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'webhookListener' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webhookListener' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webhookListener"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webhookListener",
                      "id": "1",
                      "attributes": {
                        "name": "Primary endpoint",
                        "endpoint": "https://example.com/endpoint",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/webhooks/listener/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/webhooks/listener/{id}/send-test": {
    "post": {
      "operationId": "postWebhookListenerSendTest",
      "summary": "Post Webhook Listener Send Test",
      "description": "Sends a test request to the listener with fake data. Send `md5()` of the secret key of the tested listener as the body of the POST request to validate.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'webhookListener' to test [example: 17]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webhookTestMessageResponse' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webhookTestMessageResponse"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webhookTestMessageResponse",
                      "id": "api",
                      "attributes": {
                        "status": "200",
                        "headers": {
                          "Date": "Tue, 07 Jul 2020 09:50:11 GMT"
                        },
                        "body": "Ok",
                        "exception": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/webhooks/pending-message": {
    "get": {
      "operationId": "getWebhookPendingMessages",
      "summary": "Get Webhook Pending Messages",
      "description": "Retrieves a page of instances of `webhookPendingMessage`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'webhookPendingMessage' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/webhookPendingMessage"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "webhookPendingMessage",
                        "id": "1",
                        "attributes": {
                          "model": "student",
                          "modelId": 1,
                          "tenantCode": null,
                          "tenantKey": null,
                          "operation": "updated",
                          "attempts": 1,
                          "nextAttemptAt": {
                            "timestamp": 1533124800,
                            "iso8601": "2018-08-01T12:00:00+0000"
                          },
                          "createdAt": null,
                          "sentAt": null
                        },
                        "relationships": {
                          "event": {
                            "data": {
                              "id": "1",
                              "type": "webhookEvent"
                            }
                          },
                          "listener": {
                            "data": {
                              "id": "1",
                              "type": "webhookListener"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/webhooks/pending-message/1"
                        }
                      },
                      {
                        "type": "webhookPendingMessage",
                        "id": "1",
                        "attributes": {
                          "model": "student",
                          "modelId": 1,
                          "tenantCode": null,
                          "tenantKey": null,
                          "operation": "updated",
                          "attempts": 1,
                          "nextAttemptAt": {
                            "timestamp": 1533124800,
                            "iso8601": "2018-08-01T12:00:00+0000"
                          },
                          "createdAt": null,
                          "sentAt": null
                        },
                        "relationships": {
                          "event": {
                            "data": {
                              "id": "1",
                              "type": "webhookEvent"
                            }
                          },
                          "listener": {
                            "data": {
                              "id": "1",
                              "type": "webhookListener"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/webhooks/pending-message/1"
                        }
                      },
                      {
                        "type": "webhookPendingMessage",
                        "id": "1",
                        "attributes": {
                          "model": "student",
                          "modelId": 1,
                          "tenantCode": null,
                          "tenantKey": null,
                          "operation": "updated",
                          "attempts": 1,
                          "nextAttemptAt": {
                            "timestamp": 1533124800,
                            "iso8601": "2018-08-01T12:00:00+0000"
                          },
                          "createdAt": null,
                          "sentAt": null
                        },
                        "relationships": {
                          "event": {
                            "data": {
                              "id": "1",
                              "type": "webhookEvent"
                            }
                          },
                          "listener": {
                            "data": {
                              "id": "1",
                              "type": "webhookListener"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/webhooks/pending-message/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/webhooks/pending-message/{id}": {
    "get": {
      "operationId": "getWebhookPendingMessage",
      "summary": "Get Webhook Pending Message",
      "description": "Retrieves a single instance of `webhookPendingMessage`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'webhookPendingMessage' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'webhookPendingMessage' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/webhookPendingMessage"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "webhookPendingMessage",
                      "id": "1",
                      "attributes": {
                        "model": "student",
                        "modelId": 1,
                        "tenantCode": null,
                        "tenantKey": null,
                        "operation": "updated",
                        "attempts": 1,
                        "nextAttemptAt": {
                          "timestamp": 1533124800,
                          "iso8601": "2018-08-01T12:00:00+0000"
                        },
                        "createdAt": null,
                        "sentAt": null
                      },
                      "relationships": {
                        "event": {
                          "data": {
                            "id": "1",
                            "type": "webhookEvent"
                          }
                        },
                        "listener": {
                          "data": {
                            "id": "1",
                            "type": "webhookListener"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/webhooks/pending-message/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/award": {
    "get": {
      "operationId": "getAwards",
      "summary": "Get Awards",
      "description": "Retrieves a page of instances of `award`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'award' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/award"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "award",
                        "id": "1",
                        "attributes": {
                          "name": "International Spelling Bee Championship 2019",
                          "value": 5,
                          "pointValue": 3,
                          "sequence": 1
                        },
                        "relationships": {
                          "category": {
                            "data": {
                              "id": "2",
                              "type": "awardCategory"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/award/1"
                        }
                      },
                      {
                        "type": "award",
                        "id": "1",
                        "attributes": {
                          "name": "International Spelling Bee Championship 2019",
                          "value": 5,
                          "pointValue": 3,
                          "sequence": 1
                        },
                        "relationships": {
                          "category": {
                            "data": {
                              "id": "2",
                              "type": "awardCategory"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/award/1"
                        }
                      },
                      {
                        "type": "award",
                        "id": "1",
                        "attributes": {
                          "name": "International Spelling Bee Championship 2019",
                          "value": 5,
                          "pointValue": 3,
                          "sequence": 1
                        },
                        "relationships": {
                          "category": {
                            "data": {
                              "id": "2",
                              "type": "awardCategory"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/award/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/award-category": {
    "get": {
      "operationId": "getAwardCategories",
      "summary": "Get Award Categories",
      "description": "Retrieves a page of instances of `awardCategory`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'awardCategory' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/awardCategory"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "awardCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Spelling bee awards",
                          "level": 15,
                          "isIncludedInTally": false,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/award-category/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "awardCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Spelling bee awards",
                          "level": 15,
                          "isIncludedInTally": false,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/award-category/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "awardCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Spelling bee awards",
                          "level": 15,
                          "isIncludedInTally": false,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/award-category/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/award-category/{id}": {
    "get": {
      "operationId": "getAwardCategory",
      "summary": "Get Award Category",
      "description": "Retrieves a single instance of `awardCategory`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'awardCategory' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'awardCategory' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/awardCategory"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "awardCategory",
                      "id": "1",
                      "attributes": {
                        "name": "Spelling bee awards",
                        "level": 15,
                        "isIncludedInTally": false,
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/welfare/award-category/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/award/{id}": {
    "get": {
      "operationId": "getAward",
      "summary": "Get Award",
      "description": "Retrieves a single instance of `award`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'award' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'award' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/award"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "award",
                      "id": "1",
                      "attributes": {
                        "name": "International Spelling Bee Championship 2019",
                        "value": 5,
                        "pointValue": 3,
                        "sequence": 1
                      },
                      "relationships": {
                        "category": {
                          "data": {
                            "id": "2",
                            "type": "awardCategory"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/welfare/award/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/detention": {
    "get": {
      "operationId": "getDetentions",
      "summary": "Get Detentions",
      "description": "Retrieves a page of instances of `detention`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'detention' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/detention"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "detention",
                        "id": "1",
                        "attributes": {
                          "detentionDate": "2018-02-03",
                          "comment": "For running away from the class.",
                          "allowReschedule": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "status": {
                            "data": {
                              "id": "2",
                              "type": "detentionStatus"
                            }
                          },
                          "period": {
                            "data": {
                              "id": "3",
                              "type": "detentionPeriod"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/detention/1"
                        }
                      },
                      {
                        "type": "detention",
                        "id": "1",
                        "attributes": {
                          "detentionDate": "2018-02-03",
                          "comment": "For running away from the class.",
                          "allowReschedule": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "status": {
                            "data": {
                              "id": "2",
                              "type": "detentionStatus"
                            }
                          },
                          "period": {
                            "data": {
                              "id": "3",
                              "type": "detentionPeriod"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/detention/1"
                        }
                      },
                      {
                        "type": "detention",
                        "id": "1",
                        "attributes": {
                          "detentionDate": "2018-02-03",
                          "comment": "For running away from the class.",
                          "allowReschedule": true
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "1",
                              "type": "student"
                            }
                          },
                          "status": {
                            "data": {
                              "id": "2",
                              "type": "detentionStatus"
                            }
                          },
                          "period": {
                            "data": {
                              "id": "3",
                              "type": "detentionPeriod"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/detention/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/detention-period": {
    "get": {
      "operationId": "getDetentionPeriods",
      "summary": "Get Detention Periods",
      "description": "Retrieves a page of instances of `detentionPeriod`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'detentionPeriod' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/detentionPeriod"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "detentionPeriod",
                        "id": "1",
                        "attributes": {
                          "name": "Friday evening detention",
                          "maxStudents": 5,
                          "sequence": 2,
                          "restrictToDays": [
                            5
                          ],
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/detention-period/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "detentionPeriod",
                        "id": "1",
                        "attributes": {
                          "name": "Friday evening detention",
                          "maxStudents": 5,
                          "sequence": 2,
                          "restrictToDays": [
                            5
                          ],
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/detention-period/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "detentionPeriod",
                        "id": "1",
                        "attributes": {
                          "name": "Friday evening detention",
                          "maxStudents": 5,
                          "sequence": 2,
                          "restrictToDays": [
                            5
                          ],
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/detention-period/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/detention-period/{id}": {
    "get": {
      "operationId": "getDetentionPeriod",
      "summary": "Get Detention Period",
      "description": "Retrieves a single instance of `detentionPeriod`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'detentionPeriod' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'detentionPeriod' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/detentionPeriod"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "detentionPeriod",
                      "id": "1",
                      "attributes": {
                        "name": "Friday evening detention",
                        "maxStudents": 5,
                        "sequence": 2,
                        "restrictToDays": [
                          5
                        ],
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/welfare/detention-period/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/detention-status": {
    "get": {
      "operationId": "getDetentionStatuses",
      "summary": "Get Detention Statuses",
      "description": "Retrieves a page of instances of `detentionStatus`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'detentionStatus' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/detentionStatus"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "detentionStatus",
                        "id": "1",
                        "attributes": {
                          "name": "Not Yet Marked",
                          "interfaceColour": "666666",
                          "isRescheduleRequired": false,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/detention-status/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "detentionStatus",
                        "id": "1",
                        "attributes": {
                          "name": "Not Yet Marked",
                          "interfaceColour": "666666",
                          "isRescheduleRequired": false,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/detention-status/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "detentionStatus",
                        "id": "1",
                        "attributes": {
                          "name": "Not Yet Marked",
                          "interfaceColour": "666666",
                          "isRescheduleRequired": false,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/detention-status/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/detention-status/{id}": {
    "get": {
      "operationId": "getDetentionStatus",
      "summary": "Get Detention Status",
      "description": "Retrieves a single instance of `detentionStatus`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'detentionStatus' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'detentionStatus' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/detentionStatus"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "detentionStatus",
                      "id": "1",
                      "attributes": {
                        "name": "Not Yet Marked",
                        "interfaceColour": "666666",
                        "isRescheduleRequired": false,
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/welfare/detention-status/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/detention/{id}": {
    "get": {
      "operationId": "getDetention",
      "summary": "Get Detention",
      "description": "Retrieves a single instance of `detention`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'detention' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'detention' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/detention"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "detention",
                      "id": "1",
                      "attributes": {
                        "detentionDate": "2018-02-03",
                        "comment": "For running away from the class.",
                        "allowReschedule": true
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "1",
                            "type": "student"
                          }
                        },
                        "status": {
                          "data": {
                            "id": "2",
                            "type": "detentionStatus"
                          }
                        },
                        "period": {
                          "data": {
                            "id": "3",
                            "type": "detentionPeriod"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/welfare/detention/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/incident": {
    "get": {
      "operationId": "getIncidents",
      "summary": "Get Incidents",
      "description": "Retrieves a page of instances of `incident`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'incident' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/incident"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "incident",
                        "id": "1",
                        "attributes": {
                          "incidentDate": "2018-01-01",
                          "incidentTime": "12:30:10",
                          "isConfidential": true,
                          "isReadOnly": false
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "type": {
                            "data": {
                              "id": "2",
                              "type": "incidentType"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/incident/1"
                        }
                      },
                      {
                        "type": "incident",
                        "id": "1",
                        "attributes": {
                          "incidentDate": "2018-01-01",
                          "incidentTime": "12:30:10",
                          "isConfidential": true,
                          "isReadOnly": false
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "type": {
                            "data": {
                              "id": "2",
                              "type": "incidentType"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/incident/1"
                        }
                      },
                      {
                        "type": "incident",
                        "id": "1",
                        "attributes": {
                          "incidentDate": "2018-01-01",
                          "incidentTime": "12:30:10",
                          "isConfidential": true,
                          "isReadOnly": false
                        },
                        "relationships": {
                          "teacher": {
                            "data": {
                              "id": "2",
                              "type": "staff"
                            }
                          },
                          "type": {
                            "data": {
                              "id": "2",
                              "type": "incidentType"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/incident/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/incident-category": {
    "get": {
      "operationId": "getIncidentCategories",
      "summary": "Get Incident Categories",
      "description": "Retrieves a page of instances of `incidentCategory`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'incidentCategory' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/incidentCategory"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "incidentCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Positive Incident",
                          "interfaceForegroundColour": "94BE3F",
                          "interfaceBackgroundColour": "EEFFEE",
                          "defaultStatus": "Completed",
                          "canIncludeVictims": false,
                          "defaultToConfidential": false,
                          "isVisibleInParentPortal": true,
                          "isVisibleInStudentPortal": true,
                          "isHiddenFromReports": false,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/incident-category/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "incidentCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Positive Incident",
                          "interfaceForegroundColour": "94BE3F",
                          "interfaceBackgroundColour": "EEFFEE",
                          "defaultStatus": "Completed",
                          "canIncludeVictims": false,
                          "defaultToConfidential": false,
                          "isVisibleInParentPortal": true,
                          "isVisibleInStudentPortal": true,
                          "isHiddenFromReports": false,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/incident-category/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "incidentCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Positive Incident",
                          "interfaceForegroundColour": "94BE3F",
                          "interfaceBackgroundColour": "EEFFEE",
                          "defaultStatus": "Completed",
                          "canIncludeVictims": false,
                          "defaultToConfidential": false,
                          "isVisibleInParentPortal": true,
                          "isVisibleInStudentPortal": true,
                          "isHiddenFromReports": false,
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/incident-category/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/incident-category/{id}": {
    "get": {
      "operationId": "getIncidentCategory",
      "summary": "Get Incident Category",
      "description": "Retrieves a single instance of `incidentCategory`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'incidentCategory' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'incidentCategory' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/incidentCategory"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "incidentCategory",
                      "id": "1",
                      "attributes": {
                        "name": "Positive Incident",
                        "interfaceForegroundColour": "94BE3F",
                        "interfaceBackgroundColour": "EEFFEE",
                        "defaultStatus": "Completed",
                        "canIncludeVictims": false,
                        "defaultToConfidential": false,
                        "isVisibleInParentPortal": true,
                        "isVisibleInStudentPortal": true,
                        "isHiddenFromReports": false,
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/welfare/incident-category/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/incident-type": {
    "get": {
      "operationId": "getIncidentTypes",
      "summary": "Get Incident Types",
      "description": "Retrieves a page of instances of `incidentType`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'incidentType' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/incidentType"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "incidentType",
                        "id": "1",
                        "attributes": {
                          "name": "Academic"
                        },
                        "relationships": {
                          "category": {
                            "data": {
                              "id": "2",
                              "type": "incidentCategory"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/incident-type/1"
                        }
                      },
                      {
                        "type": "incidentType",
                        "id": "1",
                        "attributes": {
                          "name": "Academic"
                        },
                        "relationships": {
                          "category": {
                            "data": {
                              "id": "2",
                              "type": "incidentCategory"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/incident-type/1"
                        }
                      },
                      {
                        "type": "incidentType",
                        "id": "1",
                        "attributes": {
                          "name": "Academic"
                        },
                        "relationships": {
                          "category": {
                            "data": {
                              "id": "2",
                              "type": "incidentCategory"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/incident-type/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/incident-type/{id}": {
    "get": {
      "operationId": "getIncidentType",
      "summary": "Get Incident Type",
      "description": "Retrieves a single instance of `incidentType`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'incidentType' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'incidentType' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/incidentType"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "incidentType",
                      "id": "1",
                      "attributes": {
                        "name": "Academic"
                      },
                      "relationships": {
                        "category": {
                          "data": {
                            "id": "2",
                            "type": "incidentCategory"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/welfare/incident-type/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/incident/{id}": {
    "get": {
      "operationId": "getIncident",
      "summary": "Get Incident",
      "description": "Retrieves a single instance of `incident`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'incident' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'incident' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/incident"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "incident",
                      "id": "1",
                      "attributes": {
                        "incidentDate": "2018-01-01",
                        "incidentTime": "12:30:10",
                        "isConfidential": true,
                        "isReadOnly": false
                      },
                      "relationships": {
                        "teacher": {
                          "data": {
                            "id": "2",
                            "type": "staff"
                          }
                        },
                        "type": {
                          "data": {
                            "id": "2",
                            "type": "incidentType"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/welfare/incident/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/student-award-link": {
    "get": {
      "operationId": "getStudentAwardLinks",
      "summary": "Get Student Award Links",
      "description": "Retrieves a page of instances of `studentAwardLink`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'studentAwardLink' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/studentAwardLink"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "studentAwardLink",
                        "id": "1",
                        "attributes": {
                          "date": "2018-01-01"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/award/1"
                        }
                      },
                      {
                        "type": "studentAwardLink",
                        "id": "1",
                        "attributes": {
                          "date": "2018-01-01"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/award/1"
                        }
                      },
                      {
                        "type": "studentAwardLink",
                        "id": "1",
                        "attributes": {
                          "date": "2018-01-01"
                        },
                        "relationships": {
                          "student": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/award/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/student-award-link/{id}": {
    "get": {
      "operationId": "getStudentAwardLink",
      "summary": "Get Student Award Link",
      "description": "Retrieves a single instance of `studentAwardLink`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'studentAwardLink' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'studentAwardLink' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/studentAwardLink"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "studentAwardLink",
                      "id": "1",
                      "attributes": {
                        "date": "2018-01-01"
                      },
                      "relationships": {
                        "student": {
                          "data": {
                            "id": "2",
                            "type": "student"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/welfare/award/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/wellbeing-note": {
    "get": {
      "operationId": "getWellbeingNotes",
      "summary": "Get Wellbeing Notes",
      "description": "Retrieves a page of instances of `wellbeingNote`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "enrolmentStudentIds",
          "required": false,
          "description": "String Comma-separated list of `enrolmentStudent` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'wellbeingNote' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/wellbeingNote"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "wellbeingNote",
                        "id": "1",
                        "attributes": {
                          "subject": "Excellent performance in extra class",
                          "content": "Student managed to get 100% grade in every test during the extra classes",
                          "isHtml": false
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "1",
                              "type": "administrativeUser"
                            }
                          },
                          "category": {
                            "data": {
                              "id": "2",
                              "type": "wellbeingNoteCategory"
                            }
                          },
                          "attachments": {
                            "links": {
                              "related": "/v1/welfare/wellbeing-note/1/attachments"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/wellbeing-note/1"
                        }
                      },
                      {
                        "type": "wellbeingNote",
                        "id": "1",
                        "attributes": {
                          "subject": "Excellent performance in extra class",
                          "content": "Student managed to get 100% grade in every test during the extra classes",
                          "isHtml": false
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "1",
                              "type": "administrativeUser"
                            }
                          },
                          "category": {
                            "data": {
                              "id": "2",
                              "type": "wellbeingNoteCategory"
                            }
                          },
                          "attachments": {
                            "links": {
                              "related": "/v1/welfare/wellbeing-note/1/attachments"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/wellbeing-note/1"
                        }
                      },
                      {
                        "type": "wellbeingNote",
                        "id": "1",
                        "attributes": {
                          "subject": "Excellent performance in extra class",
                          "content": "Student managed to get 100% grade in every test during the extra classes",
                          "isHtml": false
                        },
                        "relationships": {
                          "enrolmentStudent": {
                            "data": {
                              "id": "2",
                              "type": "student"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "1",
                              "type": "administrativeUser"
                            }
                          },
                          "category": {
                            "data": {
                              "id": "2",
                              "type": "wellbeingNoteCategory"
                            }
                          },
                          "attachments": {
                            "links": {
                              "related": "/v1/welfare/wellbeing-note/1/attachments"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/wellbeing-note/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/wellbeing-note-attachment": {
    "get": {
      "operationId": "getWellbeingNoteAttachments",
      "summary": "Get Wellbeing Note Attachments",
      "description": "Retrieves a page of instances of `wellbeingNoteAttachment`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "noteIds",
          "required": false,
          "description": "String Comma-separated list of `note` relation IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'wellbeingNoteAttachment' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/wellbeingNoteAttachment"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "wellbeingNoteAttachment",
                        "id": "1",
                        "attributes": {
                          "fileName": "certificate.pdf"
                        },
                        "relationships": {
                          "note": {
                            "data": {
                              "id": "2",
                              "type": "wellbeingNote"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "3",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/wellbeing-note-attachment/1"
                        }
                      },
                      {
                        "type": "wellbeingNoteAttachment",
                        "id": "1",
                        "attributes": {
                          "fileName": "certificate.pdf"
                        },
                        "relationships": {
                          "note": {
                            "data": {
                              "id": "2",
                              "type": "wellbeingNote"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "3",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/wellbeing-note-attachment/1"
                        }
                      },
                      {
                        "type": "wellbeingNoteAttachment",
                        "id": "1",
                        "attributes": {
                          "fileName": "certificate.pdf"
                        },
                        "relationships": {
                          "note": {
                            "data": {
                              "id": "2",
                              "type": "wellbeingNote"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "3",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/wellbeing-note-attachment/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/wellbeing-note-attachment/{id}": {
    "get": {
      "operationId": "getWellbeingNoteAttachment",
      "summary": "Get Wellbeing Note Attachment",
      "description": "Retrieves a single instance of `wellbeingNoteAttachment`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'wellbeingNoteAttachment' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'wellbeingNoteAttachment' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/wellbeingNoteAttachment"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "wellbeingNoteAttachment",
                      "id": "1",
                      "attributes": {
                        "fileName": "certificate.pdf"
                      },
                      "relationships": {
                        "note": {
                          "data": {
                            "id": "2",
                            "type": "wellbeingNote"
                          }
                        },
                        "createdBy": {
                          "data": {
                            "id": "3",
                            "type": "administrativeUser"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/welfare/wellbeing-note-attachment/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/wellbeing-note-category": {
    "get": {
      "operationId": "getWellbeingNoteCategories",
      "summary": "Get Wellbeing Note Categories",
      "description": "Retrieves a page of instances of `wellbeingNoteCategory`.",
      "parameters": [
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "ids",
          "required": false,
          "description": "String Comma-separated list of IDs to filter by. [optional] [default: null] [example: \"1,13,42\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "includeInactive",
          "required": false,
          "description": "Boolean If true inactive (soft deleted) models will be included in the results. [optional] [default: false] [example: TRUE]",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'wellbeingNoteCategory' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/wellbeingNoteCategory"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "wellbeingNoteCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Misc notes",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/wellbeing-note-category/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "wellbeingNoteCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Misc notes",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/wellbeing-note-category/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      },
                      {
                        "type": "wellbeingNoteCategory",
                        "id": "1",
                        "attributes": {
                          "name": "Misc notes",
                          "isActive": true
                        },
                        "links": {
                          "self": "/v1/welfare/wellbeing-note-category/1"
                        },
                        "meta": {
                          "deletedDate": null
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/wellbeing-note-category/{id}": {
    "get": {
      "operationId": "getWellbeingNoteCategory",
      "summary": "Get Wellbeing Note Category",
      "description": "Retrieves a single instance of `wellbeingNoteCategory`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'wellbeingNoteCategory' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'wellbeingNoteCategory' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/wellbeingNoteCategory"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "wellbeingNoteCategory",
                      "id": "1",
                      "attributes": {
                        "name": "Misc notes",
                        "isActive": true
                      },
                      "links": {
                        "self": "/v1/welfare/wellbeing-note-category/1"
                      },
                      "meta": {
                        "deletedDate": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/wellbeing-note/{id}": {
    "get": {
      "operationId": "getWellbeingNote",
      "summary": "Get Wellbeing Note",
      "description": "Retrieves a single instance of `wellbeingNote`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'wellbeingNote' to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a single 'wellbeingNote' resource.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/wellbeingNote"
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": {
                      "type": "wellbeingNote",
                      "id": "1",
                      "attributes": {
                        "subject": "Excellent performance in extra class",
                        "content": "Student managed to get 100% grade in every test during the extra classes",
                        "isHtml": false
                      },
                      "relationships": {
                        "enrolmentStudent": {
                          "data": {
                            "id": "2",
                            "type": "student"
                          }
                        },
                        "createdBy": {
                          "data": {
                            "id": "1",
                            "type": "administrativeUser"
                          }
                        },
                        "category": {
                          "data": {
                            "id": "2",
                            "type": "wellbeingNoteCategory"
                          }
                        },
                        "attachments": {
                          "links": {
                            "related": "/v1/welfare/wellbeing-note/1/attachments"
                          }
                        }
                      },
                      "links": {
                        "self": "/v1/welfare/wellbeing-note/1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "/v1/welfare/wellbeing-note/{id}/attachments": {
    "get": {
      "operationId": "getWellbeingNoteRelatedAttachments",
      "summary": "Get Wellbeing Note Related Attachments",
      "description": "Retrieves a page of the instances of ``, the relation `attachments` of `wellbeingNoteAttachment`.",
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "description": "Number ID of the 'wellbeingNoteAttachment' which relation to retrieve [example: 17]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "include",
          "required": false,
          "description": "String Comma-separated list of relations to sideload. Allowed values are: None.. [optional] [default: null] [example: \"None.\"] \nValue constraints:\nLength must be between 0 and 1024 characters, inclusive",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "limit",
          "required": false,
          "description": "Number The number of models to return in a single request, value must be between 1-{maxLimit}. [optional] [default: 10] \nValue constraints:\nMimimum value: 1 [inclusive]\nMaximum value: 200 [inclusive]",
          "schema": {
            "type": "number"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "required": false,
          "description": "Number Offset by which to return the models from the database, must be larger or equal 0. [optional] [default: 0] \nValue constraints:\nMimimum value: 0 [inclusive]",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "JSON API response containing a collection of 'wellbeingNoteAttachment' resources.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/wellbeingNoteAttachment"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "count"
                    ],
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "A total number of models in the database that match the query constraints."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "first": {
                        "type": "string",
                        "description": "A link to the first page of the results. Will only appear if there are any results. "
                      },
                      "last": {
                        "type": "string",
                        "description": "A link to the last page of the results. Will only appear if there is more than one page of results."
                      },
                      "prev": {
                        "type": "string",
                        "description": "A link to the previous page of the results. Will only appear if not on the last page."
                      },
                      "next": {
                        "type": "string",
                        "description": "A link to the next page of the results. Will only appear if not on the first page."
                      }
                    }
                  }
                }
              },
              "examples": {
                "validResponse": {
                  "value": {
                    "data": [
                      {
                        "type": "wellbeingNoteAttachment",
                        "id": "1",
                        "attributes": {
                          "fileName": "certificate.pdf"
                        },
                        "relationships": {
                          "note": {
                            "data": {
                              "id": "2",
                              "type": "wellbeingNote"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "3",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/wellbeing-note-attachment/1"
                        }
                      },
                      {
                        "type": "wellbeingNoteAttachment",
                        "id": "1",
                        "attributes": {
                          "fileName": "certificate.pdf"
                        },
                        "relationships": {
                          "note": {
                            "data": {
                              "id": "2",
                              "type": "wellbeingNote"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "3",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/wellbeing-note-attachment/1"
                        }
                      },
                      {
                        "type": "wellbeingNoteAttachment",
                        "id": "1",
                        "attributes": {
                          "fileName": "certificate.pdf"
                        },
                        "relationships": {
                          "note": {
                            "data": {
                              "id": "2",
                              "type": "wellbeingNote"
                            }
                          },
                          "createdBy": {
                            "data": {
                              "id": "3",
                              "type": "administrativeUser"
                            }
                          }
                        },
                        "links": {
                          "self": "/v1/welfare/wellbeing-note-attachment/1"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}